/* The following code was generated by JFlex 1.4.3 on 21.05.14 16:55 */

package org.mustbe.consulo.msil.lang.lexer;

import org.mustbe.consulo.msil.lang.psi.MsilTokens;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21.05.14 16:55 from the specification file
 * <tt>H:/github.com/consulo/consulo-dotnet/msil-psi-impl/src/org/mustbe/consulo/msil/lang/lexer/_MsilLexer.flex</tt>
 */
public class _MsilLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\3\22\0\1\1\5\0\1\7"+
    "\3\0\1\4\1\0\1\10\1\0\1\11\1\2\1\0\1\36\1\41"+
    "\1\40\1\42\1\0\1\37\1\0\1\35\50\0\1\14\1\34\1\12"+
    "\1\24\1\22\1\25\1\43\1\23\1\26\1\44\1\0\1\13\1\21"+
    "\1\33\1\20\1\27\1\0\1\30\1\15\1\17\1\16\1\32\1\0"+
    "\1\45\1\31\1\0\1\5\1\0\1\6\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\16\1\1\10\1\11\72\0\1\11\11\0\1\12"+
    "\14\0\1\13\10\0\1\14\1\0\1\15\10\0\1\16"+
    "\5\0\1\17\6\0\1\20\1\21\1\0\1\22\1\23"+
    "\1\24\6\0\1\25\3\0\1\26\1\27\1\30\4\0"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\5\0\1\37"+
    "\4\0\1\40\1\0\1\41\1\0\1\42\2\0\1\43"+
    "\1\0\1\44\3\0\1\45\1\0\1\46\2\0\1\47"+
    "\1\50\2\0\1\51\2\0\1\52\1\53\1\54\1\0"+
    "\1\55\1\56\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\46\0\46\0\46\0\46"+
    "\0\46\0\230\0\276\0\344\0\u010a\0\u0130\0\u0156\0\u017c"+
    "\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac"+
    "\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc"+
    "\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c"+
    "\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c"+
    "\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c"+
    "\0\u0792\0\u07b8\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c"+
    "\0\u08c2\0\u08e8\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc"+
    "\0\u09f2\0\u0a18\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc"+
    "\0\u0b22\0\u0b48\0\u0b6e\0\46\0\u0b94\0\u0bba\0\u0be0\0\u0c06"+
    "\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4\0\46\0\u0cea\0\u0d10"+
    "\0\u0d36\0\u0d5c\0\u0d82\0\u0da8\0\u0dce\0\u0df4\0\u0e1a\0\u0e40"+
    "\0\u0e66\0\u0e8c\0\46\0\u0eb2\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a"+
    "\0\u0f70\0\u0f96\0\u0fbc\0\46\0\u0fe2\0\46\0\u1008\0\u102e"+
    "\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112\0\46\0\u1138"+
    "\0\u115e\0\u1184\0\u11aa\0\u11d0\0\46\0\u11f6\0\u121c\0\u1242"+
    "\0\u1268\0\u128e\0\u12b4\0\u12da\0\46\0\u1300\0\46\0\46"+
    "\0\46\0\u1326\0\u134c\0\u1372\0\u1398\0\u13be\0\u13e4\0\46"+
    "\0\u140a\0\u1430\0\u1456\0\46\0\46\0\46\0\u147c\0\u14a2"+
    "\0\u14c8\0\u14ee\0\46\0\46\0\46\0\46\0\46\0\46"+
    "\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac\0\46\0\u15d2\0\u15f8"+
    "\0\u161e\0\u1644\0\46\0\u166a\0\46\0\u1690\0\46\0\u16b6"+
    "\0\u16dc\0\46\0\u1702\0\46\0\u1728\0\u174e\0\u1774\0\46"+
    "\0\u179a\0\46\0\u17c0\0\u17e6\0\46\0\46\0\u180c\0\u1832"+
    "\0\46\0\u1858\0\u187e\0\46\0\46\0\46\0\u18a4\0\46"+
    "\0\46\0\46";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\2"+
    "\1\20\1\2\1\21\1\22\1\2\1\23\1\24\1\25"+
    "\2\2\1\26\1\2\1\27\11\2\47\0\1\3\1\0"+
    "\1\3\44\0\1\30\1\0\1\31\53\0\1\32\1\0"+
    "\1\33\4\0\1\34\1\35\2\0\1\36\1\0\1\37"+
    "\31\0\1\40\7\0\1\41\50\0\1\42\34\0\1\43"+
    "\16\0\1\44\30\0\1\45\54\0\1\46\53\0\1\47"+
    "\56\0\1\50\26\0\1\51\32\0\1\52\12\0\1\53"+
    "\40\0\1\54\11\0\1\55\30\0\1\56\11\0\1\57"+
    "\31\0\1\60\3\0\1\61\5\0\1\62\37\0\1\63"+
    "\25\0\3\30\1\0\42\30\4\31\1\64\41\31\13\0"+
    "\1\65\2\0\1\66\44\0\1\67\52\0\1\70\55\0"+
    "\1\71\41\0\1\72\33\0\1\73\13\0\1\74\31\0"+
    "\1\75\45\0\1\76\50\0\1\77\43\0\1\100\45\0"+
    "\1\101\44\0\1\102\13\0\1\103\50\0\1\104\56\0"+
    "\1\105\20\0\1\106\52\0\1\107\41\0\1\110\60\0"+
    "\1\111\41\0\1\112\35\0\1\113\6\0\1\114\53\0"+
    "\1\115\31\0\1\116\5\0\1\117\32\0\1\120\60\0"+
    "\1\121\47\0\1\122\35\0\1\123\25\0\2\31\1\124"+
    "\1\31\1\64\41\31\14\0\1\125\46\0\1\126\45\0"+
    "\1\127\47\0\1\130\50\0\1\131\45\0\1\132\53\0"+
    "\1\133\35\0\1\134\42\0\1\135\60\0\1\136\37\0"+
    "\1\137\45\0\1\140\42\0\1\141\45\0\1\142\54\0"+
    "\1\143\36\0\1\144\50\0\1\145\45\0\1\146\45\0"+
    "\1\147\37\0\1\150\45\0\1\151\44\0\1\152\67\0"+
    "\1\153\1\154\1\155\1\156\24\0\1\157\41\0\1\160"+
    "\51\0\1\161\60\0\1\162\31\0\1\163\53\0\1\164"+
    "\40\0\1\165\41\0\1\166\47\0\1\167\47\0\1\170"+
    "\50\0\1\171\46\0\1\172\55\0\1\173\25\0\1\174"+
    "\46\0\1\175\60\0\1\176\33\0\1\177\60\0\1\200"+
    "\36\0\1\201\54\0\1\202\43\0\1\203\52\0\1\204"+
    "\47\0\1\205\1\206\1\207\1\210\17\0\1\211\66\0"+
    "\1\212\46\0\1\213\30\0\1\214\41\0\1\215\54\0"+
    "\1\216\62\0\1\217\50\0\1\220\44\0\1\221\24\0"+
    "\1\222\53\0\1\223\41\0\1\224\37\0\1\225\53\0"+
    "\1\226\41\0\1\227\44\0\1\230\50\0\1\231\46\0"+
    "\1\232\44\0\1\233\44\0\1\234\52\0\1\235\42\0"+
    "\1\236\46\0\1\237\37\0\1\240\65\0\1\241\25\0"+
    "\1\242\43\0\1\243\76\0\1\244\41\0\1\245\50\0"+
    "\1\246\44\0\1\247\23\0\1\250\52\0\1\251\52\0"+
    "\1\252\53\0\1\253\27\0\1\254\57\0\1\255\24\0"+
    "\1\256\45\0\1\257\52\0\1\260\45\0\1\261\42\0"+
    "\1\262\52\0\1\263\60\0\1\264\35\0\1\265\51\0"+
    "\1\266\30\0\1\267\45\0\1\270\44\0\1\271\50\0"+
    "\1\272\45\0\1\273\72\0\1\274\25\0\1\275\36\0"+
    "\1\276\51\0\1\277\50\0\1\300\54\0\1\301\27\0"+
    "\1\302\45\0\1\303\51\0\1\304\57\0\1\305\33\0"+
    "\1\306\54\0\1\307\52\0\1\310\43\0\1\311\36\0"+
    "\1\312\52\0\1\313\47\0\1\314\45\0\1\315\57\0"+
    "\1\316\21\0\1\317\52\0\1\320\43\0\1\321\40\0"+
    "\1\322\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6346];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\5\11\20\1\72\0\1\11\11\0"+
    "\1\11\14\0\1\11\10\0\1\11\1\0\1\11\10\0"+
    "\1\11\5\0\1\11\6\0\1\1\1\11\1\0\3\11"+
    "\6\0\1\11\3\0\3\11\4\0\6\11\5\0\1\11"+
    "\4\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\3\0\1\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\2\0\3\11\1\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  public _MsilLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _MsilLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 114) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { return MsilTokens.INT8_KEYWORD;
          }
        case 48: break;
        case 47: 
          { return MsilTokens.IMPLEMENTS_KEYWORD;
          }
        case 49: break;
        case 26: 
          { return MsilTokens.STRING_KEYWORD;
          }
        case 50: break;
        case 25: 
          { return MsilTokens.STATIC_KEYWORD;
          }
        case 51: break;
        case 43: 
          { return MsilTokens._PROPERTY_KEYWORD;
          }
        case 52: break;
        case 4: 
          { return MsilTokens.LBRACE;
          }
        case 53: break;
        case 3: 
          { return MsilTokens.PERC;
          }
        case 54: break;
        case 42: 
          { return MsilTokens._ASSEMBLY_KEYWORD;
          }
        case 55: break;
        case 5: 
          { return MsilTokens.RBRACE;
          }
        case 56: break;
        case 21: 
          { return MsilTokens._CLASS_KEYWORD;
          }
        case 57: break;
        case 27: 
          { return MsilTokens.UINT16_KEYWORD;
          }
        case 58: break;
        case 32: 
          { return MsilTokens._CUSTOM_KEYWORD;
          }
        case 59: break;
        case 29: 
          { return MsilTokens.UINT32_KEYWORD;
          }
        case 60: break;
        case 23: 
          { return MsilTokens._FIELD_KEYWORD;
          }
        case 61: break;
        case 40: 
          { return MsilTokens.ABSTRACT_KEYWORD;
          }
        case 62: break;
        case 31: 
          { return MsilTokens.PUBLIC_KEYWORD;
          }
        case 63: break;
        case 12: 
          { return MsilTokens.VOID_KEYWORD;
          }
        case 64: break;
        case 7: 
          { return MsilTokens.COMMA;
          }
        case 65: break;
        case 17: 
          { return MsilTokens.FINAL_KEYWORD;
          }
        case 66: break;
        case 15: 
          { return MsilTokens.UINT8_KEYWORD;
          }
        case 67: break;
        case 36: 
          { return MsilTokens.FLOAT64_KEYWORD;
          }
        case 68: break;
        case 19: 
          { return MsilTokens.INT64_KEYWORD;
          }
        case 69: break;
        case 37: 
          { return MsilTokens.PRIVATE_KEYWORD;
          }
        case 70: break;
        case 30: 
          { return MsilTokens.OBJECT_KEYWORD;
          }
        case 71: break;
        case 46: 
          { return MsilTokens.VALUETYPE_KEYWORD;
          }
        case 72: break;
        case 8: 
          { return MsilTokens.LINE_COMMENT;
          }
        case 73: break;
        case 2: 
          { return MsilTokens.WHITE_SPACE;
          }
        case 74: break;
        case 34: 
          { return MsilTokens.LITERAL_KEYWORD;
          }
        case 75: break;
        case 14: 
          { return MsilTokens.CLASS_KEYWORD;
          }
        case 76: break;
        case 13: 
          { return MsilTokens.BOOL_KEYWORD;
          }
        case 77: break;
        case 10: 
          { return MsilTokens.CHAR_KEYWORD;
          }
        case 78: break;
        case 39: 
          { return MsilTokens.ASSEMBLY_KEYWORD;
          }
        case 79: break;
        case 35: 
          { return MsilTokens.EXTENDS_KEYWORD;
          }
        case 80: break;
        case 16: 
          { return MsilTokens.FLOAT_KEYWORD;
          }
        case 81: break;
        case 44: 
          { return MsilTokens.HIDEBYSIG_KEYWORD;
          }
        case 82: break;
        case 18: 
          { return MsilTokens.INT16_KEYWORD;
          }
        case 83: break;
        case 22: 
          { return MsilTokens._EVENT_KEYWORD;
          }
        case 84: break;
        case 20: 
          { return MsilTokens.INT32_KEYWORD;
          }
        case 85: break;
        case 6: 
          { return MsilTokens.AND;
          }
        case 86: break;
        case 41: 
          { return MsilTokens.INITONLY_KEYWORD;
          }
        case 87: break;
        case 9: 
          { return MsilTokens.BLOCK_COMMENT;
          }
        case 88: break;
        case 38: 
          { return MsilTokens.VIRTUAL_KEYWORD;
          }
        case 89: break;
        case 28: 
          { return MsilTokens.UINT64_KEYWORD;
          }
        case 90: break;
        case 24: 
          { return MsilTokens._PARAM_KEYWORD;
          }
        case 91: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 92: break;
        case 33: 
          { return MsilTokens._METHOD_KEYWORD;
          }
        case 93: break;
        case 45: 
          { return MsilTokens.PROTECTED_KEYWORD;
          }
        case 94: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
