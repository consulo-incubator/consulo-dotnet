/* The following code was generated by JFlex 1.4.3 on 06.01.14 20:21 */

package org.mustbe.consulo.csharp.lang.lexer;

import java.util.*;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.mustbe.consulo.csharp.lang.psi.CSharpTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06.01.14 20:21 from the specification file
 * <tt>_CSharpLexer.flex</tt>
 */
class _CSharpLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MACRO = 2;
  public static final int MACRO_ENTERED = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\14\1\3\1\13\1\0\1\3\1\5\16\14\4\0\1\3\1\105"+
    "\1\11\1\45\1\2\1\101\1\102\1\7\1\71\1\72\1\6\1\100"+
    "\1\107\1\42\1\37\1\4\1\24\11\1\1\76\1\77\1\73\1\74"+
    "\1\75\1\110\1\12\1\17\1\30\1\17\1\34\1\41\1\32\5\2"+
    "\1\21\1\36\2\2\1\44\4\2\1\23\2\2\1\26\2\2\1\67"+
    "\1\10\1\70\1\106\1\15\1\0\1\16\1\27\1\57\1\33\1\40"+
    "\1\31\1\51\1\60\1\46\1\61\1\64\1\20\1\35\1\47\1\52"+
    "\1\43\1\2\1\50\1\53\1\54\1\22\1\55\1\62\1\25\1\56"+
    "\1\63\1\65\1\103\1\66\1\104\41\14\2\0\4\2\4\0\1\2"+
    "\2\0\1\14\7\0\1\2\4\0\1\2\5\0\27\2\1\0\37\2"+
    "\1\0\u013f\2\31\0\162\2\4\0\14\2\16\0\5\2\11\0\1\2"+
    "\21\0\130\14\5\0\23\14\12\0\1\2\13\0\1\2\1\0\3\2"+
    "\1\0\1\2\1\0\24\2\1\0\54\2\1\0\46\2\1\0\5\2"+
    "\4\0\202\2\1\0\4\14\3\0\105\2\1\0\46\2\2\0\2\2"+
    "\6\0\20\2\41\0\46\2\2\0\1\2\7\0\47\2\11\0\21\14"+
    "\1\0\27\14\1\0\3\14\1\0\1\14\1\0\2\14\1\0\1\14"+
    "\13\0\33\2\5\0\3\2\15\0\4\14\14\0\6\14\13\0\32\2"+
    "\5\0\13\2\16\14\7\0\12\14\4\0\2\2\1\14\143\2\1\0"+
    "\1\2\10\14\1\0\6\14\2\2\2\14\1\0\4\14\2\2\12\14"+
    "\3\2\2\0\1\2\17\0\1\14\1\2\1\14\36\2\33\14\2\0"+
    "\3\2\60\0\46\2\13\14\1\2\u014f\0\3\14\66\2\2\0\1\14"+
    "\1\2\20\14\2\0\1\2\4\14\3\0\12\2\2\14\2\0\12\14"+
    "\21\0\3\14\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2"+
    "\1\0\1\2\3\0\4\2\2\0\1\14\1\2\7\14\2\0\2\14"+
    "\2\0\3\14\11\0\1\14\4\0\2\2\1\0\3\2\2\14\2\0"+
    "\12\14\4\2\15\0\3\14\1\0\6\2\4\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2\2\0\1\14"+
    "\1\0\5\14\4\0\2\14\2\0\3\14\13\0\4\2\1\0\1\2"+
    "\7\0\14\14\3\2\14\0\3\14\1\0\11\2\1\0\3\2\1\0"+
    "\26\2\1\0\7\2\1\0\2\2\1\0\5\2\2\0\1\14\1\2"+
    "\10\14\1\0\3\14\1\0\3\14\2\0\1\2\17\0\2\2\2\14"+
    "\2\0\12\14\1\0\1\2\17\0\3\14\1\0\10\2\2\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\2\0\1\14"+
    "\1\2\6\14\3\0\2\14\2\0\3\14\10\0\2\14\4\0\2\2"+
    "\1\0\3\2\4\0\12\14\1\0\1\2\20\0\1\14\1\2\1\0"+
    "\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0"+
    "\2\2\3\0\2\2\3\0\3\2\3\0\10\2\1\0\3\2\4\0"+
    "\5\14\3\0\3\14\1\0\4\14\11\0\1\14\17\0\11\14\11\0"+
    "\1\2\7\0\3\14\1\0\10\2\1\0\3\2\1\0\27\2\1\0"+
    "\12\2\1\0\5\2\4\0\7\14\1\0\3\14\1\0\4\14\7\0"+
    "\2\14\11\0\2\2\4\0\12\14\22\0\2\14\1\0\10\2\1\0"+
    "\3\2\1\0\27\2\1\0\12\2\1\0\5\2\2\0\1\14\1\2"+
    "\7\14\1\0\3\14\1\0\4\14\7\0\2\14\7\0\1\2\1\0"+
    "\2\2\4\0\12\14\22\0\2\14\1\0\10\2\1\0\3\2\1\0"+
    "\27\2\1\0\20\2\4\0\6\14\2\0\3\14\1\0\4\14\11\0"+
    "\1\14\10\0\2\2\4\0\12\14\22\0\2\14\1\0\22\2\3\0"+
    "\30\2\1\0\11\2\1\0\1\2\2\0\7\2\3\0\1\14\4\0"+
    "\6\14\1\0\1\14\1\0\10\14\22\0\2\14\15\0\60\2\1\14"+
    "\2\2\7\14\4\0\10\2\10\14\1\0\12\14\47\0\2\2\1\0"+
    "\1\2\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0"+
    "\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0"+
    "\4\2\1\14\2\2\6\14\1\0\2\14\1\2\2\0\5\2\1\0"+
    "\1\2\1\0\6\14\2\0\12\14\2\0\2\2\42\0\1\2\27\0"+
    "\2\14\6\0\12\14\13\0\1\14\1\0\1\14\1\0\1\14\4\0"+
    "\2\14\10\2\1\0\42\2\6\0\24\14\1\0\2\14\4\2\4\0"+
    "\10\14\1\0\44\14\11\0\1\14\71\0\42\2\1\0\5\2\1\0"+
    "\2\2\1\0\7\14\3\0\4\14\6\0\12\14\6\0\6\2\4\14"+
    "\106\0\46\2\12\0\51\2\7\0\132\2\5\0\104\2\5\0\122\2"+
    "\6\0\7\2\1\0\77\2\1\0\1\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\47\2\1\0\1\2\1\0\4\2"+
    "\2\0\37\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2"+
    "\1\0\4\2\2\0\7\2\1\0\7\2\1\0\27\2\1\0\37\2"+
    "\1\0\1\2\1\0\4\2\2\0\7\2\1\0\47\2\1\0\23\2"+
    "\16\0\11\14\56\0\125\2\14\0\u026c\2\2\0\10\2\12\0\32\2"+
    "\5\0\113\2\3\0\3\2\17\0\15\2\1\0\4\2\3\14\13\0"+
    "\22\2\3\14\13\0\22\2\2\14\14\0\15\2\1\0\3\2\1\0"+
    "\2\14\14\0\64\2\40\14\3\0\1\2\3\0\2\2\1\14\2\0"+
    "\12\14\41\0\3\14\2\0\12\14\6\0\130\2\10\0\51\2\1\14"+
    "\126\0\35\2\3\0\14\14\4\0\14\14\12\0\12\14\36\2\2\0"+
    "\5\2\u038b\0\154\2\224\0\234\2\4\0\132\2\6\0\26\2\2\0"+
    "\6\2\2\0\46\2\2\0\6\2\2\0\10\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\37\2\2\0\65\2\1\0\7\2\1\0"+
    "\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0\6\2\4\0"+
    "\15\2\5\0\3\2\1\0\7\2\17\0\4\14\32\0\5\14\20\0"+
    "\2\2\23\0\1\2\13\0\4\14\6\0\6\14\1\0\1\2\15\0"+
    "\1\2\40\0\22\2\36\0\15\14\4\0\1\14\3\0\6\14\27\0"+
    "\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0\3\2\1\0"+
    "\7\2\3\0\3\2\5\0\5\2\26\0\44\2\u0e81\0\3\2\31\0"+
    "\11\2\6\14\1\0\5\2\2\0\5\2\4\0\126\2\2\0\2\14"+
    "\2\0\3\2\1\0\137\2\5\0\50\2\4\0\136\2\21\0\30\2"+
    "\70\0\20\2\u0200\0\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2"+
    "\u215c\0\u012e\2\2\0\73\2\225\0\7\2\14\0\5\2\5\0\1\2"+
    "\1\14\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2"+
    "\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2"+
    "\50\0\15\2\3\0\20\14\20\0\4\14\17\0\2\2\30\0\3\2"+
    "\31\0\1\2\6\0\5\2\1\0\207\2\2\0\1\14\4\0\1\2"+
    "\13\0\12\14\7\0\32\2\4\0\1\2\1\0\32\2\12\0\132\2"+
    "\3\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2\3\0\2\2"+
    "\3\0\2\2\22\0\3\14\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\3\3\1\2\3\3\1\11\1\3\1\12"+
    "\1\3\1\13\12\3\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\4"+
    "\2\40\1\1\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\2\45\1\47\1\50\2\7\2\10\1\51\1\3\1\52"+
    "\5\3\2\2\17\3\1\53\3\3\1\54\1\55\1\56"+
    "\27\3\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\5\0\1\71\1\45\1\47\1\72"+
    "\1\50\2\51\10\3\1\2\1\0\25\3\1\73\2\3"+
    "\1\74\1\3\1\75\2\3\1\76\23\3\2\0\1\77"+
    "\2\0\1\3\1\100\1\101\1\3\1\102\3\3\1\0"+
    "\1\103\1\3\1\104\1\105\10\3\1\106\1\3\1\107"+
    "\7\3\1\110\2\3\1\111\12\3\1\112\1\3\1\113"+
    "\2\3\1\114\3\3\1\115\1\3\3\0\1\50\1\3"+
    "\1\116\1\3\1\117\1\3\1\120\1\121\1\122\7\3"+
    "\1\123\13\3\1\124\5\3\1\125\3\3\1\126\1\127"+
    "\1\3\1\130\4\0\1\3\1\131\1\132\4\3\1\133"+
    "\1\3\1\134\1\135\1\136\6\3\1\137\1\140\2\3"+
    "\1\141\1\142\1\143\1\144\1\145\1\146\3\3\1\0"+
    "\1\147\2\0\1\3\1\150\1\3\1\151\1\152\1\153"+
    "\1\154\7\3\1\155\2\3\1\156\1\0\1\157\1\160"+
    "\1\161\2\3\1\162\1\3\1\163\1\164\1\165\1\166"+
    "\1\167\1\0\1\170\1\171\1\172\1\0\1\173";

  private static int [] zzUnpackAction() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\333\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe"+
    "\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\333"+
    "\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845"+
    "\0\u088e\0\u08d7\0\333\0\333\0\333\0\333\0\333\0\333"+
    "\0\u0920\0\u0969\0\u09b2\0\u09fb\0\333\0\u0a44\0\333\0\u0a8d"+
    "\0\u0ad6\0\333\0\u0b1f\0\333\0\333\0\u0b68\0\u0bb1\0\u0bfa"+
    "\0\333\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\333\0\333\0\333"+
    "\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\333\0\u0e8b\0\u0ed4\0\333"+
    "\0\u0f1d\0\u0f66\0\u016d\0\u0faf\0\u0ff8\0\u1041\0\u108a\0\u10d3"+
    "\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b"+
    "\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563"+
    "\0\u15ac\0\333\0\u15f5\0\u163e\0\u1687\0\u016d\0\u16d0\0\u016d"+
    "\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d\0\u1886\0\u18cf\0\u1918"+
    "\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\u1ace\0\u1b17\0\u1b60"+
    "\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f\0\333"+
    "\0\333\0\333\0\333\0\333\0\333\0\333\0\333\0\333"+
    "\0\333\0\u0c43\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\333\0\u1ecc"+
    "\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\333\0\u2039\0\u2082\0\u20cb"+
    "\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313"+
    "\0\u235c\0\u23a5\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b"+
    "\0\u25a4\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a\0\u27a3"+
    "\0\u27ec\0\u2835\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2\0\u016d"+
    "\0\u29eb\0\u016d\0\u2a34\0\u2a7d\0\u016d\0\u2ac6\0\u2b0f\0\u2b58"+
    "\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0"+
    "\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8"+
    "\0\u3031\0\u307a\0\333\0\u30c3\0\u310c\0\u3155\0\u016d\0\u016d"+
    "\0\u319e\0\u016d\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u016d\0\u330b"+
    "\0\u016d\0\u016d\0\u3354\0\u339d\0\u33e6\0\u342f\0\u3478\0\u34c1"+
    "\0\u350a\0\u3553\0\u016d\0\u359c\0\u016d\0\u35e5\0\u362e\0\u3677"+
    "\0\u36c0\0\u3709\0\u3752\0\u379b\0\u016d\0\u37e4\0\u382d\0\u016d"+
    "\0\u3876\0\u38bf\0\u3908\0\u3951\0\u399a\0\u39e3\0\u3a2c\0\u3a75"+
    "\0\u3abe\0\u3b07\0\u016d\0\u3b50\0\u016d\0\u3b99\0\u3be2\0\u016d"+
    "\0\u3c2b\0\u3c74\0\u3cbd\0\u016d\0\u3d06\0\u3d4f\0\u3d98\0\u3de1"+
    "\0\333\0\u3e2a\0\u016d\0\u3e73\0\u016d\0\u3ebc\0\u016d\0\u016d"+
    "\0\u016d\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0\0\u4029\0\u4072\0\u40bb"+
    "\0\u016d\0\u4104\0\u414d\0\u4196\0\u41df\0\u4228\0\u4271\0\u42ba"+
    "\0\u4303\0\u434c\0\u4395\0\u43de\0\u016d\0\u4427\0\u4470\0\u44b9"+
    "\0\u4502\0\u454b\0\u016d\0\u4594\0\u45dd\0\u4626\0\u016d\0\u016d"+
    "\0\u466f\0\u016d\0\u46b8\0\u4701\0\u474a\0\u4793\0\u47dc\0\u016d"+
    "\0\u016d\0\u4825\0\u486e\0\u48b7\0\u4900\0\u016d\0\u4949\0\u016d"+
    "\0\u016d\0\u016d\0\u4992\0\u49db\0\u4a24\0\u4a6d\0\u4ab6\0\u4aff"+
    "\0\u016d\0\u016d\0\u4b48\0\u4b91\0\u016d\0\u016d\0\u016d\0\u016d"+
    "\0\u016d\0\u016d\0\u4bda\0\u4c23\0\u4c6c\0\u4cb5\0\333\0\u4cfe"+
    "\0\u4d47\0\u4d90\0\u016d\0\u4dd9\0\u016d\0\u016d\0\u016d\0\u016d"+
    "\0\u4e22\0\u4e6b\0\u4eb4\0\u4efd\0\u4f46\0\u4f8f\0\u4fd8\0\u016d"+
    "\0\u5021\0\u506a\0\333\0\u50b3\0\333\0\u016d\0\u016d\0\u50fc"+
    "\0\u5145\0\u016d\0\u518e\0\u016d\0\u016d\0\u016d\0\u016d\0\u016d"+
    "\0\u51d7\0\u016d\0\u016d\0\u016d\0\u5220\0\333";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\7\1\11\1\12"+
    "\1\4\1\13\1\14\1\7\1\4\1\6\1\15\1\6"+
    "\1\16\1\6\1\17\1\6\1\20\2\6\1\21\1\6"+
    "\1\22\1\6\1\23\3\6\1\24\1\25\1\6\1\26"+
    "\1\27\1\6\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\6\1\41\2\6\1\42\2\6"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\3\4\1\67\1\4\1\70"+
    "\5\4\1\71\31\4\1\72\45\4\1\73\1\67\1\4"+
    "\1\70\5\4\1\71\1\4\7\73\1\4\12\73\1\4"+
    "\2\73\1\4\2\73\1\4\17\73\24\4\112\0\1\5"+
    "\13\0\1\5\2\0\2\74\2\75\1\5\4\0\2\76"+
    "\2\77\2\100\1\101\2\102\50\0\2\6\11\0\23\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\27\0\1\7"+
    "\1\0\1\7\5\0\1\7\101\0\1\103\1\0\1\104"+
    "\102\0\5\12\1\0\1\12\1\105\1\106\2\12\1\0"+
    "\75\12\5\13\1\0\2\13\1\107\1\110\1\13\1\0"+
    "\75\13\11\0\1\111\100\0\2\6\11\0\13\6\1\112"+
    "\7\6\1\0\2\6\1\0\2\6\1\0\5\6\1\113"+
    "\11\6\25\0\2\6\11\0\23\6\1\0\2\6\1\0"+
    "\2\6\1\0\4\6\1\114\12\6\25\0\2\6\11\0"+
    "\4\6\1\115\16\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\116\1\117\3\6\1\120\11\6\25\0\1\5\13\0"+
    "\1\5\2\0\2\74\2\75\1\5\2\121\2\122\2\76"+
    "\2\77\2\100\1\101\2\102\50\0\2\6\11\0\2\6"+
    "\1\123\20\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\124\1\6\1\125\3\6\1\126\6\6\25\0\2\6"+
    "\11\0\2\6\1\127\1\6\1\130\16\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\131\3\6\1\132\12\6\25\0"+
    "\2\6\11\0\23\6\1\0\1\133\1\6\1\0\2\6"+
    "\1\0\4\6\1\134\3\6\1\135\6\6\25\0\1\101"+
    "\22\0\1\101\65\0\2\6\11\0\4\6\1\136\4\6"+
    "\1\137\11\6\1\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\140\5\6\1\141\7\6\66\0\1\142\47\0\2\6"+
    "\11\0\2\6\1\143\3\6\1\144\14\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\145\14\6\25\0\2\6"+
    "\11\0\15\6\1\146\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\147\3\6\1\150\11\6\25\0\2\6"+
    "\11\0\2\6\1\151\3\6\1\152\14\6\1\0\1\153"+
    "\1\6\1\0\2\6\1\0\17\6\25\0\2\6\11\0"+
    "\23\6\1\0\1\154\1\6\1\0\2\6\1\0\17\6"+
    "\25\0\2\6\11\0\23\6\1\0\2\6\1\0\2\6"+
    "\1\0\4\6\1\155\12\6\25\0\2\6\11\0\6\6"+
    "\1\156\4\6\1\157\7\6\1\0\2\6\1\0\1\160"+
    "\1\6\1\0\7\6\1\161\7\6\25\0\2\6\11\0"+
    "\13\6\1\162\7\6\1\0\1\163\1\6\1\0\2\6"+
    "\1\0\1\164\5\6\1\165\3\6\1\166\4\6\25\0"+
    "\2\6\11\0\23\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\1\167\5\6\1\170\1\6\1\171\4\6\25\0"+
    "\2\6\11\0\23\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\172\3\6\1\173\12\6\25\0\2\6\11\0\4\6"+
    "\1\174\16\6\1\0\2\6\1\0\2\6\1\0\4\6"+
    "\1\175\5\6\1\176\4\6\25\0\2\6\11\0\23\6"+
    "\1\0\2\6\1\0\2\6\1\0\12\6\1\177\4\6"+
    "\120\0\1\200\110\0\1\201\1\202\107\0\1\203\112\0"+
    "\1\204\112\0\1\205\112\0\1\206\111\0\1\207\101\0"+
    "\1\210\124\0\1\211\3\0\1\67\120\0\1\71\100\0"+
    "\1\212\1\0\1\212\5\0\1\212\17\0\1\213\4\0"+
    "\1\214\5\0\1\215\1\0\1\216\41\0\2\73\11\0"+
    "\23\73\1\0\2\73\1\0\2\73\1\0\17\73\46\0"+
    "\2\217\105\0\2\217\70\0\1\101\13\0\1\101\6\0"+
    "\1\101\4\0\2\76\2\77\2\100\1\0\2\102\50\0"+
    "\1\220\13\0\1\220\6\0\1\220\4\0\2\76\2\77"+
    "\2\100\3\0\1\220\35\0\1\220\10\0\4\221\1\222"+
    "\1\0\5\221\1\0\75\221\6\223\1\0\102\223\5\12"+
    "\1\0\5\12\1\0\75\12\5\13\1\0\5\13\1\0"+
    "\75\13\5\111\1\0\2\111\1\224\1\225\77\111\1\0"+
    "\2\6\11\0\23\6\1\0\2\6\1\0\2\6\1\0"+
    "\5\6\1\226\11\6\25\0\2\6\11\0\23\6\1\0"+
    "\2\6\1\0\2\6\1\0\1\6\1\227\7\6\1\230"+
    "\5\6\25\0\2\6\11\0\23\6\1\0\2\6\1\0"+
    "\2\6\1\0\4\6\1\231\12\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\1\6\1\232"+
    "\15\6\25\0\2\6\11\0\23\6\1\0\2\6\1\0"+
    "\2\6\1\0\5\6\1\233\11\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\1\234\11\6"+
    "\1\235\4\6\25\0\1\236\13\0\3\236\2\74\2\75"+
    "\1\236\2\0\6\236\2\0\1\237\2\236\15\0\1\236"+
    "\32\0\1\122\13\0\1\122\2\0\2\74\2\75\1\122"+
    "\65\0\2\6\11\0\23\6\1\0\2\6\1\0\2\6"+
    "\1\0\5\6\1\240\11\6\25\0\2\6\11\0\23\6"+
    "\1\0\1\241\1\6\1\0\2\6\1\0\17\6\25\0"+
    "\2\6\11\0\23\6\1\0\2\6\1\0\2\6\1\0"+
    "\4\6\1\242\12\6\25\0\2\6\11\0\23\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\1\243\10\6\25\0"+
    "\2\6\11\0\4\6\1\244\16\6\1\0\2\6\1\0"+
    "\2\6\1\0\17\6\25\0\2\6\11\0\23\6\1\0"+
    "\2\6\1\0\2\6\1\0\4\6\1\245\12\6\25\0"+
    "\2\6\11\0\11\6\1\246\11\6\1\0\2\6\1\0"+
    "\2\6\1\0\17\6\25\0\2\6\11\0\23\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\247\14\6\25\0"+
    "\2\6\11\0\4\6\1\250\10\6\1\251\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\11\6\1\252\5\6\25\0"+
    "\2\6\11\0\6\6\1\253\14\6\1\0\2\6\1\0"+
    "\2\6\1\0\17\6\25\0\2\6\11\0\23\6\1\0"+
    "\2\6\1\0\2\6\1\0\1\6\1\254\15\6\25\0"+
    "\2\6\11\0\23\6\1\0\2\6\1\0\2\6\1\0"+
    "\5\6\1\255\11\6\25\0\2\6\11\0\23\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\1\256\10\6\25\0"+
    "\2\6\11\0\6\6\1\257\14\6\1\0\2\6\1\0"+
    "\2\6\1\0\17\6\25\0\2\6\11\0\23\6\1\0"+
    "\1\260\1\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\23\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\261\14\6\25\0\2\6\11\0\13\6\1\262\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\23\6\1\0\2\6\1\0\2\6\1\0\1\263"+
    "\3\6\1\264\12\6\25\0\2\6\11\0\23\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\1\265\10\6\25\0"+
    "\2\6\11\0\21\6\1\266\1\6\1\0\2\6\1\0"+
    "\2\6\1\0\17\6\25\0\2\6\11\0\4\6\1\267"+
    "\16\6\1\0\2\6\1\0\2\6\1\0\17\6\25\0"+
    "\2\6\11\0\23\6\1\0\2\6\1\0\2\6\1\0"+
    "\14\6\1\270\2\6\25\0\2\6\11\0\2\6\1\271"+
    "\12\6\1\272\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\6\6\1\273\10\6\25\0\2\6\11\0\23\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\1\274\10\6\25\0"+
    "\2\6\11\0\23\6\1\0\2\6\1\0\2\6\1\0"+
    "\6\6\1\275\10\6\25\0\2\6\11\0\23\6\1\0"+
    "\2\6\1\0\2\6\1\0\13\6\1\276\3\6\25\0"+
    "\2\6\11\0\23\6\1\0\1\277\1\6\1\0\2\6"+
    "\1\0\17\6\25\0\2\6\11\0\23\6\1\0\1\300"+
    "\1\6\1\0\2\6\1\0\17\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\10\6\1\301"+
    "\6\6\25\0\2\6\11\0\2\6\1\302\20\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\15\6\1\303"+
    "\1\6\25\0\2\6\11\0\2\6\1\304\20\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\305\14\6\25\0"+
    "\2\6\11\0\23\6\1\0\2\6\1\0\2\6\1\0"+
    "\4\6\1\306\12\6\25\0\2\6\11\0\6\6\1\307"+
    "\14\6\1\0\2\6\1\0\2\6\1\0\17\6\25\0"+
    "\2\6\11\0\23\6\1\0\2\6\1\0\1\310\1\6"+
    "\1\0\17\6\25\0\2\6\11\0\23\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\311\16\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\2\6\1\312"+
    "\14\6\25\0\2\6\11\0\4\6\1\313\16\6\1\0"+
    "\2\6\1\0\2\6\1\0\1\314\16\6\25\0\2\6"+
    "\11\0\2\6\1\315\20\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\25\0\2\6\11\0\23\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\316\15\6\25\0\2\6"+
    "\11\0\2\6\1\317\20\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\25\0\2\6\11\0\23\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\320\16\6\64\0\1\321\117\0"+
    "\1\322\72\0\1\323\117\0\1\324\51\0\1\220\13\0"+
    "\1\220\6\0\1\220\4\0\2\76\2\77\2\100\52\0"+
    "\5\221\1\0\5\221\1\0\75\221\5\222\1\0\5\222"+
    "\1\0\75\222\6\223\1\325\102\223\5\111\1\0\5\111"+
    "\1\0\75\111\1\0\2\6\11\0\23\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\1\326\10\6\25\0\2\6"+
    "\11\0\23\6\1\0\2\6\1\0\2\6\1\0\3\6"+
    "\1\327\13\6\25\0\2\6\11\0\23\6\1\0\2\6"+
    "\1\0\2\6\1\0\16\6\1\330\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\1\6\1\331"+
    "\15\6\25\0\2\6\11\0\23\6\1\0\2\6\1\0"+
    "\2\6\1\0\6\6\1\332\10\6\25\0\2\6\11\0"+
    "\2\6\1\333\20\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\25\0\2\6\11\0\23\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\334\15\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\4\6\1\335"+
    "\12\6\25\0\1\236\13\0\3\236\2\74\2\75\1\236"+
    "\2\0\6\236\2\0\1\336\2\236\1\0\2\102\12\0"+
    "\1\236\32\0\1\336\13\0\3\336\4\0\1\336\2\0"+
    "\6\336\3\0\2\336\15\0\1\336\32\0\2\6\11\0"+
    "\23\6\1\0\1\337\1\6\1\0\2\6\1\0\17\6"+
    "\25\0\2\6\11\0\2\6\1\340\20\6\1\0\2\6"+
    "\1\0\2\6\1\0\17\6\25\0\2\6\11\0\4\6"+
    "\1\341\16\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\25\0\2\6\11\0\23\6\1\0\1\342\1\6\1\0"+
    "\2\6\1\0\17\6\25\0\2\6\11\0\23\6\1\0"+
    "\2\6\1\0\2\6\1\0\5\6\1\307\11\6\25\0"+
    "\2\6\11\0\2\6\1\343\20\6\1\0\2\6\1\0"+
    "\2\6\1\0\17\6\25\0\2\6\11\0\23\6\1\0"+
    "\1\344\1\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\23\6\1\0\1\345\1\6\1\0\2\6\1\0"+
    "\17\6\25\0\2\6\11\0\23\6\1\0\1\346\1\6"+
    "\1\0\2\6\1\0\17\6\25\0\2\6\11\0\2\6"+
    "\1\347\20\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\25\0\2\6\11\0\23\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\350\16\6\25\0\2\6\11\0\13\6\1\351"+
    "\7\6\1\0\2\6\1\0\2\6\1\0\17\6\25\0"+
    "\2\6\11\0\2\6\1\352\20\6\1\0\2\6\1\0"+
    "\2\6\1\0\17\6\25\0\2\6\11\0\23\6\1\0"+
    "\1\353\1\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\23\6\1\0\1\354\1\6\1\0\2\6\1\0"+
    "\17\6\25\0\2\6\11\0\21\6\1\355\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\1\6\1\356"+
    "\15\6\25\0\2\6\11\0\2\6\1\357\20\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\25\0\2\6\11\0"+
    "\4\6\1\360\16\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\25\0\2\6\11\0\23\6\1\0\2\6\1\0"+
    "\2\6\1\0\7\6\1\361\7\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\6\6\1\362"+
    "\10\6\25\0\2\6\11\0\23\6\1\0\1\363\1\6"+
    "\1\0\2\6\1\0\17\6\25\0\2\6\11\0\23\6"+
    "\1\0\1\364\1\6\1\0\2\6\1\0\17\6\25\0"+
    "\2\6\11\0\4\6\1\365\16\6\1\0\2\6\1\0"+
    "\2\6\1\0\17\6\25\0\2\6\11\0\17\6\1\366"+
    "\3\6\1\0\2\6\1\0\2\6\1\0\17\6\25\0"+
    "\2\6\11\0\6\6\1\367\14\6\1\0\2\6\1\0"+
    "\2\6\1\0\17\6\25\0\2\6\11\0\23\6\1\0"+
    "\2\6\1\0\2\6\1\0\4\6\1\370\12\6\25\0"+
    "\2\6\11\0\23\6\1\0\1\371\1\6\1\0\2\6"+
    "\1\0\17\6\25\0\2\6\11\0\23\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\372\14\6\25\0\2\6"+
    "\11\0\23\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\373\14\6\25\0\2\6\11\0\23\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\1\374\10\6\25\0\2\6"+
    "\11\0\4\6\1\375\16\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\25\0\2\6\11\0\23\6\1\0\1\376"+
    "\1\6\1\0\2\6\1\0\17\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\6\6\1\377"+
    "\10\6\25\0\2\6\11\0\6\6\1\u0100\14\6\1\0"+
    "\2\6\1\0\2\6\1\0\1\u0101\16\6\25\0\2\6"+
    "\11\0\23\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\u0102\14\6\25\0\2\6\11\0\23\6\1\0\1\u0103"+
    "\1\6\1\0\2\6\1\0\17\6\25\0\2\6\11\0"+
    "\23\6\1\0\1\u0104\1\6\1\0\2\6\1\0\17\6"+
    "\25\0\2\6\11\0\23\6\1\0\2\6\1\0\2\6"+
    "\1\0\5\6\1\u0105\11\6\25\0\2\6\11\0\23\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\1\u0106\10\6"+
    "\25\0\2\6\11\0\2\6\1\u0107\20\6\1\0\2\6"+
    "\1\0\2\6\1\0\17\6\25\0\2\6\11\0\17\6"+
    "\1\u0108\3\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\25\0\2\6\11\0\23\6\1\0\2\6\1\0\2\6"+
    "\1\0\5\6\1\u0109\11\6\25\0\2\6\11\0\23\6"+
    "\1\0\2\6\1\0\2\6\1\0\5\6\1\u010a\1\u010b"+
    "\10\6\25\0\2\6\11\0\23\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\u010c\14\6\25\0\2\6\11\0"+
    "\4\6\1\u010d\16\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\55\0\1\u010e\112\0\1\u010f\126\0\1\u0110\37\0"+
    "\4\223\1\u0111\1\223\1\325\102\223\1\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\2\6\1\u0112"+
    "\14\6\25\0\2\6\11\0\23\6\1\0\2\6\1\0"+
    "\2\6\1\0\3\6\1\u0113\13\6\25\0\2\6\11\0"+
    "\15\6\1\u0114\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\25\0\2\6\11\0\23\6\1\0\2\6\1\0"+
    "\2\6\1\0\3\6\1\u0115\13\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\2\6\1\u0116"+
    "\14\6\25\0\1\336\13\0\3\336\4\0\1\336\2\0"+
    "\6\336\3\0\2\336\1\0\2\102\12\0\1\336\32\0"+
    "\2\6\11\0\23\6\1\0\2\6\1\0\2\6\1\0"+
    "\16\6\1\u0117\25\0\2\6\11\0\23\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\1\u0118\10\6\25\0\2\6"+
    "\11\0\17\6\1\u0119\3\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\25\0\2\6\11\0\2\6\1\u011a\20\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\23\6\1\0\2\6\1\0\2\6\1\0\3\6"+
    "\1\u011b\13\6\25\0\2\6\11\0\6\6\1\u011c\14\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\21\6\1\u011d\1\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\25\0\2\6\11\0\4\6\1\u011e\16\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\21\6\1\u011f\1\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\25\0\2\6\11\0\23\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\u0120\14\6\25\0\2\6"+
    "\11\0\23\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\1\u0121\10\6\25\0\2\6\11\0\21\6\1\u0122\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\23\6\1\0\2\6\1\0\2\6\1\0\1\u0123"+
    "\16\6\25\0\2\6\11\0\2\6\1\u0124\20\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\25\0\2\6\11\0"+
    "\23\6\1\0\1\u0125\1\6\1\0\2\6\1\0\17\6"+
    "\25\0\2\6\11\0\23\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\u0126\14\6\25\0\2\6\11\0\23\6"+
    "\1\0\2\6\1\0\2\6\1\0\5\6\1\u0127\11\6"+
    "\25\0\2\6\11\0\23\6\1\0\2\6\1\0\2\6"+
    "\1\0\4\6\1\u0128\12\6\25\0\2\6\11\0\23\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\1\u0129\14\6"+
    "\25\0\2\6\11\0\23\6\1\0\2\6\1\0\2\6"+
    "\1\0\11\6\1\u012a\5\6\25\0\2\6\11\0\2\6"+
    "\1\u012b\20\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\25\0\2\6\11\0\23\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\u012c\14\6\25\0\2\6\11\0\23\6"+
    "\1\0\1\u012d\1\6\1\0\2\6\1\0\17\6\25\0"+
    "\2\6\11\0\23\6\1\0\1\u012e\1\6\1\0\2\6"+
    "\1\0\17\6\25\0\2\6\11\0\23\6\1\0\2\6"+
    "\1\0\2\6\1\0\4\6\1\u012f\12\6\25\0\2\6"+
    "\11\0\23\6\1\0\2\6\1\0\2\6\1\0\1\u0130"+
    "\16\6\25\0\2\6\11\0\23\6\1\0\2\6\1\0"+
    "\2\6\1\0\11\6\1\u0131\5\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\1\6\1\u0132"+
    "\15\6\25\0\2\6\11\0\23\6\1\0\2\6\1\0"+
    "\2\6\1\0\6\6\1\u0133\10\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\4\6\1\u0134"+
    "\12\6\25\0\2\6\11\0\6\6\1\u0135\14\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\6\6\1\u0136"+
    "\10\6\25\0\2\6\11\0\23\6\1\0\2\6\1\0"+
    "\2\6\1\0\5\6\1\u0137\11\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\6\6\1\u0138"+
    "\10\6\25\0\2\6\11\0\23\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\u0139\16\6\25\0\2\6\11\0\23\6"+
    "\1\0\1\u013a\1\6\1\0\2\6\1\0\17\6\72\0"+
    "\1\u013b\110\0\1\u013c\1\0\1\u013d\106\0\1\u013e\43\0"+
    "\2\6\11\0\2\6\1\u013f\20\6\1\0\2\6\1\0"+
    "\2\6\1\0\17\6\25\0\2\6\11\0\23\6\1\0"+
    "\1\u0140\1\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\23\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\1\u0141\10\6\25\0\2\6\11\0\23\6\1\0\2\6"+
    "\1\0\2\6\1\0\11\6\1\u0142\5\6\25\0\2\6"+
    "\11\0\2\6\1\u0143\20\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\25\0\2\6\11\0\4\6\1\u0144\16\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\2\6\1\u0145\20\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\25\0\2\6\11\0\23\6\1\0\1\u0146"+
    "\1\6\1\0\2\6\1\0\17\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\1\u0147\16\6"+
    "\25\0\2\6\11\0\23\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\u0148\15\6\25\0\2\6\11\0\23\6"+
    "\1\0\2\6\1\0\2\6\1\0\5\6\1\u0149\11\6"+
    "\25\0\2\6\11\0\23\6\1\0\2\6\1\0\2\6"+
    "\1\0\11\6\1\u014a\5\6\25\0\2\6\11\0\23\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\1\u014b\10\6"+
    "\25\0\2\6\11\0\23\6\1\0\2\6\1\0\2\6"+
    "\1\0\11\6\1\u014c\5\6\25\0\2\6\11\0\15\6"+
    "\1\u014d\5\6\1\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\u014e\15\6\25\0\2\6\11\0\23\6\1\0\2\6"+
    "\1\0\1\u014f\1\6\1\0\17\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\1\6\1\u0150"+
    "\15\6\25\0\2\6\11\0\23\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\u0151\15\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\6\6\1\u0152"+
    "\10\6\25\0\2\6\11\0\23\6\1\0\2\6\1\0"+
    "\2\6\1\0\6\6\1\u0153\10\6\25\0\2\6\11\0"+
    "\23\6\1\0\2\6\1\0\2\6\1\0\1\u0154\16\6"+
    "\25\0\2\6\11\0\17\6\1\u0155\3\6\1\0\2\6"+
    "\1\0\2\6\1\0\17\6\25\0\2\6\11\0\15\6"+
    "\1\u0156\5\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\25\0\2\6\11\0\23\6\1\0\2\6\1\0\2\6"+
    "\1\0\11\6\1\u0157\5\6\25\0\2\6\11\0\23\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\1\u0158\10\6"+
    "\25\0\2\6\11\0\23\6\1\0\2\6\1\0\2\6"+
    "\1\0\3\6\1\u0159\13\6\25\0\2\6\11\0\15\6"+
    "\1\u015a\5\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\25\0\2\6\11\0\2\6\1\u015b\20\6\1\0\2\6"+
    "\1\0\2\6\1\0\17\6\25\0\2\6\11\0\23\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\u015c\16\6\25\0"+
    "\2\6\11\0\23\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\6\1\u015d\15\6\73\0\1\u015e\72\0\1\u015f\117\0"+
    "\1\u0160\122\0\1\u0161\37\0\2\6\11\0\23\6\1\0"+
    "\2\6\1\0\2\6\1\0\11\6\1\u0162\5\6\25\0"+
    "\2\6\11\0\23\6\1\0\2\6\1\0\2\6\1\0"+
    "\12\6\1\u0163\4\6\25\0\2\6\11\0\23\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\1\u0164\10\6\25\0"+
    "\2\6\11\0\23\6\1\0\2\6\1\0\2\6\1\0"+
    "\6\6\1\u0165\10\6\25\0\2\6\11\0\4\6\1\u0166"+
    "\16\6\1\0\2\6\1\0\2\6\1\0\17\6\25\0"+
    "\2\6\11\0\23\6\1\0\2\6\1\0\2\6\1\0"+
    "\11\6\1\u0167\5\6\25\0\2\6\11\0\23\6\1\0"+
    "\1\u0168\1\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\23\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\1\u0169\10\6\25\0\2\6\11\0\2\6\1\u016a\20\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\2\6\1\u016b\20\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\25\0\2\6\11\0\2\6\1\u016c\20\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\4\6\1\u016d\16\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\25\0\2\6\11\0\23\6\1\0\2\6"+
    "\1\0\2\6\1\0\4\6\1\u016e\12\6\25\0\2\6"+
    "\11\0\17\6\1\u016f\3\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\25\0\2\6\11\0\4\6\1\u0170\16\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\4\6\1\u0171\16\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\25\0\2\6\11\0\6\6\1\u0172\14\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\64\0\1\u0173"+
    "\121\0\1\u0174\106\0\1\u0175\42\0\2\6\11\0\23\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\1\u0176\10\6"+
    "\25\0\2\6\11\0\23\6\1\0\1\u0177\1\6\1\0"+
    "\2\6\1\0\17\6\25\0\2\6\11\0\23\6\1\0"+
    "\1\u0178\1\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\23\6\1\0\2\6\1\0\2\6\1\0\11\6"+
    "\1\u0179\5\6\25\0\2\6\11\0\4\6\1\u017a\16\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\25\0\2\6"+
    "\11\0\23\6\1\0\2\6\1\0\2\6\1\0\11\6"+
    "\1\u017b\5\6\25\0\2\6\11\0\23\6\1\0\2\6"+
    "\1\0\2\6\1\0\10\6\1\u017c\6\6\25\0\2\6"+
    "\11\0\23\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\u017d\14\6\25\0\2\6\11\0\23\6\1\0\1\u017e"+
    "\1\6\1\0\2\6\1\0\17\6\25\0\2\6\11\0"+
    "\23\6\1\0\1\u017f\1\6\1\0\2\6\1\0\17\6"+
    "\25\0\2\6\11\0\23\6\1\0\1\u0180\1\6\1\0"+
    "\2\6\1\0\17\6\72\0\1\u0181\43\0\2\6\11\0"+
    "\17\6\1\u0182\3\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\25\0\2\6\11\0\23\6\1\0\1\u0183\1\6"+
    "\1\0\2\6\1\0\17\6\25\0\2\6\11\0\23\6"+
    "\1\0\1\u0184\1\6\1\0\2\6\1\0\17\6\76\0"+
    "\1\u0185\105\0\1\u0186\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21097];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\16\1\1\11\12\1\6\11"+
    "\4\1\1\11\1\1\1\11\2\1\1\11\1\1\2\11"+
    "\3\1\1\11\4\1\3\11\4\1\1\11\2\1\1\11"+
    "\31\1\1\11\35\1\12\11\5\0\1\11\5\1\1\11"+
    "\11\1\1\0\61\1\2\0\1\11\2\0\10\1\1\0"+
    "\57\1\3\0\1\11\51\1\4\0\37\1\1\0\1\11"+
    "\2\0\21\1\1\11\1\0\1\11\13\1\1\0\3\1"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _CSharpLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CSharpLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1790) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 112: 
          { return CSharpTokens.ABSTRACT_KEYWORD;
          }
        case 124: break;
        case 66: 
          { return CSharpTokens.UINT_KEYWORD;
          }
        case 125: break;
        case 8: 
          { return CSharpTokens.STRING_LITERAL;
          }
        case 126: break;
        case 16: 
          { return CSharpTokens.LPAR;
          }
        case 127: break;
        case 38: 
          { return CSharpTokens.DECIMAL_LITERAL;
          }
        case 128: break;
        case 1: 
          { return CSharpTokens.BAD_CHARACTER;
          }
        case 129: break;
        case 44: 
          { return CSharpTokens.IF_KEYWORD;
          }
        case 130: break;
        case 105: 
          { return CSharpTokens.DEFAULT_KEYWORD;
          }
        case 131: break;
        case 25: 
          { return CSharpTokens.AND;
          }
        case 132: break;
        case 54: 
          { return CSharpTokens.OROR;
          }
        case 133: break;
        case 114: 
          { return CSharpTokens.INTERNAL_KEYWORD;
          }
        case 134: break;
        case 110: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_DEFINE_KEYWORD;
          }
        case 135: break;
        case 50: 
          { return CSharpTokens.GTEQ;
          }
        case 136: break;
        case 80: 
          { return CSharpTokens.BREAK_KEYWORD;
          }
        case 137: break;
        case 39: 
          { return CSharpTokens.LINE_COMMENT;
          }
        case 138: break;
        case 117: 
          { return CSharpTokens.OVERRIDE_KEYWORD;
          }
        case 139: break;
        case 83: 
          { return CSharpTokens.EVENT_KEYWORD;
          }
        case 140: break;
        case 47: 
          { return CSharpTokens.LTEQ;
          }
        case 141: break;
        case 103: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_ENDIF_KEYWORD;
          }
        case 142: break;
        case 81: 
          { return CSharpTokens.FLOAT_KEYWORD;
          }
        case 143: break;
        case 79: 
          { return CSharpTokens.USING_KEYWORD;
          }
        case 144: break;
        case 77: 
          { return CSharpTokens.CHAR_KEYWORD;
          }
        case 145: break;
        case 21: 
          { return CSharpTokens.COLON;
          }
        case 146: break;
        case 108: 
          { return CSharpTokens.PRIVATE_KEYWORD;
          }
        case 147: break;
        case 82: 
          { return CSharpTokens.FIXED_KEYWORD;
          }
        case 148: break;
        case 90: 
          { return CSharpTokens.USHORT_KEYWORD;
          }
        case 149: break;
        case 70: 
          { return CSharpTokens.ELSE_KEYWORD;
          }
        case 150: break;
        case 93: 
          { return CSharpTokens.PARAMS_KEYWORD;
          }
        case 151: break;
        case 51: 
          { return CSharpTokens.COLONCOLON;
          }
        case 152: break;
        case 109: 
          { return CSharpTokens.VIRTUAL_KEYWORD;
          }
        case 153: break;
        case 3: 
          { return CSharpTokens.IDENTIFIER;
          }
        case 154: break;
        case 18: 
          { return CSharpTokens.LT;
          }
        case 155: break;
        case 101: 
          { return CSharpTokens.STRING_KEYWORD;
          }
        case 156: break;
        case 4: 
          { return CSharpTokens.WHITE_SPACE;
          }
        case 157: break;
        case 45: 
          { return CSharpTokens.IN_KEYWORD;
          }
        case 158: break;
        case 91: 
          { return CSharpTokens.DOUBLE_KEYWORD;
          }
        case 159: break;
        case 67: 
          { return CSharpTokens.BASE_KEYWORD;
          }
        case 160: break;
        case 7: 
          { return CSharpTokens.CHARACTER_LITERAL;
          }
        case 161: break;
        case 29: 
          { return CSharpTokens.XOR;
          }
        case 162: break;
        case 57: 
          { return CSharpTokens.ULONG_LITERAL;
          }
        case 163: break;
        case 23: 
          { return CSharpTokens.PLUS;
          }
        case 164: break;
        case 5: 
          { return CSharpTokens.DIV;
          }
        case 165: break;
        case 30: 
          { return CSharpTokens.COMMA;
          }
        case 166: break;
        case 113: 
          { return CSharpTokens.DELEGATE_KEYWORD;
          }
        case 167: break;
        case 48: 
          { return CSharpTokens.EQEQ;
          }
        case 168: break;
        case 88: 
          { return CSharpTokens.WHILE_KEYWORD;
          }
        case 169: break;
        case 69: 
          { return CSharpTokens.BYTE_KEYWORD;
          }
        case 170: break;
        case 76: 
          { return CSharpTokens.VOID_KEYWORD;
          }
        case 171: break;
        case 106: 
          { return CSharpTokens.DECIMAL_KEYWORD;
          }
        case 172: break;
        case 59: 
          { return CSharpTokens.INT_KEYWORD;
          }
        case 173: break;
        case 13: 
          { return CSharpTokens.RBRACE;
          }
        case 174: break;
        case 12: 
          { return CSharpTokens.LBRACE;
          }
        case 175: break;
        case 20: 
          { return CSharpTokens.GT;
          }
        case 176: break;
        case 95: 
          { return CSharpTokens.RETURN_KEYWORD;
          }
        case 177: break;
        case 28: 
          { return CSharpTokens.EXCL;
          }
        case 178: break;
        case 74: 
          { return CSharpTokens.BOOL_LITERAL;
          }
        case 179: break;
        case 73: 
          { return CSharpTokens.GOTO_KEYWORD;
          }
        case 180: break;
        case 97: 
          { return CSharpTokens.SEALED_KEYWORD;
          }
        case 181: break;
        case 2: 
          { return CSharpTokens.INTEGER_LITERAL;
          }
        case 182: break;
        case 9: 
          { return CSharpTokens.DOT;
          }
        case 183: break;
        case 98: 
          { return CSharpTokens.SIZEOF_KEYWORD;
          }
        case 184: break;
        case 26: 
          { return CSharpTokens.OR;
          }
        case 185: break;
        case 119: 
          { return CSharpTokens.CONTINUE_KEYWORD;
          }
        case 186: break;
        case 61: 
          { return CSharpTokens.REF_KEYWORD;
          }
        case 187: break;
        case 41: 
          { return CSharpTokens.VERBATIM_STRING_LITERAL;
          }
        case 188: break;
        case 92: 
          { return CSharpTokens.EXTERN_KEYWORD;
          }
        case 189: break;
        case 34: 
          { return CSharpTokens.LONG_LITERAL;
          }
        case 190: break;
        case 62: 
          { return CSharpTokens.OUT_KEYWORD;
          }
        case 191: break;
        case 115: 
          { return CSharpTokens.READONLY_KEYWORD;
          }
        case 192: break;
        case 11: 
          { yypushback(1);
		yybegin(MACRO);
          }
        case 193: break;
        case 60: 
          { return CSharpTokens.NEW_KEYWORD;
          }
        case 194: break;
        case 22: 
          { return CSharpTokens.SEMICOLON;
          }
        case 195: break;
        case 32: 
          { yybegin(YYINITIAL); return CSharpTokens.MACRO_STOP;
          }
        case 196: break;
        case 84: 
          { return CSharpTokens.SBYTE_KEYWORD;
          }
        case 197: break;
        case 40: 
          { return CSharpTokens.BLOCK_COMMENT;
          }
        case 198: break;
        case 104: 
          { return CSharpTokens.FOREACH_KEYWORD;
          }
        case 199: break;
        case 94: 
          { return CSharpTokens.PUBLIC_KEYWORD;
          }
        case 200: break;
        case 100: 
          { return CSharpTokens.STRUCT_KEYWORD;
          }
        case 201: break;
        case 89: 
          { return CSharpTokens.UNSAFE_KEYWORD;
          }
        case 202: break;
        case 43: 
          { return CSharpTokens.MINUSMINUS;
          }
        case 203: break;
        case 33: 
          { return CSharpTokens.MACRO_VALUE;
          }
        case 204: break;
        case 35: 
          { return CSharpTokens.UINTEGER_LITERAL;
          }
        case 205: break;
        case 71: 
          { return CSharpTokens.ENUM_KEYWORD;
          }
        case 206: break;
        case 120: 
          { return CSharpTokens.PROTECTED_KEYWORD;
          }
        case 207: break;
        case 65: 
          { return CSharpTokens.LOCK_KEYWORD;
          }
        case 208: break;
        case 72: 
          { return CSharpTokens.NULL_LITERAL;
          }
        case 209: break;
        case 15: 
          { return CSharpTokens.RBRACKET;
          }
        case 210: break;
        case 87: 
          { return CSharpTokens.CONST_KEYWORD;
          }
        case 211: break;
        case 96: 
          { return CSharpTokens.OBJECT_KEYWORD;
          }
        case 212: break;
        case 107: 
          { return CSharpTokens.DYNAMIC_KEYWORD;
          }
        case 213: break;
        case 68: 
          { return CSharpTokens.BOOL_KEYWORD;
          }
        case 214: break;
        case 123: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_ENDREGION_KEYWORD;
          }
        case 215: break;
        case 78: 
          { return CSharpTokens.ULONG_KEYWORD;
          }
        case 216: break;
        case 122: 
          { return CSharpTokens.NAMESPACE_KEYWORD;
          }
        case 217: break;
        case 36: 
          { return CSharpTokens.FLOAT_LITERAL;
          }
        case 218: break;
        case 55: 
          { return CSharpTokens.NTEQ;
          }
        case 219: break;
        case 118: 
          { return CSharpTokens.VOLATILE_KEYWORD;
          }
        case 220: break;
        case 53: 
          { return CSharpTokens.ANDAND;
          }
        case 221: break;
        case 27: 
          { return CSharpTokens.TILDE;
          }
        case 222: break;
        case 111: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_REGION_KEYWORD;
          }
        case 223: break;
        case 42: 
          { return CSharpTokens.AS_KEYWORD;
          }
        case 224: break;
        case 64: 
          { return CSharpTokens.LONG_KEYWORD;
          }
        case 225: break;
        case 63: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_IF_KEYWORD;
          }
        case 226: break;
        case 85: 
          { return CSharpTokens.SHORT_KEYWORD;
          }
        case 227: break;
        case 6: 
          { return CSharpTokens.MUL;
          }
        case 228: break;
        case 99: 
          { return CSharpTokens.STATIC_KEYWORD;
          }
        case 229: break;
        case 24: 
          { return CSharpTokens.PERC;
          }
        case 230: break;
        case 121: 
          { return CSharpTokens.INTERFACE_KEYWORD;
          }
        case 231: break;
        case 17: 
          { return CSharpTokens.RPAR;
          }
        case 232: break;
        case 46: 
          { return CSharpTokens.IS_KEYWORD;
          }
        case 233: break;
        case 75: 
          { return CSharpTokens.THIS_KEYWORD;
          }
        case 234: break;
        case 14: 
          { return CSharpTokens.LBRACKET;
          }
        case 235: break;
        case 58: 
          { return CSharpTokens.LINE_DOC_COMMENT;
          }
        case 236: break;
        case 56: 
          { return CSharpTokens.NULL_COALESCING;
          }
        case 237: break;
        case 86: 
          { return CSharpTokens.CLASS_KEYWORD;
          }
        case 238: break;
        case 37: 
          { return CSharpTokens.DOUBLE_LITERAL;
          }
        case 239: break;
        case 49: 
          { return CSharpTokens.DARROW;
          }
        case 240: break;
        case 10: 
          { return CSharpTokens.MINUS;
          }
        case 241: break;
        case 116: 
          { return CSharpTokens.OPERATOR_KEYWORD;
          }
        case 242: break;
        case 102: 
          { return CSharpTokens.TYPEOF_KEYWORD;
          }
        case 243: break;
        case 52: 
          { return CSharpTokens.PLUSPLUS;
          }
        case 244: break;
        case 31: 
          { return CSharpTokens.QUEST;
          }
        case 245: break;
        case 19: 
          { return CSharpTokens.EQ;
          }
        case 246: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
