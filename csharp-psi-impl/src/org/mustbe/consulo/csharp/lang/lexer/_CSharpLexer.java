/* The following code was generated by JFlex 1.4.3 on 30.12.13 12:57 */

package org.mustbe.consulo.csharp.lang.lexer;

import java.util.*;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.mustbe.consulo.csharp.lang.psi.CSharpTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30.12.13 12:57 from the specification file
 * <tt>_CSharpLexer.flex</tt>
 */
class _CSharpLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MACRO = 2;
  public static final int MACRO_ENTERED = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\14\1\3\1\13\1\0\1\3\1\5\16\14\4\0\1\3\1\102"+
    "\1\11\1\41\1\2\1\76\1\77\1\7\1\66\1\67\1\6\1\75"+
    "\1\104\1\36\1\33\1\4\1\22\11\1\1\73\1\74\1\70\1\71"+
    "\1\72\1\105\1\12\1\17\1\26\1\17\1\32\1\35\1\30\5\2"+
    "\1\21\3\2\1\40\7\2\1\24\2\2\1\64\1\10\1\65\1\103"+
    "\1\15\1\0\1\16\1\25\1\54\1\31\1\34\1\27\1\45\1\55"+
    "\1\42\1\57\1\61\1\20\1\56\1\43\1\46\1\37\1\2\1\44"+
    "\1\50\1\51\1\47\1\52\1\60\1\23\1\53\1\2\1\62\1\100"+
    "\1\63\1\101\41\14\2\0\4\2\4\0\1\2\2\0\1\14\7\0"+
    "\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u013f\2\31\0"+
    "\162\2\4\0\14\2\16\0\5\2\11\0\1\2\21\0\130\14\5\0"+
    "\23\14\12\0\1\2\13\0\1\2\1\0\3\2\1\0\1\2\1\0"+
    "\24\2\1\0\54\2\1\0\46\2\1\0\5\2\4\0\202\2\1\0"+
    "\4\14\3\0\105\2\1\0\46\2\2\0\2\2\6\0\20\2\41\0"+
    "\46\2\2\0\1\2\7\0\47\2\11\0\21\14\1\0\27\14\1\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\1\14\13\0\33\2\5\0"+
    "\3\2\15\0\4\14\14\0\6\14\13\0\32\2\5\0\13\2\16\14"+
    "\7\0\12\14\4\0\2\2\1\14\143\2\1\0\1\2\10\14\1\0"+
    "\6\14\2\2\2\14\1\0\4\14\2\2\12\14\3\2\2\0\1\2"+
    "\17\0\1\14\1\2\1\14\36\2\33\14\2\0\3\2\60\0\46\2"+
    "\13\14\1\2\u014f\0\3\14\66\2\2\0\1\14\1\2\20\14\2\0"+
    "\1\2\4\14\3\0\12\2\2\14\2\0\12\14\21\0\3\14\1\0"+
    "\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0"+
    "\4\2\2\0\1\14\1\2\7\14\2\0\2\14\2\0\3\14\11\0"+
    "\1\14\4\0\2\2\1\0\3\2\2\14\2\0\12\14\4\2\15\0"+
    "\3\14\1\0\6\2\4\0\2\2\2\0\26\2\1\0\7\2\1\0"+
    "\2\2\1\0\2\2\1\0\2\2\2\0\1\14\1\0\5\14\4\0"+
    "\2\14\2\0\3\14\13\0\4\2\1\0\1\2\7\0\14\14\3\2"+
    "\14\0\3\14\1\0\11\2\1\0\3\2\1\0\26\2\1\0\7\2"+
    "\1\0\2\2\1\0\5\2\2\0\1\14\1\2\10\14\1\0\3\14"+
    "\1\0\3\14\2\0\1\2\17\0\2\2\2\14\2\0\12\14\1\0"+
    "\1\2\17\0\3\14\1\0\10\2\2\0\2\2\2\0\26\2\1\0"+
    "\7\2\1\0\2\2\1\0\5\2\2\0\1\14\1\2\6\14\3\0"+
    "\2\14\2\0\3\14\10\0\2\14\4\0\2\2\1\0\3\2\4\0"+
    "\12\14\1\0\1\2\20\0\1\14\1\2\1\0\6\2\3\0\3\2"+
    "\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3\0\2\2"+
    "\3\0\3\2\3\0\10\2\1\0\3\2\4\0\5\14\3\0\3\14"+
    "\1\0\4\14\11\0\1\14\17\0\11\14\11\0\1\2\7\0\3\14"+
    "\1\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2"+
    "\4\0\7\14\1\0\3\14\1\0\4\14\7\0\2\14\11\0\2\2"+
    "\4\0\12\14\22\0\2\14\1\0\10\2\1\0\3\2\1\0\27\2"+
    "\1\0\12\2\1\0\5\2\2\0\1\14\1\2\7\14\1\0\3\14"+
    "\1\0\4\14\7\0\2\14\7\0\1\2\1\0\2\2\4\0\12\14"+
    "\22\0\2\14\1\0\10\2\1\0\3\2\1\0\27\2\1\0\20\2"+
    "\4\0\6\14\2\0\3\14\1\0\4\14\11\0\1\14\10\0\2\2"+
    "\4\0\12\14\22\0\2\14\1\0\22\2\3\0\30\2\1\0\11\2"+
    "\1\0\1\2\2\0\7\2\3\0\1\14\4\0\6\14\1\0\1\14"+
    "\1\0\10\14\22\0\2\14\15\0\60\2\1\14\2\2\7\14\4\0"+
    "\10\2\10\14\1\0\12\14\47\0\2\2\1\0\1\2\2\0\2\2"+
    "\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2"+
    "\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\14\2\2"+
    "\6\14\1\0\2\14\1\2\2\0\5\2\1\0\1\2\1\0\6\14"+
    "\2\0\12\14\2\0\2\2\42\0\1\2\27\0\2\14\6\0\12\14"+
    "\13\0\1\14\1\0\1\14\1\0\1\14\4\0\2\14\10\2\1\0"+
    "\42\2\6\0\24\14\1\0\2\14\4\2\4\0\10\14\1\0\44\14"+
    "\11\0\1\14\71\0\42\2\1\0\5\2\1\0\2\2\1\0\7\14"+
    "\3\0\4\14\6\0\12\14\6\0\6\2\4\14\106\0\46\2\12\0"+
    "\51\2\7\0\132\2\5\0\104\2\5\0\122\2\6\0\7\2\1\0"+
    "\77\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0"+
    "\4\2\2\0\47\2\1\0\1\2\1\0\4\2\2\0\37\2\1\0"+
    "\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0"+
    "\7\2\1\0\7\2\1\0\27\2\1\0\37\2\1\0\1\2\1\0"+
    "\4\2\2\0\7\2\1\0\47\2\1\0\23\2\16\0\11\14\56\0"+
    "\125\2\14\0\u026c\2\2\0\10\2\12\0\32\2\5\0\113\2\3\0"+
    "\3\2\17\0\15\2\1\0\4\2\3\14\13\0\22\2\3\14\13\0"+
    "\22\2\2\14\14\0\15\2\1\0\3\2\1\0\2\14\14\0\64\2"+
    "\40\14\3\0\1\2\3\0\2\2\1\14\2\0\12\14\41\0\3\14"+
    "\2\0\12\14\6\0\130\2\10\0\51\2\1\14\126\0\35\2\3\0"+
    "\14\14\4\0\14\14\12\0\12\14\36\2\2\0\5\2\u038b\0\154\2"+
    "\224\0\234\2\4\0\132\2\6\0\26\2\2\0\6\2\2\0\46\2"+
    "\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2"+
    "\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2"+
    "\1\0\7\2\17\0\4\14\32\0\5\14\20\0\2\2\23\0\1\2"+
    "\13\0\4\14\6\0\6\14\1\0\1\2\15\0\1\2\40\0\22\2"+
    "\36\0\15\14\4\0\1\14\3\0\6\14\27\0\1\2\4\0\1\2"+
    "\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\4\2\1\0\3\2\1\0\7\2\3\0\3\2"+
    "\5\0\5\2\26\0\44\2\u0e81\0\3\2\31\0\11\2\6\14\1\0"+
    "\5\2\2\0\5\2\4\0\126\2\2\0\2\14\2\0\3\2\1\0"+
    "\137\2\5\0\50\2\4\0\136\2\21\0\30\2\70\0\20\2\u0200\0"+
    "\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2\2\0"+
    "\73\2\225\0\7\2\14\0\5\2\5\0\1\2\1\14\12\2\1\0"+
    "\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0"+
    "\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0\15\2\3\0"+
    "\20\14\20\0\4\14\17\0\2\2\30\0\3\2\31\0\1\2\6\0"+
    "\5\2\1\0\207\2\2\0\1\14\4\0\1\2\13\0\12\14\7\0"+
    "\32\2\4\0\1\2\1\0\32\2\12\0\132\2\3\0\6\2\2\0"+
    "\6\2\2\0\6\2\2\0\3\2\3\0\2\2\3\0\2\2\22\0"+
    "\3\14\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\2\3\1\2\3\3\1\11\1\3\1\12"+
    "\1\3\1\13\11\3\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\1\1\4"+
    "\2\37\1\1\1\40\1\41\1\42\3\43\1\44\1\45"+
    "\2\7\2\10\1\46\2\3\2\2\12\3\1\47\3\3"+
    "\1\50\27\3\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\5\0\1\43\1\44\1\60\1\45\2\46\3\3"+
    "\1\2\1\0\17\3\1\61\1\3\1\62\2\3\1\63"+
    "\3\3\1\64\23\3\2\0\1\65\2\0\1\3\1\66"+
    "\1\67\1\0\1\70\1\71\6\3\1\72\7\3\1\73"+
    "\6\3\1\74\11\3\1\75\3\3\1\76\2\3\1\77"+
    "\3\0\1\45\1\3\1\100\5\3\1\101\13\3\1\102"+
    "\1\3\1\103\1\3\1\104\4\3\1\105\3\3\1\106"+
    "\1\107\4\0\3\3\1\110\1\3\1\111\1\112\2\3"+
    "\1\113\4\3\1\114\1\115\2\3\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\2\3\1\0\1\125\2\0"+
    "\2\3\1\126\1\127\1\130\7\3\1\131\1\3\1\132"+
    "\1\0\1\133\1\134\1\135\2\3\1\136\1\3\1\137"+
    "\1\140\1\141\1\142\1\0\1\143\1\144\1\145\1\0"+
    "\1\146";

  private static int [] zzUnpackAction() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\322\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\322\0\u05be"+
    "\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee"+
    "\0\322\0\322\0\322\0\322\0\322\0\322\0\u0834\0\u087a"+
    "\0\u08c0\0\u0906\0\322\0\u094c\0\322\0\322\0\322\0\322"+
    "\0\u0992\0\322\0\322\0\u09d8\0\u0a1e\0\u0a64\0\322\0\u0aaa"+
    "\0\u0af0\0\322\0\322\0\322\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08"+
    "\0\322\0\u0c4e\0\u0c94\0\322\0\u0cda\0\u0d20\0\u0d66\0\u0dac"+
    "\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc"+
    "\0\u1022\0\u1068\0\u10ae\0\322\0\u10f4\0\u113a\0\u1180\0\u11c6"+
    "\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6"+
    "\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626"+
    "\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\322"+
    "\0\322\0\322\0\322\0\322\0\322\0\322\0\u0aaa\0\u1856"+
    "\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86"+
    "\0\322\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70"+
    "\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0"+
    "\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u015e"+
    "\0\u20d0\0\u2116\0\u015e\0\u215c\0\u21a2\0\u21e8\0\u015e\0\u222e"+
    "\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e"+
    "\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e"+
    "\0\u26d4\0\u271a\0\u2760\0\u27a6\0\322\0\u27ec\0\u2832\0\u2878"+
    "\0\u015e\0\u015e\0\u28be\0\u015e\0\u015e\0\u2904\0\u294a\0\u2990"+
    "\0\u29d6\0\u2a1c\0\u2a62\0\u015e\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a"+
    "\0\u2bc0\0\u2c06\0\u2c4c\0\u015e\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64"+
    "\0\u2daa\0\u2df0\0\u015e\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e"+
    "\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u015e\0\u30ac\0\u30f2\0\u3138"+
    "\0\u015e\0\u317e\0\u31c4\0\u015e\0\u320a\0\u3250\0\u3296\0\322"+
    "\0\u32dc\0\u015e\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u015e"+
    "\0\u3480\0\u34c6\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a"+
    "\0\u36b0\0\u36f6\0\u373c\0\u015e\0\u3782\0\u015e\0\u37c8\0\u015e"+
    "\0\u380e\0\u3854\0\u389a\0\u38e0\0\u015e\0\u3926\0\u396c\0\u39b2"+
    "\0\u015e\0\u015e\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56"+
    "\0\u3b9c\0\u015e\0\u3be2\0\u015e\0\u015e\0\u3c28\0\u3c6e\0\u015e"+
    "\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86\0\u015e\0\u015e\0\u3dcc\0\u3e12"+
    "\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u3e58"+
    "\0\u3e9e\0\u3ee4\0\322\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u015e"+
    "\0\u015e\0\u015e\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a\0\u41a0"+
    "\0\u41e6\0\u015e\0\u422c\0\322\0\u4272\0\322\0\u015e\0\u015e"+
    "\0\u42b8\0\u42fe\0\u015e\0\u4344\0\u015e\0\u015e\0\u015e\0\u015e"+
    "\0\u438a\0\u015e\0\u015e\0\u015e\0\u43d0\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\7\1\11\1\12"+
    "\1\4\1\13\1\14\1\7\1\4\1\6\1\15\1\6"+
    "\1\16\1\6\1\17\2\6\1\20\1\6\1\21\1\6"+
    "\1\22\1\6\1\23\1\24\1\6\1\25\1\26\1\6"+
    "\1\27\1\30\1\31\1\32\1\6\1\33\1\34\1\35"+
    "\1\36\1\37\1\6\1\40\5\6\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\3\4\1\65\1\4\1\66\5\4\1\67\25\4"+
    "\1\70\46\4\1\71\1\65\1\4\1\66\5\4\1\67"+
    "\1\4\5\71\1\4\10\71\1\4\2\71\1\4\2\71"+
    "\1\4\20\71\24\4\107\0\1\5\13\0\1\5\2\0"+
    "\2\72\1\5\4\0\2\73\2\74\1\75\2\76\51\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\20\6\27\0\1\7\1\0\1\7\5\0\1\7\76\0"+
    "\1\77\1\0\1\100\77\0\5\12\1\0\1\12\1\101"+
    "\1\102\2\12\1\0\72\12\5\13\1\0\2\13\1\103"+
    "\1\104\1\13\1\0\72\13\11\0\1\105\75\0\2\6"+
    "\11\0\11\6\1\106\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\20\6\25\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\4\6\1\107\13\6\25\0\1\5"+
    "\13\0\1\5\2\0\2\72\1\5\2\110\2\111\2\73"+
    "\2\74\1\75\2\76\51\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\4\6\1\112\4\6\1\113"+
    "\6\6\25\0\2\6\11\0\2\6\1\114\1\6\1\115"+
    "\12\6\1\0\2\6\1\0\2\6\1\0\20\6\25\0"+
    "\2\6\11\0\17\6\1\0\1\116\1\6\1\0\2\6"+
    "\1\0\4\6\1\117\4\6\1\120\6\6\25\0\1\75"+
    "\20\0\1\75\64\0\2\6\11\0\7\6\1\121\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\6\1\122\6\6"+
    "\1\123\7\6\62\0\1\124\50\0\2\6\11\0\2\6"+
    "\1\125\14\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\126\2\6\1\127\12\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\6\1\130\16\6"+
    "\25\0\2\6\11\0\2\6\1\131\14\6\1\0\1\132"+
    "\1\6\1\0\2\6\1\0\5\6\1\133\12\6\25\0"+
    "\2\6\11\0\17\6\1\0\1\134\1\6\1\0\2\6"+
    "\1\0\20\6\25\0\2\6\11\0\11\6\1\135\5\6"+
    "\1\0\2\6\1\0\1\136\1\6\1\0\5\6\1\137"+
    "\2\6\1\140\7\6\25\0\2\6\11\0\4\6\1\141"+
    "\12\6\1\0\2\6\1\0\2\6\1\0\1\142\1\143"+
    "\4\6\1\144\11\6\25\0\2\6\11\0\11\6\1\145"+
    "\5\6\1\0\1\146\1\6\1\0\2\6\1\0\7\6"+
    "\1\147\3\6\1\150\4\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\1\151\6\6"+
    "\1\152\6\6\25\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\153\3\6\1\154\13\6\25\0"+
    "\2\6\11\0\4\6\1\155\12\6\1\0\2\6\1\0"+
    "\2\6\1\0\4\6\1\156\6\6\1\157\4\6\115\0"+
    "\1\160\105\0\1\161\105\0\1\162\107\0\1\163\107\0"+
    "\1\164\101\0\1\165\121\0\1\166\3\0\1\65\115\0"+
    "\1\67\75\0\1\167\1\0\1\167\5\0\1\167\15\0"+
    "\1\170\2\0\1\171\5\0\1\172\1\0\1\173\42\0"+
    "\2\71\11\0\17\71\1\0\2\71\1\0\2\71\1\0"+
    "\20\71\25\0\1\75\13\0\1\75\4\0\1\75\4\0"+
    "\2\73\2\74\1\0\2\76\51\0\1\174\13\0\1\174"+
    "\4\0\1\174\4\0\2\73\2\74\3\0\1\174\36\0"+
    "\1\174\10\0\4\175\1\176\1\0\5\175\1\0\72\175"+
    "\6\177\1\0\77\177\5\12\1\0\5\12\1\0\72\12"+
    "\5\13\1\0\5\13\1\0\72\13\5\105\1\0\2\105"+
    "\1\200\1\201\74\105\1\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\1\202\11\6\25\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\6\1\203\10\6\1\204\5\6\25\0\1\205\13\0"+
    "\3\205\2\72\1\205\2\0\6\205\1\206\2\205\16\0"+
    "\1\205\32\0\1\111\13\0\1\111\2\0\2\72\1\111"+
    "\64\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\4\6\1\207\13\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\7\6\1\210\10\6"+
    "\25\0\2\6\11\0\4\6\1\211\12\6\1\0\2\6"+
    "\1\0\2\6\1\0\20\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\4\6\1\212\13\6"+
    "\25\0\2\6\11\0\4\6\1\213\12\6\1\0\2\6"+
    "\1\0\2\6\1\0\12\6\1\214\5\6\25\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\5\6"+
    "\1\215\12\6\25\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\216\16\6\25\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\7\6"+
    "\1\217\10\6\25\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\5\6\1\220\12\6\25\0\2\6"+
    "\11\0\17\6\1\0\1\221\1\6\1\0\2\6\1\0"+
    "\20\6\25\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\222\15\6\25\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\1\223\3\6"+
    "\1\224\13\6\25\0\2\6\11\0\11\6\1\225\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\20\6\25\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\7\6"+
    "\1\226\10\6\25\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\14\6\1\227\3\6\25\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\16\6"+
    "\1\230\1\6\25\0\2\6\11\0\4\6\1\231\12\6"+
    "\1\0\2\6\1\0\2\6\1\0\20\6\25\0\2\6"+
    "\11\0\2\6\1\232\10\6\1\233\3\6\1\0\2\6"+
    "\1\0\2\6\1\0\7\6\1\234\10\6\25\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\15\6"+
    "\1\235\2\6\25\0\2\6\11\0\17\6\1\0\1\236"+
    "\1\6\1\0\2\6\1\0\20\6\25\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\7\6\1\237"+
    "\10\6\25\0\2\6\11\0\17\6\1\0\1\240\1\6"+
    "\1\0\2\6\1\0\20\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\4\6\1\241\13\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\242\16\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\1\243\11\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\244\12\6\1\245\4\6\25\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\11\6\1\246"+
    "\6\6\25\0\2\6\11\0\2\6\1\247\14\6\1\0"+
    "\2\6\1\0\2\6\1\0\20\6\25\0\2\6\11\0"+
    "\2\6\1\250\14\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\1\251\15\6\25\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\4\6\1\252\13\6\25\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\5\6\1\253\12\6\25\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\1\254\1\6\1\0\20\6\25\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\255\15\6\25\0\2\6\11\0\4\6\1\256\12\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\257\17\6\25\0"+
    "\2\6\11\0\2\6\1\260\14\6\1\0\2\6\1\0"+
    "\2\6\1\0\20\6\25\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\1\6\1\261\16\6\25\0"+
    "\2\6\11\0\2\6\1\262\14\6\1\0\2\6\1\0"+
    "\2\6\1\0\20\6\60\0\1\263\114\0\1\264\71\0"+
    "\1\265\112\0\1\266\52\0\1\174\13\0\1\174\4\0"+
    "\1\174\4\0\2\73\2\74\53\0\5\175\1\0\5\175"+
    "\1\0\72\175\5\176\1\0\5\176\1\0\72\176\6\177"+
    "\1\267\77\177\5\105\1\0\5\105\1\0\72\105\1\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\7\6\1\270\10\6\25\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\3\6\1\271\14\6\25\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\1\272\25\0\1\205\13\0\3\205\2\72\1\205"+
    "\2\0\6\205\1\273\2\205\1\0\2\76\13\0\1\205"+
    "\32\0\1\273\13\0\3\273\2\0\1\273\2\0\6\273"+
    "\1\0\2\273\16\0\1\273\32\0\2\6\11\0\4\6"+
    "\1\274\12\6\1\0\2\6\1\0\2\6\1\0\20\6"+
    "\25\0\2\6\11\0\17\6\1\0\1\275\1\6\1\0"+
    "\2\6\1\0\20\6\25\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\1\253\11\6\25\0"+
    "\2\6\11\0\2\6\1\276\14\6\1\0\2\6\1\0"+
    "\2\6\1\0\20\6\25\0\2\6\11\0\17\6\1\0"+
    "\1\277\1\6\1\0\2\6\1\0\20\6\25\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\1\300"+
    "\17\6\25\0\2\6\11\0\11\6\1\301\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\20\6\25\0\2\6\11\0"+
    "\2\6\1\302\14\6\1\0\2\6\1\0\2\6\1\0"+
    "\20\6\25\0\2\6\11\0\17\6\1\0\1\303\1\6"+
    "\1\0\2\6\1\0\20\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\14\6\1\304\3\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\305\16\6\25\0\2\6\11\0\2\6"+
    "\1\306\14\6\1\0\2\6\1\0\2\6\1\0\20\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\10\6\1\307\7\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\7\6\1\310\10\6"+
    "\25\0\2\6\11\0\4\6\1\311\12\6\1\0\2\6"+
    "\1\0\2\6\1\0\20\6\25\0\2\6\11\0\17\6"+
    "\1\0\1\312\1\6\1\0\2\6\1\0\20\6\25\0"+
    "\2\6\11\0\17\6\1\0\1\313\1\6\1\0\2\6"+
    "\1\0\20\6\25\0\2\6\11\0\4\6\1\314\12\6"+
    "\1\0\2\6\1\0\2\6\1\0\20\6\25\0\2\6"+
    "\11\0\15\6\1\315\1\6\1\0\2\6\1\0\2\6"+
    "\1\0\20\6\25\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\5\6\1\316\12\6\25\0\2\6"+
    "\11\0\17\6\1\0\1\317\1\6\1\0\2\6\1\0"+
    "\20\6\25\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\320\15\6\25\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\2\6\1\321"+
    "\15\6\25\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\322\16\6\25\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\7\6\1\323"+
    "\10\6\25\0\2\6\11\0\2\6\1\324\14\6\1\0"+
    "\2\6\1\0\2\6\1\0\20\6\25\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\1\6\1\325"+
    "\16\6\25\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\4\6\1\326\13\6\25\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\7\6\1\327"+
    "\10\6\25\0\2\6\11\0\4\6\1\330\12\6\1\0"+
    "\2\6\1\0\2\6\1\0\20\6\25\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\7\6\1\331"+
    "\10\6\25\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\332\4\6\1\333\12\6\25\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\334\15\6\25\0\2\6\11\0\17\6\1\0\1\335"+
    "\1\6\1\0\2\6\1\0\20\6\25\0\2\6\11\0"+
    "\17\6\1\0\1\336\1\6\1\0\2\6\1\0\20\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\7\6\1\337\10\6\25\0\2\6\11\0\2\6"+
    "\1\340\14\6\1\0\2\6\1\0\2\6\1\0\20\6"+
    "\25\0\2\6\11\0\15\6\1\341\1\6\1\0\2\6"+
    "\1\0\2\6\1\0\20\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\1\342\11\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\1\343\11\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\1\344\15\6"+
    "\53\0\1\345\107\0\1\346\121\0\1\347\40\0\4\177"+
    "\1\350\1\177\1\267\77\177\1\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\1\351\15\6"+
    "\25\0\1\273\13\0\3\273\2\0\1\273\2\0\6\273"+
    "\1\0\2\273\1\0\2\76\13\0\1\273\32\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\7\6"+
    "\1\352\10\6\25\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\3\6\1\353\14\6\25\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\14\6"+
    "\1\354\3\6\25\0\2\6\11\0\4\6\1\355\12\6"+
    "\1\0\2\6\1\0\2\6\1\0\20\6\25\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\14\6"+
    "\1\356\3\6\25\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\357\15\6\25\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\7\6"+
    "\1\360\10\6\25\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\14\6\1\361\3\6\25\0\2\6"+
    "\11\0\2\6\1\362\14\6\1\0\2\6\1\0\2\6"+
    "\1\0\20\6\25\0\2\6\11\0\17\6\1\0\1\363"+
    "\1\6\1\0\2\6\1\0\20\6\25\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\1\364\17\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\365\15\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\1\366\11\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\4\6\1\367\13\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\1\370\15\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\12\6\1\371\5\6\25\0\2\6\11\0\2\6"+
    "\1\372\14\6\1\0\2\6\1\0\2\6\1\0\20\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\373\15\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\3\6\1\374\14\6"+
    "\25\0\2\6\11\0\13\6\1\375\3\6\1\0\2\6"+
    "\1\0\2\6\1\0\20\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\3\6\1\376\14\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\377\15\6\25\0\2\6\11\0\17\6"+
    "\1\0\1\u0100\1\6\1\0\2\6\1\0\20\6\25\0"+
    "\2\6\11\0\17\6\1\0\1\u0101\1\6\1\0\2\6"+
    "\1\0\20\6\25\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\u0102\17\6\25\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\1\6\1\u0103"+
    "\16\6\25\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\12\6\1\u0104\5\6\25\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\7\6\1\u0105"+
    "\10\6\25\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\4\6\1\u0106\13\6\25\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\5\6\1\u0107"+
    "\12\6\25\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\7\6\1\u0108\10\6\25\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\6\6\1\u0109"+
    "\11\6\25\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\7\6\1\u010a\10\6\66\0\1\u010b\105\0"+
    "\1\u010c\1\0\1\u010d\103\0\1\u010e\44\0\2\6\11\0"+
    "\2\6\1\u010f\14\6\1\0\2\6\1\0\2\6\1\0"+
    "\20\6\25\0\2\6\11\0\2\6\1\u0110\14\6\1\0"+
    "\2\6\1\0\2\6\1\0\20\6\25\0\2\6\11\0"+
    "\2\6\1\u0111\14\6\1\0\2\6\1\0\2\6\1\0"+
    "\20\6\25\0\2\6\11\0\17\6\1\0\1\u0112\1\6"+
    "\1\0\2\6\1\0\20\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\u0113\17\6\25\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\6\1\u0114\16\6\25\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\1\u0115\11\6\25\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\7\6\1\u0116\10\6\25\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\12\6\1\u0117\5\6\25\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\12\6\1\u0118\5\6\25\0\2\6\11\0\13\6\1\u0119"+
    "\3\6\1\0\2\6\1\0\2\6\1\0\1\6\1\u011a"+
    "\16\6\25\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\1\u011b\1\6\1\0\20\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\6\1\u011c\16\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\u011d\16\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\7\6\1\u011e\10\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\7\6\1\u011f\10\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\u0120\17\6\25\0"+
    "\2\6\11\0\17\6\1\0\1\u0121\1\6\1\0\2\6"+
    "\1\0\20\6\25\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\7\6\1\u0122\10\6\25\0\2\6"+
    "\11\0\15\6\1\u0123\1\6\1\0\2\6\1\0\2\6"+
    "\1\0\20\6\25\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\12\6\1\u0124\5\6\25\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\3\6"+
    "\1\u0125\14\6\25\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\7\6\1\u0126\10\6\25\0\2\6"+
    "\11\0\13\6\1\u0127\3\6\1\0\2\6\1\0\2\6"+
    "\1\0\20\6\25\0\2\6\11\0\2\6\1\u0128\14\6"+
    "\1\0\2\6\1\0\2\6\1\0\20\6\25\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\1\u0129"+
    "\17\6\67\0\1\u012a\71\0\1\u012b\112\0\1\u012c\117\0"+
    "\1\u012d\40\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\12\6\1\u012e\5\6\25\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\7\6\1\u012f"+
    "\10\6\25\0\2\6\11\0\4\6\1\u0130\12\6\1\0"+
    "\2\6\1\0\2\6\1\0\20\6\25\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\12\6\1\u0131"+
    "\5\6\25\0\2\6\11\0\17\6\1\0\1\u0132\1\6"+
    "\1\0\2\6\1\0\20\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\7\6\1\u0133\10\6"+
    "\25\0\2\6\11\0\2\6\1\u0134\14\6\1\0\2\6"+
    "\1\0\2\6\1\0\20\6\25\0\2\6\11\0\2\6"+
    "\1\u0135\14\6\1\0\2\6\1\0\2\6\1\0\20\6"+
    "\25\0\2\6\11\0\2\6\1\u0136\14\6\1\0\2\6"+
    "\1\0\2\6\1\0\20\6\25\0\2\6\11\0\4\6"+
    "\1\u0137\12\6\1\0\2\6\1\0\2\6\1\0\20\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\4\6\1\u0138\13\6\25\0\2\6\11\0\15\6"+
    "\1\u0139\1\6\1\0\2\6\1\0\2\6\1\0\20\6"+
    "\25\0\2\6\11\0\4\6\1\u013a\12\6\1\0\2\6"+
    "\1\0\2\6\1\0\20\6\25\0\2\6\11\0\4\6"+
    "\1\u013b\12\6\1\0\2\6\1\0\2\6\1\0\20\6"+
    "\60\0\1\u013c\116\0\1\u013d\103\0\1\u013e\43\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\7\6"+
    "\1\u013f\10\6\25\0\2\6\11\0\17\6\1\0\1\u0140"+
    "\1\6\1\0\2\6\1\0\20\6\25\0\2\6\11\0"+
    "\17\6\1\0\1\u0141\1\6\1\0\2\6\1\0\20\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\12\6\1\u0142\5\6\25\0\2\6\11\0\4\6"+
    "\1\u0143\12\6\1\0\2\6\1\0\2\6\1\0\20\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\12\6\1\u0144\5\6\25\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\11\6\1\u0145\6\6"+
    "\25\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\u0146\15\6\25\0\2\6\11\0\17\6"+
    "\1\0\1\u0147\1\6\1\0\2\6\1\0\20\6\25\0"+
    "\2\6\11\0\17\6\1\0\1\u0148\1\6\1\0\2\6"+
    "\1\0\20\6\66\0\1\u0149\44\0\2\6\11\0\15\6"+
    "\1\u014a\1\6\1\0\2\6\1\0\2\6\1\0\20\6"+
    "\25\0\2\6\11\0\17\6\1\0\1\u014b\1\6\1\0"+
    "\2\6\1\0\20\6\25\0\2\6\11\0\17\6\1\0"+
    "\1\u014c\1\6\1\0\2\6\1\0\20\6\72\0\1\u014d"+
    "\102\0\1\u014e\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17430];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\15\1\1\11\11\1\6\11"+
    "\4\1\1\11\1\1\4\11\1\1\2\11\3\1\1\11"+
    "\2\1\3\11\4\1\1\11\2\1\1\11\17\1\1\11"+
    "\33\1\7\11\5\0\5\1\1\11\4\1\1\0\54\1"+
    "\2\0\1\11\2\0\3\1\1\0\51\1\3\0\1\11"+
    "\42\1\4\0\33\1\1\0\1\11\2\0\16\1\1\11"+
    "\1\0\1\11\12\1\1\0\3\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _CSharpLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CSharpLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1784) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 92: 
          { return CSharpTokens.ABSTRACT_KEYWORD;
          }
        case 103: break;
        case 60: 
          { return CSharpTokens.UINT_KEYWORD;
          }
        case 104: break;
        case 8: 
          { return CSharpTokens.STRING_LITERAL;
          }
        case 105: break;
        case 16: 
          { return CSharpTokens.LPAR;
          }
        case 106: break;
        case 1: 
          { return CSharpTokens.BAD_CHARACTER;
          }
        case 107: break;
        case 25: 
          { return CSharpTokens.AND;
          }
        case 108: break;
        case 94: 
          { return CSharpTokens.INTERNAL_KEYWORD;
          }
        case 109: break;
        case 90: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_DEFINE_KEYWORD;
          }
        case 110: break;
        case 43: 
          { return CSharpTokens.GTEQ;
          }
        case 111: break;
        case 36: 
          { return CSharpTokens.LINE_COMMENT;
          }
        case 112: break;
        case 97: 
          { return CSharpTokens.OVERRIDE_KEYWORD;
          }
        case 113: break;
        case 65: 
          { return CSharpTokens.EVENT_KEYWORD;
          }
        case 114: break;
        case 41: 
          { return CSharpTokens.LTEQ;
          }
        case 115: break;
        case 85: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_ENDIF_KEYWORD;
          }
        case 116: break;
        case 67: 
          { return CSharpTokens.USING_KEYWORD;
          }
        case 117: break;
        case 64: 
          { return CSharpTokens.FLOAT_KEYWORD;
          }
        case 118: break;
        case 21: 
          { return CSharpTokens.COLON;
          }
        case 119: break;
        case 63: 
          { return CSharpTokens.CHAR_KEYWORD;
          }
        case 120: break;
        case 88: 
          { return CSharpTokens.PRIVATE_KEYWORD;
          }
        case 121: break;
        case 79: 
          { return CSharpTokens.USHORT_KEYWORD;
          }
        case 122: break;
        case 74: 
          { return CSharpTokens.PARAMS_KEYWORD;
          }
        case 123: break;
        case 44: 
          { return CSharpTokens.COLONCOLON;
          }
        case 124: break;
        case 89: 
          { return CSharpTokens.VIRTUAL_KEYWORD;
          }
        case 125: break;
        case 3: 
          { return CSharpTokens.IDENTIFIER;
          }
        case 126: break;
        case 18: 
          { return CSharpTokens.LT;
          }
        case 127: break;
        case 82: 
          { return CSharpTokens.STRING_KEYWORD;
          }
        case 128: break;
        case 4: 
          { return CSharpTokens.WHITE_SPACE;
          }
        case 129: break;
        case 40: 
          { return CSharpTokens.IN_KEYWORD;
          }
        case 130: break;
        case 72: 
          { return CSharpTokens.DOUBLE_KEYWORD;
          }
        case 131: break;
        case 29: 
          { return CSharpTokens.CARET;
          }
        case 132: break;
        case 7: 
          { return CSharpTokens.CHARACTER_LITERAL;
          }
        case 133: break;
        case 23: 
          { return CSharpTokens.PLUS;
          }
        case 134: break;
        case 5: 
          { return CSharpTokens.DIV;
          }
        case 135: break;
        case 30: 
          { return CSharpTokens.COMMA;
          }
        case 136: break;
        case 93: 
          { return CSharpTokens.DELEGATE_KEYWORD;
          }
        case 137: break;
        case 42: 
          { return CSharpTokens.EQEQ;
          }
        case 138: break;
        case 57: 
          { return CSharpTokens.BYTE_KEYWORD;
          }
        case 139: break;
        case 62: 
          { return CSharpTokens.VOID_KEYWORD;
          }
        case 140: break;
        case 86: 
          { return CSharpTokens.DECIMAL_KEYWORD;
          }
        case 141: break;
        case 49: 
          { return CSharpTokens.INT_KEYWORD;
          }
        case 142: break;
        case 13: 
          { return CSharpTokens.RBRACE;
          }
        case 143: break;
        case 12: 
          { return CSharpTokens.LBRACE;
          }
        case 144: break;
        case 20: 
          { return CSharpTokens.GT;
          }
        case 145: break;
        case 76: 
          { return CSharpTokens.RETURN_KEYWORD;
          }
        case 146: break;
        case 28: 
          { return CSharpTokens.EXCL;
          }
        case 147: break;
        case 61: 
          { return CSharpTokens.BOOL_LITERAL;
          }
        case 148: break;
        case 80: 
          { return CSharpTokens.SEALED_KEYWORD;
          }
        case 149: break;
        case 2: 
          { return CSharpTokens.INTEGER_LITERAL;
          }
        case 150: break;
        case 9: 
          { return CSharpTokens.DOT;
          }
        case 151: break;
        case 26: 
          { return CSharpTokens.OR;
          }
        case 152: break;
        case 51: 
          { return CSharpTokens.REF_KEYWORD;
          }
        case 153: break;
        case 38: 
          { return CSharpTokens.VERBATIM_STRING_LITERAL;
          }
        case 154: break;
        case 73: 
          { return CSharpTokens.EXTERN_KEYWORD;
          }
        case 155: break;
        case 33: 
          { return CSharpTokens.LONG_LITERAL;
          }
        case 156: break;
        case 52: 
          { return CSharpTokens.OUT_KEYWORD;
          }
        case 157: break;
        case 95: 
          { return CSharpTokens.READONLY_KEYWORD;
          }
        case 158: break;
        case 11: 
          { yypushback(1);
		yybegin(MACRO);
          }
        case 159: break;
        case 50: 
          { return CSharpTokens.NEW_KEYWORD;
          }
        case 160: break;
        case 22: 
          { return CSharpTokens.SEMICOLON;
          }
        case 161: break;
        case 31: 
          { yybegin(YYINITIAL); return CSharpTokens.MACRO_STOP;
          }
        case 162: break;
        case 68: 
          { return CSharpTokens.SBYTE_KEYWORD;
          }
        case 163: break;
        case 37: 
          { return CSharpTokens.BLOCK_COMMENT;
          }
        case 164: break;
        case 75: 
          { return CSharpTokens.PUBLIC_KEYWORD;
          }
        case 165: break;
        case 83: 
          { return CSharpTokens.STRUCT_KEYWORD;
          }
        case 166: break;
        case 78: 
          { return CSharpTokens.UNSAFE_KEYWORD;
          }
        case 167: break;
        case 39: 
          { return CSharpTokens.MINUSMINUS;
          }
        case 168: break;
        case 32: 
          { return CSharpTokens.MACRO_VALUE;
          }
        case 169: break;
        case 58: 
          { return CSharpTokens.ENUM_KEYWORD;
          }
        case 170: break;
        case 99: 
          { return CSharpTokens.PROTECTED_KEYWORD;
          }
        case 171: break;
        case 55: 
          { return CSharpTokens.LOCK_KEYWORD;
          }
        case 172: break;
        case 59: 
          { return CSharpTokens.NULL_LITERAL;
          }
        case 173: break;
        case 15: 
          { return CSharpTokens.RBRACKET;
          }
        case 174: break;
        case 71: 
          { return CSharpTokens.CONST_KEYWORD;
          }
        case 175: break;
        case 77: 
          { return CSharpTokens.OBJECT_KEYWORD;
          }
        case 176: break;
        case 87: 
          { return CSharpTokens.DYNAMIC_KEYWORD;
          }
        case 177: break;
        case 56: 
          { return CSharpTokens.BOOL_KEYWORD;
          }
        case 178: break;
        case 102: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_ENDREGION_KEYWORD;
          }
        case 179: break;
        case 66: 
          { return CSharpTokens.ULONG_KEYWORD;
          }
        case 180: break;
        case 101: 
          { return CSharpTokens.NAMESPACE_KEYWORD;
          }
        case 181: break;
        case 34: 
          { return CSharpTokens.FLOAT_LITERAL;
          }
        case 182: break;
        case 46: 
          { return CSharpTokens.NTEQ;
          }
        case 183: break;
        case 98: 
          { return CSharpTokens.VOLATILE_KEYWORD;
          }
        case 184: break;
        case 27: 
          { return CSharpTokens.TILDE;
          }
        case 185: break;
        case 91: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_REGION_KEYWORD;
          }
        case 186: break;
        case 54: 
          { return CSharpTokens.LONG_KEYWORD;
          }
        case 187: break;
        case 53: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_IF_KEYWORD;
          }
        case 188: break;
        case 69: 
          { return CSharpTokens.SHORT_KEYWORD;
          }
        case 189: break;
        case 6: 
          { return CSharpTokens.MUL;
          }
        case 190: break;
        case 81: 
          { return CSharpTokens.STATIC_KEYWORD;
          }
        case 191: break;
        case 24: 
          { return CSharpTokens.PERC;
          }
        case 192: break;
        case 100: 
          { return CSharpTokens.INTERFACE_KEYWORD;
          }
        case 193: break;
        case 17: 
          { return CSharpTokens.RPAR;
          }
        case 194: break;
        case 14: 
          { return CSharpTokens.LBRACKET;
          }
        case 195: break;
        case 48: 
          { return CSharpTokens.LINE_DOC_COMMENT;
          }
        case 196: break;
        case 47: 
          { return CSharpTokens.NULL_COALESCING;
          }
        case 197: break;
        case 70: 
          { return CSharpTokens.CLASS_KEYWORD;
          }
        case 198: break;
        case 35: 
          { return CSharpTokens.DOUBLE_LITERAL;
          }
        case 199: break;
        case 10: 
          { return CSharpTokens.MINUS;
          }
        case 200: break;
        case 96: 
          { return CSharpTokens.OPERATOR_KEYWORD;
          }
        case 201: break;
        case 84: 
          { return CSharpTokens.TYPEOF_KEYWORD;
          }
        case 202: break;
        case 45: 
          { return CSharpTokens.PLUSPLUS;
          }
        case 203: break;
        case 19: 
          { return CSharpTokens.EQ;
          }
        case 204: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
