package org.mustbe.consulo.dotnet.dll.vfs.builder;

import java.util.List;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.util.Function;
import edu.arizona.cs.mbel.mbel.GenericParamDef;
import edu.arizona.cs.mbel.mbel.GenericParamOwner;
import edu.arizona.cs.mbel.mbel.TypeDef;
import edu.arizona.cs.mbel.signature.TypeAttributes;

/**
 * @author VISTALL
 * @since 12.12.13.
 */
public class StubToStringBuilder
{
	private static final char GENERIC_MARKER_IN_NAME = '`';

	private TypeDef myTypeDef;
	private StubBlock myRoot;

	public StubToStringBuilder(TypeDef typeDef)
	{
		myTypeDef = typeDef;

		StubBlock namespaceBlock = processNamespace();
		if(namespaceBlock != null)
		{
			myRoot = namespaceBlock;
		}

		StubBlock typeBlock = processType();
		if(namespaceBlock != null)
		{
			namespaceBlock.getBlocks().add(typeBlock);
		}
		else
		{
			myRoot = typeBlock;
		}
	}

	@NotNull
	private StubBlock processType()
	{
		String name = myTypeDef.getName();
		int i = name.lastIndexOf(GENERIC_MARKER_IN_NAME);
		if(i > 0)
		{
			name = name.substring(0, i);
		}

		StringBuilder builder =  new StringBuilder();
		if(isSet(TypeAttributes.VisibilityMask, TypeAttributes.Public))
		{
			builder.append("public ");
		}
		else
		{
			builder.append("internal ");
		}

		if(isSet(TypeAttributes.Sealed))
		{
			builder.append("sealed ");
		}

		if(isSet(TypeAttributes.Abstract))
		{
			builder.append("abstract ");
		}

		if(myTypeDef.isEnum())
		{
			builder.append("enum ");
		}
		else if(myTypeDef.isValueType())
		{
			builder.append("struct ");
		}
		else if(isSet(TypeAttributes.Interface))
		{
			builder.append("interface ");
		}
		else
		{
			builder.append("class ");
		}
		builder.append(name);

		processGenericParameterList(myTypeDef, builder);

		StubBlock stubBlock = new StubBlock(builder.toString(), '{', '}');
		return stubBlock;
	}

	private static void processGenericParameterList(GenericParamOwner owner, StringBuilder builder)
	{
		List<GenericParamDef> genericParams = owner.getGenericParams();
		if(genericParams.isEmpty())
		{
			return;
		}

		String text = StringUtil.join(genericParams, new Function<GenericParamDef, String>()
		{
			@Override
			public String fun(GenericParamDef genericParamDef)
			{
				return genericParamDef.getName();
			}
		}, ", ");
		builder.append("<").append(text).append(">");
	}

	private boolean isSet(int mod)
	{
		return isSet(myTypeDef.getFlags(), mod);
	}

	private boolean isSet(long value, int mod)
	{
		return (value & mod) == mod;
	}

	private boolean isSet(int mod, int v)
	{
		return isSet(myTypeDef.getFlags(), mod, v);
	}

	private boolean isSet(long value, int mod, int v)
	{
		return (value & mod) == v;
	}

	@Nullable
	private StubBlock processNamespace()
	{
		String namespace = myTypeDef.getNamespace();
		if(StringUtil.isEmpty(namespace))
		{
			return null;
		}

		return new StubBlock("namespace " + namespace, '{', '}');
	}

	@NotNull
	public String gen()
	{
		assert myRoot != null;

		StringBuilder builder = new StringBuilder();
		builder.append("// Generated by decompiler from Consulo .NET plugin\n\n");

		processBlock(builder, myRoot, 0);

		return builder.toString();
	}

	private static void processBlock(StringBuilder builder, StubBlock root, int index)
	{
		builder.append(StringUtil.repeatSymbol('\t', index));
		builder.append(root.getStartText());
		builder.append('\n');
		builder.append(StringUtil.repeatSymbol('\t', index));
		builder.append(root.getIndents()[0]);
		builder.append('\n');

		for(StubBlock stubBlock : root.getBlocks())
		{
			processBlock(builder, stubBlock, index + 1);
		}

		builder.append(StringUtil.repeatSymbol('\t', index));
		builder.append(root.getIndents()[1]);
		builder.append('\n');
	}
}
