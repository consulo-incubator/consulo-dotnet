/* The following code was generated by JFlex 1.4.3 on 21.11.14 8:35 */

package org.mustbe.consulo.msil.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.mustbe.consulo.msil.lang.psi.MsilTokens;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21.11.14 8:35 from the specification file
 * <tt>F:/consulo-dotnet/msil-psi-impl/src/org/mustbe/consulo/msil/lang/lexer/_MsilLexer.flex</tt>
 */
public class _MsilLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\1\1\3\1\0\1\1\1\3\16\7\4\0\1\1\1\20"+
    "\2\0\1\6\1\0\1\27\1\12\1\24\1\25\1\4\1\31\1\30"+
    "\1\32\1\10\1\2\1\5\1\60\1\63\1\62\1\64\1\5\1\61"+
    "\1\5\1\57\1\5\1\21\1\0\1\16\1\26\1\17\2\0\32\6"+
    "\1\22\1\13\1\23\1\0\1\6\1\11\1\35\1\55\1\33\1\45"+
    "\1\43\1\46\1\56\1\44\1\47\1\65\1\6\1\34\1\42\1\54"+
    "\1\41\1\50\1\6\1\51\1\36\1\40\1\37\1\53\1\6\1\66"+
    "\1\52\1\67\1\14\1\0\1\15\1\0\41\7\2\0\4\6\4\0"+
    "\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0"+
    "\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0\5\6\11\0"+
    "\1\6\21\0\130\7\5\0\23\7\12\0\1\6\13\0\1\6\1\0"+
    "\3\6\1\0\1\6\1\0\24\6\1\0\54\6\1\0\46\6\1\0"+
    "\5\6\4\0\202\6\1\0\4\7\3\0\105\6\1\0\46\6\2\0"+
    "\2\6\6\0\20\6\41\0\46\6\2\0\1\6\7\0\47\6\11\0"+
    "\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0\2\7\1\0"+
    "\1\7\13\0\33\6\5\0\3\6\15\0\4\7\14\0\6\7\13\0"+
    "\32\6\5\0\13\6\16\7\7\0\12\7\4\0\2\6\1\7\143\6"+
    "\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6"+
    "\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7"+
    "\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0\3\7\66\6\2\0"+
    "\1\7\1\6\20\7\2\0\1\6\4\7\3\0\12\6\2\7\2\0"+
    "\12\7\21\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\11\0\1\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\4\6\15\0\3\7\1\0\6\6\4\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0\4\6\1\0"+
    "\1\6\7\0\14\7\3\6\14\0\3\7\1\0\11\6\1\0\3\6"+
    "\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7"+
    "\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6"+
    "\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\6\7\3\0\2\7\2\0\3\7\10\0\2\7\4\0"+
    "\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0\1\7\1\6"+
    "\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6"+
    "\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6\1\0\3\6"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7\17\0\11\7"+
    "\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\4\0\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\11\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6"+
    "\1\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\20\6\4\0\6\7\2\0\3\7\1\0\4\7"+
    "\11\0\1\7\10\0\2\6\4\0\12\7\22\0\2\7\1\0\22\6"+
    "\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7"+
    "\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6"+
    "\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6"+
    "\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6"+
    "\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6"+
    "\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6"+
    "\1\0\1\6\1\0\6\7\2\0\12\7\2\0\2\6\42\0\1\6"+
    "\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7"+
    "\4\0\2\7\10\6\1\0\42\6\6\0\24\7\1\0\2\7\4\6"+
    "\4\0\10\7\1\0\44\7\11\0\1\7\71\0\42\6\1\0\5\6"+
    "\1\0\2\6\1\0\7\7\3\0\4\7\6\0\12\7\6\0\6\6"+
    "\4\7\106\0\46\6\12\0\51\6\7\0\132\6\5\0\104\6\5\0"+
    "\122\6\6\0\7\6\1\0\77\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\47\6\1\0\1\6\1\0"+
    "\4\6\2\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\7\6\1\0\27\6\1\0"+
    "\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\47\6\1\0"+
    "\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6\2\0\10\6\12\0"+
    "\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7"+
    "\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6"+
    "\1\7\126\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6"+
    "\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6\6\0\26\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\17\0\4\7\32\0\5\7"+
    "\20\0\2\6\23\0\1\6\13\0\4\7\6\0\6\7\1\0\1\6"+
    "\15\0\1\6\40\0\22\6\36\0\15\7\4\0\1\7\3\0\6\7"+
    "\27\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\3\6"+
    "\1\0\7\6\3\0\3\6\5\0\5\6\26\0\44\6\u0e81\0\3\6"+
    "\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0"+
    "\2\7\2\0\3\6\1\0\137\6\5\0\50\6\4\0\136\6\21\0"+
    "\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0"+
    "\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0\5\6\5\0"+
    "\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\15\6\3\0\20\7\20\0\4\7\17\0\2\6\30\0"+
    "\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0"+
    "\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\12\0"+
    "\132\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0"+
    "\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\1\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\17\6\1\26\1\27\1\0\12\6\1\7\1\30\1\0"+
    "\31\6\1\0\14\6\2\0\22\6\1\31\12\6\1\27"+
    "\4\6\1\32\6\6\1\33\2\0\1\6\1\34\10\6"+
    "\1\35\10\6\1\36\11\6\1\37\2\6\1\40\12\6"+
    "\1\41\1\42\1\43\10\6\1\44\6\6\1\45\1\6"+
    "\1\46\2\6\1\47\1\50\1\51\5\6\1\52\2\6"+
    "\1\53\2\6\1\54\1\6\1\55\1\56\1\57\5\6"+
    "\1\60\1\61\1\62\2\6\1\63\1\64\1\65\1\66"+
    "\7\6\1\67\5\6\1\70\1\71\1\6\1\72\2\6"+
    "\1\73\4\6\1\74\1\6\1\75\5\6\1\76\2\6"+
    "\1\77\3\6\1\100\1\101\6\6\1\102\3\6\1\103"+
    "\1\104\1\105\2\6\1\106\2\6\1\107\1\110\1\6"+
    "\1\111\2\6\1\112\1\113\2\6\1\114\1\6\1\115"+
    "\1\6\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\70\0\70\0\340\0\u0118"+
    "\0\u0150\0\70\0\70\0\70\0\70\0\70\0\u0188\0\u01c0"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348\0\u0380"+
    "\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540"+
    "\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700"+
    "\0\u0738\0\u0770\0\u07a8\0\u07e0\0\70\0\70\0\u0818\0\u0850"+
    "\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10"+
    "\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50"+
    "\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110"+
    "\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0"+
    "\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490"+
    "\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650"+
    "\0\u1688\0\u16c0\0\u16f8\0\u1730\0\70\0\u1768\0\u17a0\0\u17d8"+
    "\0\u1810\0\340\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960"+
    "\0\340\0\u1998\0\u19d0\0\u1a08\0\340\0\u1a40\0\u1a78\0\u1ab0"+
    "\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70"+
    "\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\340\0\u1df8"+
    "\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8"+
    "\0\340\0\u1ff0\0\u2028\0\340\0\u2060\0\u2098\0\u20d0\0\u2108"+
    "\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\70\0\70"+
    "\0\340\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0"+
    "\0\u2418\0\340\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568"+
    "\0\u25a0\0\u25d8\0\340\0\u2610\0\u2648\0\340\0\340\0\340"+
    "\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808"+
    "\0\340\0\u2840\0\u2878\0\340\0\u28b0\0\340\0\340\0\340"+
    "\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\340\0\340\0\340"+
    "\0\u2a00\0\u2a38\0\340\0\340\0\340\0\340\0\u2a70\0\u2aa8"+
    "\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\340\0\u2bf8\0\u2c30"+
    "\0\u2c68\0\u2ca0\0\u2cd8\0\340\0\340\0\u2d10\0\340\0\u2d48"+
    "\0\u2d80\0\340\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\340\0\u2e98"+
    "\0\340\0\u2ed0\0\u2f08\0\u2f40\0\u2f78\0\u2fb0\0\340\0\u2fe8"+
    "\0\u3020\0\340\0\u3058\0\u3090\0\u30c8\0\340\0\340\0\u3100"+
    "\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u3218\0\340\0\u3250\0\u3288"+
    "\0\u32c0\0\340\0\340\0\340\0\u32f8\0\u3330\0\340\0\u3368"+
    "\0\u33a0\0\340\0\340\0\u33d8\0\340\0\u3410\0\u3448\0\340"+
    "\0\340\0\u3480\0\u34b8\0\340\0\u34f0\0\340\0\u3528\0\340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\2"+
    "\1\10\1\2\1\11\1\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\7\1\36\1\7\1\37\1\40\1\7\1\41\1\42"+
    "\1\43\1\44\1\7\1\45\1\46\1\47\1\7\6\6"+
    "\3\7\71\0\1\3\1\0\1\3\66\0\1\50\1\0"+
    "\1\51\70\0\3\7\1\52\1\53\21\0\35\7\6\0"+
    "\1\7\24\0\1\54\1\7\1\55\1\56\3\7\1\57"+
    "\1\60\2\7\1\61\1\7\1\62\1\63\4\7\1\64"+
    "\6\0\3\7\3\11\1\0\6\11\2\65\54\11\21\0"+
    "\1\66\107\0\1\67\33\0\3\7\1\52\1\53\21\0"+
    "\1\7\1\70\7\7\1\71\23\7\5\0\3\7\1\52"+
    "\1\53\21\0\14\7\1\72\20\7\5\0\3\7\1\52"+
    "\1\53\21\0\3\7\1\73\16\7\1\74\12\7\5\0"+
    "\3\7\1\52\1\53\21\0\5\7\1\75\2\7\1\76"+
    "\4\7\1\77\17\7\5\0\3\7\1\52\1\53\21\0"+
    "\14\7\1\100\20\7\5\0\3\7\1\52\1\53\21\0"+
    "\22\7\1\101\12\7\5\0\3\7\1\52\1\53\21\0"+
    "\33\7\1\102\1\7\5\0\3\7\1\52\1\53\21\0"+
    "\14\7\1\103\20\7\5\0\3\7\1\52\1\53\21\0"+
    "\1\7\1\104\1\105\11\7\1\106\20\7\5\0\3\7"+
    "\1\52\1\53\21\0\7\7\1\107\11\7\1\110\13\7"+
    "\5\0\3\7\1\52\1\53\21\0\4\7\1\111\11\7"+
    "\1\112\16\7\5\0\3\7\1\52\1\53\21\0\5\7"+
    "\1\113\27\7\5\0\3\7\1\52\1\53\21\0\2\7"+
    "\1\114\3\7\1\115\5\7\1\116\20\7\5\0\3\7"+
    "\1\52\1\53\21\0\10\7\1\117\24\7\5\0\3\7"+
    "\1\52\1\53\21\0\6\7\1\120\26\7\3\50\1\0"+
    "\64\50\4\51\1\121\63\51\6\0\1\7\24\0\24\7"+
    "\6\0\3\7\5\0\3\53\23\0\35\53\5\0\3\7"+
    "\1\52\1\53\21\0\1\7\1\122\2\7\1\123\30\7"+
    "\5\0\3\7\1\52\1\53\21\0\3\7\1\124\6\7"+
    "\1\125\22\7\5\0\3\7\1\52\1\53\21\0\10\7"+
    "\1\126\24\7\5\0\3\7\1\52\1\53\21\0\10\7"+
    "\1\127\24\7\5\0\3\7\1\52\1\53\21\0\20\7"+
    "\1\130\14\7\5\0\3\7\1\52\1\53\21\0\14\7"+
    "\1\131\20\7\5\0\3\7\1\52\1\53\21\0\2\7"+
    "\1\132\13\7\1\133\16\7\5\0\3\7\1\52\1\53"+
    "\21\0\10\7\1\134\24\7\5\0\3\7\1\52\1\53"+
    "\21\0\10\7\1\135\24\7\37\0\1\136\10\0\1\137"+
    "\24\0\3\7\1\52\1\53\21\0\2\7\1\140\32\7"+
    "\5\0\3\7\1\52\1\53\21\0\2\7\1\141\32\7"+
    "\5\0\3\7\1\52\1\53\21\0\5\7\1\142\27\7"+
    "\5\0\3\7\1\52\1\53\21\0\3\7\1\143\31\7"+
    "\5\0\3\7\1\52\1\53\21\0\3\7\1\144\31\7"+
    "\5\0\3\7\1\52\1\53\21\0\2\7\1\145\13\7"+
    "\1\146\16\7\5\0\3\7\1\52\1\53\21\0\2\7"+
    "\1\147\13\7\1\150\16\7\5\0\3\7\1\52\1\53"+
    "\21\0\10\7\1\151\24\7\5\0\3\7\1\52\1\53"+
    "\21\0\21\7\1\152\13\7\5\0\3\7\1\52\1\53"+
    "\21\0\32\7\1\153\2\7\5\0\3\7\1\52\1\53"+
    "\21\0\5\7\1\154\27\7\5\0\3\7\1\52\1\53"+
    "\21\0\12\7\1\155\22\7\5\0\3\7\1\52\1\53"+
    "\21\0\6\7\1\156\26\7\5\0\3\7\1\52\1\53"+
    "\21\0\7\7\1\157\25\7\5\0\3\7\1\52\1\53"+
    "\21\0\21\7\1\160\13\7\5\0\3\7\1\52\1\53"+
    "\21\0\15\7\1\161\17\7\5\0\3\7\1\52\1\53"+
    "\21\0\5\7\1\162\6\7\1\163\20\7\5\0\3\7"+
    "\1\52\1\53\21\0\22\7\1\164\12\7\5\0\3\7"+
    "\1\52\1\53\21\0\6\7\1\165\5\7\1\166\20\7"+
    "\5\0\3\7\1\52\1\53\21\0\3\7\1\167\31\7"+
    "\5\0\3\7\1\52\1\53\21\0\1\7\1\170\33\7"+
    "\5\0\3\7\1\52\1\53\21\0\14\7\1\171\20\7"+
    "\5\0\3\7\1\52\1\53\21\0\16\7\1\172\16\7"+
    "\5\0\3\7\1\52\1\53\21\0\3\7\1\173\31\7"+
    "\5\0\3\7\1\52\1\53\21\0\6\7\1\174\26\7"+
    "\2\51\1\175\1\51\1\121\63\51\5\0\3\7\1\52"+
    "\1\53\21\0\2\7\1\176\32\7\5\0\3\7\1\52"+
    "\1\53\21\0\3\7\1\177\31\7\5\0\3\7\1\52"+
    "\1\53\21\0\3\7\1\200\31\7\5\0\3\7\1\52"+
    "\1\53\21\0\12\7\1\201\22\7\5\0\3\7\1\52"+
    "\1\53\21\0\5\7\1\202\27\7\5\0\3\7\1\52"+
    "\1\53\21\0\5\7\1\203\27\7\5\0\3\7\1\52"+
    "\1\53\21\0\10\7\1\204\24\7\5\0\3\7\1\52"+
    "\1\53\21\0\10\7\1\205\24\7\5\0\3\7\1\52"+
    "\1\53\21\0\16\7\1\206\16\7\5\0\3\7\1\52"+
    "\1\53\21\0\6\7\1\207\26\7\5\0\3\7\1\52"+
    "\1\53\21\0\7\7\1\210\25\7\5\0\3\7\1\52"+
    "\1\53\21\0\5\7\1\211\27\7\40\0\1\212\67\0"+
    "\1\213\34\0\3\7\1\52\1\53\21\0\3\7\1\214"+
    "\31\7\5\0\3\7\1\52\1\53\21\0\16\7\1\215"+
    "\16\7\5\0\3\7\1\52\1\53\21\0\10\7\1\216"+
    "\24\7\5\0\3\7\1\52\1\53\21\0\10\7\1\217"+
    "\24\7\5\0\3\7\1\52\1\53\21\0\5\7\1\220"+
    "\27\7\5\0\3\7\1\52\1\53\21\0\5\7\1\221"+
    "\27\7\5\0\3\7\1\52\1\53\21\0\14\7\1\222"+
    "\20\7\5\0\3\7\1\52\1\53\21\0\1\7\1\223"+
    "\33\7\5\0\3\7\1\52\1\53\21\0\14\7\1\224"+
    "\20\7\5\0\3\7\1\52\1\53\21\0\1\225\34\7"+
    "\5\0\3\7\1\52\1\53\21\0\5\7\1\226\27\7"+
    "\5\0\3\7\1\52\1\53\21\0\10\7\1\227\24\7"+
    "\5\0\3\7\1\52\1\53\21\0\10\7\1\230\24\7"+
    "\5\0\3\7\1\52\1\53\21\0\10\7\1\231\24\7"+
    "\5\0\3\7\1\52\1\53\21\0\2\7\1\232\32\7"+
    "\5\0\3\7\1\52\1\53\21\0\6\7\1\233\26\7"+
    "\5\0\3\7\1\52\1\53\21\0\2\7\1\234\32\7"+
    "\5\0\3\7\1\52\1\53\21\0\1\7\1\235\33\7"+
    "\5\0\3\7\1\52\1\53\21\0\10\7\1\236\13\7"+
    "\1\237\1\240\1\241\1\242\5\7\5\0\3\7\1\52"+
    "\1\53\21\0\5\7\1\243\27\7\5\0\3\7\1\52"+
    "\1\53\21\0\1\7\1\244\33\7\5\0\3\7\1\52"+
    "\1\53\21\0\5\7\1\245\27\7\5\0\3\7\1\52"+
    "\1\53\21\0\20\7\1\246\14\7\5\0\3\7\1\52"+
    "\1\53\21\0\15\7\1\247\17\7\5\0\3\7\1\52"+
    "\1\53\21\0\4\7\1\250\30\7\5\0\3\7\1\52"+
    "\1\53\21\0\12\7\1\251\22\7\5\0\3\7\1\52"+
    "\1\53\21\0\5\7\1\252\27\7\5\0\3\7\1\52"+
    "\1\53\21\0\5\7\1\253\27\7\5\0\3\7\1\52"+
    "\1\53\21\0\1\7\1\254\33\7\5\0\3\7\1\52"+
    "\1\53\21\0\3\7\1\255\31\7\5\0\3\7\1\52"+
    "\1\53\21\0\5\7\1\256\27\7\5\0\3\7\1\52"+
    "\1\53\21\0\10\7\1\257\24\7\5\0\3\7\1\52"+
    "\1\53\21\0\6\7\1\260\26\7\5\0\3\7\1\52"+
    "\1\53\21\0\11\7\1\261\23\7\5\0\3\7\1\52"+
    "\1\53\21\0\21\7\1\262\13\7\5\0\3\7\1\52"+
    "\1\53\21\0\1\7\1\263\33\7\5\0\3\7\1\52"+
    "\1\53\21\0\2\7\1\264\32\7\5\0\3\7\1\52"+
    "\1\53\21\0\15\7\1\265\17\7\5\0\3\7\1\52"+
    "\1\53\21\0\6\7\1\266\26\7\23\0\1\267\67\0"+
    "\1\270\51\0\3\7\1\52\1\53\21\0\3\7\1\271"+
    "\31\7\5\0\3\7\1\52\1\53\21\0\16\7\1\272"+
    "\16\7\5\0\3\7\1\52\1\53\21\0\7\7\1\273"+
    "\25\7\5\0\3\7\1\52\1\53\21\0\16\7\1\274"+
    "\16\7\5\0\3\7\1\52\1\53\21\0\14\7\1\275"+
    "\20\7\5\0\3\7\1\52\1\53\21\0\21\7\1\276"+
    "\13\7\5\0\3\7\1\52\1\53\21\0\10\7\1\277"+
    "\24\7\5\0\3\7\1\52\1\53\21\0\2\7\1\300"+
    "\32\7\5\0\3\7\1\52\1\53\21\0\14\7\1\301"+
    "\20\7\5\0\3\7\1\52\1\53\21\0\24\7\1\302"+
    "\1\303\1\304\1\305\5\7\5\0\3\7\1\52\1\53"+
    "\21\0\1\306\34\7\5\0\3\7\1\52\1\53\21\0"+
    "\21\7\1\307\13\7\5\0\3\7\1\52\1\53\21\0"+
    "\22\7\1\310\12\7\5\0\3\7\1\52\1\53\21\0"+
    "\5\7\1\311\27\7\5\0\3\7\1\52\1\53\21\0"+
    "\16\7\1\312\16\7\5\0\3\7\1\52\1\53\21\0"+
    "\1\7\1\313\33\7\5\0\3\7\1\52\1\53\21\0"+
    "\10\7\1\314\24\7\5\0\3\7\1\52\1\53\21\0"+
    "\16\7\1\315\16\7\5\0\3\7\1\52\1\53\21\0"+
    "\26\7\1\316\6\7\5\0\3\7\1\52\1\53\21\0"+
    "\31\7\1\317\3\7\5\0\3\7\1\52\1\53\21\0"+
    "\30\7\1\320\4\7\5\0\3\7\1\52\1\53\21\0"+
    "\6\7\1\321\26\7\5\0\3\7\1\52\1\53\21\0"+
    "\14\7\1\322\20\7\5\0\3\7\1\52\1\53\21\0"+
    "\10\7\1\323\24\7\5\0\3\7\1\52\1\53\21\0"+
    "\2\7\1\324\32\7\5\0\3\7\1\52\1\53\21\0"+
    "\10\7\1\325\24\7\5\0\3\7\1\52\1\53\21\0"+
    "\10\7\1\326\24\7\5\0\3\7\1\52\1\53\21\0"+
    "\4\7\1\327\30\7\5\0\3\7\1\52\1\53\21\0"+
    "\10\7\1\330\24\7\5\0\3\7\1\52\1\53\21\0"+
    "\3\7\1\331\31\7\5\0\3\7\1\52\1\53\21\0"+
    "\6\7\1\332\26\7\5\0\3\7\1\52\1\53\21\0"+
    "\7\7\1\333\25\7\5\0\3\7\1\52\1\53\21\0"+
    "\21\7\1\334\13\7\5\0\3\7\1\52\1\53\21\0"+
    "\6\7\1\335\26\7\5\0\3\7\1\52\1\53\21\0"+
    "\5\7\1\336\27\7\5\0\3\7\1\52\1\53\21\0"+
    "\12\7\1\337\22\7\5\0\3\7\1\52\1\53\21\0"+
    "\7\7\1\340\25\7\5\0\3\7\1\52\1\53\21\0"+
    "\10\7\1\341\24\7\5\0\3\7\1\52\1\53\21\0"+
    "\20\7\1\342\14\7\5\0\3\7\1\52\1\53\21\0"+
    "\2\7\1\343\32\7\5\0\3\7\1\52\1\53\21\0"+
    "\22\7\1\344\12\7\5\0\3\7\1\52\1\53\21\0"+
    "\2\7\1\345\32\7\5\0\3\7\1\52\1\53\21\0"+
    "\1\346\34\7\5\0\3\7\1\52\1\53\21\0\23\7"+
    "\1\347\11\7\5\0\3\7\1\52\1\53\21\0\12\7"+
    "\1\350\22\7\5\0\3\7\1\52\1\53\21\0\1\7"+
    "\1\351\33\7\5\0\3\7\1\52\1\53\21\0\2\7"+
    "\1\352\32\7\5\0\3\7\1\52\1\53\21\0\26\7"+
    "\1\353\6\7\5\0\3\7\1\52\1\53\21\0\31\7"+
    "\1\354\3\7\5\0\3\7\1\52\1\53\21\0\30\7"+
    "\1\355\4\7\5\0\3\7\1\52\1\53\21\0\5\7"+
    "\1\356\27\7\5\0\3\7\1\52\1\53\21\0\12\7"+
    "\1\357\22\7\5\0\3\7\1\52\1\53\21\0\17\7"+
    "\1\360\15\7\5\0\3\7\1\52\1\53\21\0\26\7"+
    "\1\361\6\7\5\0\3\7\1\52\1\53\21\0\2\7"+
    "\1\362\32\7\5\0\3\7\1\52\1\53\21\0\7\7"+
    "\1\363\25\7\5\0\3\7\1\52\1\53\21\0\13\7"+
    "\1\364\21\7\5\0\3\7\1\52\1\53\21\0\21\7"+
    "\1\365\13\7\5\0\3\7\1\52\1\53\21\0\1\366"+
    "\34\7\5\0\3\7\1\52\1\53\21\0\1\367\34\7"+
    "\5\0\3\7\1\52\1\53\21\0\5\7\1\370\27\7"+
    "\5\0\3\7\1\52\1\53\21\0\1\371\34\7\5\0"+
    "\3\7\1\52\1\53\21\0\5\7\1\372\27\7\5\0"+
    "\3\7\1\52\1\53\21\0\2\7\1\373\32\7\5\0"+
    "\3\7\1\52\1\53\21\0\12\7\1\374\22\7\5\0"+
    "\3\7\1\52\1\53\21\0\7\7\1\375\25\7\5\0"+
    "\3\7\1\52\1\53\21\0\22\7\1\376\12\7\5\0"+
    "\3\7\1\52\1\53\21\0\12\7\1\377\22\7\5\0"+
    "\3\7\1\52\1\53\21\0\16\7\1\u0100\16\7\5\0"+
    "\3\7\1\52\1\53\21\0\10\7\1\u0101\24\7\5\0"+
    "\3\7\1\52\1\53\21\0\1\7\1\u0102\33\7\5\0"+
    "\3\7\1\52\1\53\21\0\1\7\1\u0103\33\7\5\0"+
    "\3\7\1\52\1\53\21\0\1\u0104\34\7\5\0\3\7"+
    "\1\52\1\53\21\0\14\7\1\u0105\20\7\5\0\3\7"+
    "\1\52\1\53\21\0\1\7\1\u0106\33\7\5\0\3\7"+
    "\1\52\1\53\21\0\3\7\1\u0107\31\7\5\0\3\7"+
    "\1\52\1\53\21\0\3\7\1\u0108\31\7\5\0\3\7"+
    "\1\52\1\53\21\0\31\7\1\u0109\3\7\5\0\3\7"+
    "\1\52\1\53\21\0\3\7\1\u010a\31\7\5\0\3\7"+
    "\1\52\1\53\21\0\10\7\1\u010b\24\7\5\0\3\7"+
    "\1\52\1\53\21\0\2\7\1\u010c\32\7\5\0\3\7"+
    "\1\52\1\53\21\0\1\7\1\u010d\33\7\5\0\3\7"+
    "\1\52\1\53\21\0\5\7\1\u010e\27\7\5\0\3\7"+
    "\1\52\1\53\21\0\10\7\1\u010f\24\7\5\0\3\7"+
    "\1\52\1\53\21\0\14\7\1\u0110\20\7\5\0\3\7"+
    "\1\52\1\53\21\0\17\7\1\u0111\15\7\5\0\3\7"+
    "\1\52\1\53\21\0\1\7\1\u0112\33\7\5\0\3\7"+
    "\1\52\1\53\21\0\1\7\1\u0113\33\7\5\0\3\7"+
    "\1\52\1\53\21\0\5\7\1\u0114\27\7\5\0\3\7"+
    "\1\52\1\53\21\0\6\7\1\u0115\26\7\5\0\3\7"+
    "\1\52\1\53\21\0\17\7\1\u0116\15\7\5\0\3\7"+
    "\1\52\1\53\21\0\5\7\1\u0117\27\7\5\0\3\7"+
    "\1\52\1\53\21\0\34\7\1\u0118\5\0\3\7\1\52"+
    "\1\53\21\0\21\7\1\u0119\13\7\5\0\3\7\1\52"+
    "\1\53\21\0\14\7\1\u011a\20\7\5\0\3\7\1\52"+
    "\1\53\21\0\3\7\1\u011b\31\7\5\0\3\7\1\52"+
    "\1\53\21\0\21\7\1\u011c\13\7\5\0\3\7\1\52"+
    "\1\53\21\0\1\u011d\34\7\5\0\3\7\1\52\1\53"+
    "\21\0\17\7\1\u011e\15\7\5\0\3\7\1\52\1\53"+
    "\21\0\10\7\1\u011f\24\7\5\0\3\7\1\52\1\53"+
    "\21\0\2\7\1\u0120\32\7\5\0\3\7\1\52\1\53"+
    "\21\0\15\7\1\u0121\17\7\5\0\3\7\1\52\1\53"+
    "\21\0\17\7\1\u0122\15\7\5\0\3\7\1\52\1\53"+
    "\21\0\17\7\1\u0123\15\7\5\0\3\7\1\52\1\53"+
    "\21\0\21\7\1\u0124\13\7\5\0\3\7\1\52\1\53"+
    "\21\0\2\7\1\u0125\32\7\5\0\3\7\1\52\1\53"+
    "\21\0\2\7\1\u0126\32\7\5\0\3\7\1\52\1\53"+
    "\21\0\23\7\1\u0127\11\7\5\0\3\7\1\52\1\53"+
    "\21\0\10\7\1\u0128\24\7\5\0\3\7\1\52\1\53"+
    "\21\0\5\7\1\u0129\27\7\5\0\3\7\1\52\1\53"+
    "\21\0\10\7\1\u012a\24\7\5\0\3\7\1\52\1\53"+
    "\21\0\12\7\1\u012b\22\7\5\0\3\7\1\52\1\53"+
    "\21\0\1\7\1\u012c\33\7\5\0\3\7\1\52\1\53"+
    "\21\0\10\7\1\u012d\24\7\5\0\3\7\1\52\1\53"+
    "\21\0\22\7\1\u012e\12\7\5\0\3\7\1\52\1\53"+
    "\21\0\7\7\1\u012f\25\7\5\0\3\7\1\52\1\53"+
    "\21\0\7\7\1\u0130\25\7\5\0\3\7\1\52\1\53"+
    "\21\0\3\7\1\u0131\31\7\5\0\3\7\1\52\1\53"+
    "\21\0\21\7\1\u0132\13\7\5\0\3\7\1\52\1\53"+
    "\21\0\1\7\1\u0133\33\7\5\0\3\7\1\52\1\53"+
    "\21\0\10\7\1\u0134\24\7\5\0\3\7\1\52\1\53"+
    "\21\0\2\7\1\u0135\32\7\5\0\3\7\1\52\1\53"+
    "\21\0\10\7\1\u0136\24\7\5\0\3\7\1\52\1\53"+
    "\21\0\7\7\1\u0137\25\7\5\0\3\7\1\52\1\53"+
    "\21\0\10\7\1\u0138\24\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\3\1\5\11\2\1\10\11"+
    "\21\1\1\0\12\1\2\11\1\0\31\1\1\0\14\1"+
    "\2\0\35\1\1\11\14\1\2\0\53\1\2\11\200\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  public _MsilLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _MsilLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { return MsilTokens.CHAR_KEYWORD;
          }
        case 79: break;
        case 55: 
          { return MsilTokens.PUBLIC_KEYWORD;
          }
        case 80: break;
        case 10: 
          { return MsilTokens.LT;
          }
        case 81: break;
        case 6: 
          { return MsilTokens.IDENTIFIER;
          }
        case 82: break;
        case 15: 
          { return MsilTokens.LPAR;
          }
        case 83: break;
        case 63: 
          { return MsilTokens.VIRTUAL_KEYWORD;
          }
        case 84: break;
        case 45: 
          { return MsilTokens._EVENT_KEYWORD;
          }
        case 85: break;
        case 58: 
          { return MsilTokens._METHOD_KEYWORD;
          }
        case 86: break;
        case 24: 
          { return MsilTokens.COLONCOLON;
          }
        case 87: break;
        case 62: 
          { return MsilTokens.PRIVATE_KEYWORD;
          }
        case 88: break;
        case 64: 
          { return MsilTokens.ASSEMBLY_KEYWORD;
          }
        case 89: break;
        case 7: 
          { return MsilTokens.QIDENTIFIER;
          }
        case 90: break;
        case 52: 
          { return MsilTokens.UINT64_KEYWORD;
          }
        case 91: break;
        case 11: 
          { return MsilTokens.GT;
          }
        case 92: break;
        case 35: 
          { return MsilTokens.CLASS_KEYWORD;
          }
        case 93: break;
        case 73: 
          { return MsilTokens.VALUETYPE_KEYWORD;
          }
        case 94: break;
        case 9: 
          { return MsilTokens.RBRACE;
          }
        case 95: break;
        case 54: 
          { return MsilTokens.OBJECT_KEYWORD;
          }
        case 96: break;
        case 48: 
          { return MsilTokens.STATIC_KEYWORD;
          }
        case 97: break;
        case 31: 
          { return MsilTokens.VOID_KEYWORD;
          }
        case 98: break;
        case 51: 
          { return MsilTokens.UINT16_KEYWORD;
          }
        case 99: break;
        case 46: 
          { return MsilTokens._FIELD_KEYWORD;
          }
        case 100: break;
        case 74: 
          { return MsilTokens.FAMORASSEMBLY_KEYWORD;
          }
        case 101: break;
        case 19: 
          { return MsilTokens.COMMA;
          }
        case 102: break;
        case 2: 
          { return MsilTokens.WHITE_SPACE;
          }
        case 103: break;
        case 60: 
          { return MsilTokens.EXTENDS_KEYWORD;
          }
        case 104: break;
        case 42: 
          { return MsilTokens.VALUE_KEYWORD;
          }
        case 105: break;
        case 8: 
          { return MsilTokens.LBRACE;
          }
        case 106: break;
        case 44: 
          { return MsilTokens._ADDON_KEYWORD;
          }
        case 107: break;
        case 3: 
          { return MsilTokens.BACKSLASH;
          }
        case 108: break;
        case 34: 
          { return MsilTokens.BRACKET_OPT_KEYWORD;
          }
        case 109: break;
        case 25: 
          { return MsilTokens.INT_KEYWORD;
          }
        case 110: break;
        case 14: 
          { return MsilTokens.RBRACKET;
          }
        case 111: break;
        case 41: 
          { return MsilTokens.INT32_KEYWORD;
          }
        case 112: break;
        case 37: 
          { return MsilTokens.FLOAT_KEYWORD;
          }
        case 113: break;
        case 57: 
          { return MsilTokens._CUSTOM_KEYWORD;
          }
        case 114: break;
        case 20: 
          { return MsilTokens.PLUS;
          }
        case 115: break;
        case 33: 
          { return MsilTokens.BRACKET_OUT_KEYWORD;
          }
        case 116: break;
        case 70: 
          { return MsilTokens.HIDEBYSIG_KEYWORD;
          }
        case 117: break;
        case 18: 
          { return MsilTokens.AND;
          }
        case 118: break;
        case 12: 
          { return MsilTokens.EXCL;
          }
        case 119: break;
        case 32: 
          { return MsilTokens.BOOL_KEYWORD;
          }
        case 120: break;
        case 68: 
          { return MsilTokens._PROPERTY_KEYWORD;
          }
        case 121: break;
        case 72: 
          { return MsilTokens.PROTECTED_KEYWORD;
          }
        case 122: break;
        case 59: 
          { return MsilTokens.LITERAL_KEYWORD;
          }
        case 123: break;
        case 69: 
          { return MsilTokens._REMOVEON_KEYWORD;
          }
        case 124: break;
        case 40: 
          { return MsilTokens.INT64_KEYWORD;
          }
        case 125: break;
        case 13: 
          { return MsilTokens.LBRACKET;
          }
        case 126: break;
        case 76: 
          { return MsilTokens.SPECIALNAME_KEYWORD;
          }
        case 127: break;
        case 77: 
          { return MsilTokens.SERIALIZABLE_KEYWORD;
          }
        case 128: break;
        case 30: 
          { return MsilTokens.INT8_KEYWORD;
          }
        case 129: break;
        case 39: 
          { return MsilTokens.INT16_KEYWORD;
          }
        case 130: break;
        case 66: 
          { return MsilTokens.INITONLY_KEYWORD;
          }
        case 131: break;
        case 47: 
          { return MsilTokens._PARAM_KEYWORD;
          }
        case 132: break;
        case 5: 
          { return MsilTokens.NUMBER;
          }
        case 133: break;
        case 17: 
          { return MsilTokens.EQ;
          }
        case 134: break;
        case 38: 
          { return MsilTokens.FINAL_KEYWORD;
          }
        case 135: break;
        case 71: 
          { return MsilTokens.INTERFACE_KEYWORD;
          }
        case 136: break;
        case 49: 
          { return MsilTokens.STRING_KEYWORD;
          }
        case 137: break;
        case 43: 
          { return MsilTokens._CLASS_KEYWORD;
          }
        case 138: break;
        case 61: 
          { return MsilTokens.FLOAT64_KEYWORD;
          }
        case 139: break;
        case 56: 
          { return MsilTokens.NESTED_KEYWORD;
          }
        case 140: break;
        case 29: 
          { return MsilTokens.UINT_KEYWORD;
          }
        case 141: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 142: break;
        case 21: 
          { return MsilTokens.MINUS;
          }
        case 143: break;
        case 26: 
          { return MsilTokens._SET_KEYWORD;
          }
        case 144: break;
        case 23: 
          { return MsilTokens.BLOCK_COMMENT;
          }
        case 145: break;
        case 53: 
          { return MsilTokens.UINT32_KEYWORD;
          }
        case 146: break;
        case 75: 
          { return MsilTokens.IMPLEMENTS_KEYWORD;
          }
        case 147: break;
        case 27: 
          { return MsilTokens._GET_KEYWORD;
          }
        case 148: break;
        case 78: 
          { return MsilTokens.RTSPECIALNAME_KEYWORD;
          }
        case 149: break;
        case 36: 
          { return MsilTokens.UINT8_KEYWORD;
          }
        case 150: break;
        case 22: 
          { return MsilTokens.LINE_COMMENT;
          }
        case 151: break;
        case 65: 
          { return MsilTokens.ABSTRACT_KEYWORD;
          }
        case 152: break;
        case 50: 
          { return MsilTokens.SEALED_KEYWORD;
          }
        case 153: break;
        case 4: 
          { return MsilTokens.PERC;
          }
        case 154: break;
        case 67: 
          { return MsilTokens._ASSEMBLY_KEYWORD;
          }
        case 155: break;
        case 16: 
          { return MsilTokens.RPAR;
          }
        case 156: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
