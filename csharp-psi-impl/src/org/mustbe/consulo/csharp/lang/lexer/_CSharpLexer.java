/* The following code was generated by JFlex 1.4.3 on 18.12.13 13:02 */

package org.mustbe.consulo.csharp.lang.lexer;

import java.util.*;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.mustbe.consulo.csharp.lang.psi.CSharpTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18.12.13 13:02 from the specification file
 * <tt>_CSharpLexer.flex</tt>
 */
class _CSharpLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MACRO = 2;
  public static final int MACRO_ENTERED = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\14\1\3\1\13\1\0\1\3\1\5\16\14\4\0\1\3\1\0"+
    "\1\11\1\41\1\2\2\0\1\7\1\65\1\66\1\6\1\36\1\74"+
    "\1\36\1\33\1\4\1\22\11\1\1\72\1\73\1\67\1\71\1\70"+
    "\1\0\1\12\1\17\1\26\1\17\1\32\1\35\1\30\5\2\1\21"+
    "\3\2\1\40\7\2\1\24\2\2\1\63\1\10\1\64\1\0\1\15"+
    "\1\0\1\16\1\25\1\54\1\31\1\34\1\27\1\45\1\55\1\42"+
    "\1\57\1\2\1\20\1\56\1\43\1\46\1\37\1\2\1\44\1\50"+
    "\1\51\1\47\1\52\1\60\1\23\1\53\1\2\1\61\1\0\1\62"+
    "\1\0\41\14\2\0\4\2\4\0\1\2\2\0\1\14\7\0\1\2"+
    "\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u013f\2\31\0\162\2"+
    "\4\0\14\2\16\0\5\2\11\0\1\2\21\0\130\14\5\0\23\14"+
    "\12\0\1\2\13\0\1\2\1\0\3\2\1\0\1\2\1\0\24\2"+
    "\1\0\54\2\1\0\46\2\1\0\5\2\4\0\202\2\1\0\4\14"+
    "\3\0\105\2\1\0\46\2\2\0\2\2\6\0\20\2\41\0\46\2"+
    "\2\0\1\2\7\0\47\2\11\0\21\14\1\0\27\14\1\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\1\14\13\0\33\2\5\0\3\2"+
    "\15\0\4\14\14\0\6\14\13\0\32\2\5\0\13\2\16\14\7\0"+
    "\12\14\4\0\2\2\1\14\143\2\1\0\1\2\10\14\1\0\6\14"+
    "\2\2\2\14\1\0\4\14\2\2\12\14\3\2\2\0\1\2\17\0"+
    "\1\14\1\2\1\14\36\2\33\14\2\0\3\2\60\0\46\2\13\14"+
    "\1\2\u014f\0\3\14\66\2\2\0\1\14\1\2\20\14\2\0\1\2"+
    "\4\14\3\0\12\2\2\14\2\0\12\14\21\0\3\14\1\0\10\2"+
    "\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2"+
    "\2\0\1\14\1\2\7\14\2\0\2\14\2\0\3\14\11\0\1\14"+
    "\4\0\2\2\1\0\3\2\2\14\2\0\12\14\4\2\15\0\3\14"+
    "\1\0\6\2\4\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2"+
    "\1\0\2\2\1\0\2\2\2\0\1\14\1\0\5\14\4\0\2\14"+
    "\2\0\3\14\13\0\4\2\1\0\1\2\7\0\14\14\3\2\14\0"+
    "\3\14\1\0\11\2\1\0\3\2\1\0\26\2\1\0\7\2\1\0"+
    "\2\2\1\0\5\2\2\0\1\14\1\2\10\14\1\0\3\14\1\0"+
    "\3\14\2\0\1\2\17\0\2\2\2\14\2\0\12\14\1\0\1\2"+
    "\17\0\3\14\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2"+
    "\1\0\2\2\1\0\5\2\2\0\1\14\1\2\6\14\3\0\2\14"+
    "\2\0\3\14\10\0\2\14\4\0\2\2\1\0\3\2\4\0\12\14"+
    "\1\0\1\2\20\0\1\14\1\2\1\0\6\2\3\0\3\2\1\0"+
    "\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3\0\2\2\3\0"+
    "\3\2\3\0\10\2\1\0\3\2\4\0\5\14\3\0\3\14\1\0"+
    "\4\14\11\0\1\14\17\0\11\14\11\0\1\2\7\0\3\14\1\0"+
    "\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2\4\0"+
    "\7\14\1\0\3\14\1\0\4\14\7\0\2\14\11\0\2\2\4\0"+
    "\12\14\22\0\2\14\1\0\10\2\1\0\3\2\1\0\27\2\1\0"+
    "\12\2\1\0\5\2\2\0\1\14\1\2\7\14\1\0\3\14\1\0"+
    "\4\14\7\0\2\14\7\0\1\2\1\0\2\2\4\0\12\14\22\0"+
    "\2\14\1\0\10\2\1\0\3\2\1\0\27\2\1\0\20\2\4\0"+
    "\6\14\2\0\3\14\1\0\4\14\11\0\1\14\10\0\2\2\4\0"+
    "\12\14\22\0\2\14\1\0\22\2\3\0\30\2\1\0\11\2\1\0"+
    "\1\2\2\0\7\2\3\0\1\14\4\0\6\14\1\0\1\14\1\0"+
    "\10\14\22\0\2\14\15\0\60\2\1\14\2\2\7\14\4\0\10\2"+
    "\10\14\1\0\12\14\47\0\2\2\1\0\1\2\2\0\2\2\1\0"+
    "\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0"+
    "\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\14\2\2\6\14"+
    "\1\0\2\14\1\2\2\0\5\2\1\0\1\2\1\0\6\14\2\0"+
    "\12\14\2\0\2\2\42\0\1\2\27\0\2\14\6\0\12\14\13\0"+
    "\1\14\1\0\1\14\1\0\1\14\4\0\2\14\10\2\1\0\42\2"+
    "\6\0\24\14\1\0\2\14\4\2\4\0\10\14\1\0\44\14\11\0"+
    "\1\14\71\0\42\2\1\0\5\2\1\0\2\2\1\0\7\14\3\0"+
    "\4\14\6\0\12\14\6\0\6\2\4\14\106\0\46\2\12\0\51\2"+
    "\7\0\132\2\5\0\104\2\5\0\122\2\6\0\7\2\1\0\77\2"+
    "\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2"+
    "\2\0\47\2\1\0\1\2\1\0\4\2\2\0\37\2\1\0\1\2"+
    "\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\7\2"+
    "\1\0\7\2\1\0\27\2\1\0\37\2\1\0\1\2\1\0\4\2"+
    "\2\0\7\2\1\0\47\2\1\0\23\2\16\0\11\14\56\0\125\2"+
    "\14\0\u026c\2\2\0\10\2\12\0\32\2\5\0\113\2\3\0\3\2"+
    "\17\0\15\2\1\0\4\2\3\14\13\0\22\2\3\14\13\0\22\2"+
    "\2\14\14\0\15\2\1\0\3\2\1\0\2\14\14\0\64\2\40\14"+
    "\3\0\1\2\3\0\2\2\1\14\2\0\12\14\41\0\3\14\2\0"+
    "\12\14\6\0\130\2\10\0\51\2\1\14\126\0\35\2\3\0\14\14"+
    "\4\0\14\14\12\0\12\14\36\2\2\0\5\2\u038b\0\154\2\224\0"+
    "\234\2\4\0\132\2\6\0\26\2\2\0\6\2\2\0\46\2\2\0"+
    "\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0"+
    "\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2\1\0"+
    "\7\2\17\0\4\14\32\0\5\14\20\0\2\2\23\0\1\2\13\0"+
    "\4\14\6\0\6\14\1\0\1\2\15\0\1\2\40\0\22\2\36\0"+
    "\15\14\4\0\1\14\3\0\6\14\27\0\1\2\4\0\1\2\2\0"+
    "\12\2\1\0\1\2\3\0\5\2\6\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\4\2\1\0\3\2\1\0\7\2\3\0\3\2\5\0"+
    "\5\2\26\0\44\2\u0e81\0\3\2\31\0\11\2\6\14\1\0\5\2"+
    "\2\0\5\2\4\0\126\2\2\0\2\14\2\0\3\2\1\0\137\2"+
    "\5\0\50\2\4\0\136\2\21\0\30\2\70\0\20\2\u0200\0\u19b6\2"+
    "\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2\2\0\73\2"+
    "\225\0\7\2\14\0\5\2\5\0\1\2\1\14\12\2\1\0\15\2"+
    "\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0\154\2"+
    "\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0\15\2\3\0\20\14"+
    "\20\0\4\14\17\0\2\2\30\0\3\2\31\0\1\2\6\0\5\2"+
    "\1\0\207\2\2\0\1\14\4\0\1\2\13\0\12\14\7\0\32\2"+
    "\4\0\1\2\1\0\32\2\12\0\132\2\3\0\6\2\2\0\6\2"+
    "\2\0\6\2\2\0\3\2\3\0\2\2\3\0\2\2\22\0\3\14"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\1\2\3\1\2\3\3\1\10\2\3\1\11"+
    "\11\3\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\4\2\26\1\1"+
    "\1\27\1\30\1\31\3\32\1\33\1\34\2\6\2\7"+
    "\1\35\2\3\2\2\15\3\1\36\26\3\1\37\5\0"+
    "\1\32\1\33\1\40\1\34\2\35\2\3\1\2\1\0"+
    "\17\3\1\41\1\3\1\42\2\3\1\43\1\3\1\44"+
    "\23\3\2\0\1\45\2\0\1\3\1\46\1\0\1\47"+
    "\1\50\6\3\1\51\7\3\1\52\4\3\1\53\11\3"+
    "\1\54\3\3\1\55\2\3\1\56\3\0\1\34\1\3"+
    "\1\57\5\3\1\60\11\3\1\61\1\3\1\62\1\3"+
    "\1\63\4\3\1\64\3\3\1\65\1\66\4\0\3\3"+
    "\1\67\1\3\1\70\1\71\2\3\1\72\4\3\1\73"+
    "\1\3\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\2\3\1\0\1\103\2\0\2\3\1\104\1\105\1\106"+
    "\6\3\1\107\1\3\1\110\1\0\1\111\1\112\1\113"+
    "\2\3\1\114\1\3\1\115\1\116\1\117\1\0\1\120"+
    "\1\121\1\122\1\0\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\267\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\267\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\267"+
    "\0\267\0\267\0\267\0\267\0\267\0\267\0\267\0\267"+
    "\0\u06e9\0\267\0\267\0\u0726\0\u0763\0\267\0\u07a0\0\u07dd"+
    "\0\267\0\267\0\267\0\u081a\0\u0857\0\u0894\0\u08d1\0\267"+
    "\0\u090e\0\u094b\0\267\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c"+
    "\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64"+
    "\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034"+
    "\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c"+
    "\0\u1259\0\u1296\0\u12d3\0\u1310\0\267\0\u07a0\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\267"+
    "\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d"+
    "\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905"+
    "\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u0131\0\u1a73\0\u1ab0"+
    "\0\u0131\0\u1aed\0\u0131\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e"+
    "\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06"+
    "\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee"+
    "\0\267\0\u202b\0\u2068\0\u20a5\0\u0131\0\u20e2\0\u0131\0\u0131"+
    "\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u0131\0\u228d"+
    "\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u0131\0\u2438"+
    "\0\u2475\0\u24b2\0\u24ef\0\u0131\0\u252c\0\u2569\0\u25a6\0\u25e3"+
    "\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u0131\0\u2751\0\u278e"+
    "\0\u27cb\0\u0131\0\u2808\0\u2845\0\u0131\0\u2882\0\u28bf\0\u28fc"+
    "\0\267\0\u2939\0\u0131\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a"+
    "\0\u0131\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15"+
    "\0\u2c52\0\u2c8f\0\u0131\0\u2ccc\0\u0131\0\u2d09\0\u0131\0\u2d46"+
    "\0\u2d83\0\u2dc0\0\u2dfd\0\u0131\0\u2e3a\0\u2e77\0\u2eb4\0\u0131"+
    "\0\u0131\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f"+
    "\0\u0131\0\u309c\0\u0131\0\u0131\0\u30d9\0\u3116\0\u0131\0\u3153"+
    "\0\u3190\0\u31cd\0\u320a\0\u0131\0\u3247\0\u0131\0\u0131\0\u0131"+
    "\0\u0131\0\u0131\0\u0131\0\u0131\0\u3284\0\u32c1\0\u32fe\0\267"+
    "\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u0131\0\u0131\0\u0131\0\u342f"+
    "\0\u346c\0\u34a9\0\u34e6\0\u3523\0\u3560\0\u0131\0\u359d\0\267"+
    "\0\u35da\0\267\0\u0131\0\u0131\0\u3617\0\u3654\0\u0131\0\u3691"+
    "\0\u0131\0\u0131\0\u0131\0\u36ce\0\u0131\0\u0131\0\u0131\0\u370b"+
    "\0\267";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\7\1\11\1\12"+
    "\1\4\1\13\1\14\1\7\1\4\1\6\1\15\1\6"+
    "\1\16\1\6\1\17\2\6\1\20\1\6\1\21\1\6"+
    "\1\22\1\6\1\23\1\24\1\6\1\4\1\25\1\6"+
    "\1\26\1\27\1\30\1\31\1\6\1\32\1\33\1\34"+
    "\1\35\1\36\1\6\1\37\4\6\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\3\4\1\54\1\4\1\55\5\4\1\56\25\4"+
    "\1\57\35\4\1\60\1\54\1\4\1\55\5\4\1\56"+
    "\1\4\5\60\1\4\10\60\1\4\2\60\1\4\2\60"+
    "\1\4\17\60\14\4\76\0\1\5\13\0\1\5\2\0"+
    "\2\61\1\5\4\0\2\62\2\63\1\64\2\65\40\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\17\0\1\7\1\0\1\7\5\0\1\7\65\0"+
    "\1\66\1\0\1\67\66\0\5\12\1\0\1\12\1\70"+
    "\1\71\2\12\1\0\61\12\5\13\1\0\2\13\1\72"+
    "\1\73\1\13\1\0\61\13\11\0\1\74\64\0\2\6"+
    "\11\0\11\6\1\75\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\15\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\4\6\1\76\12\6\15\0\1\5"+
    "\13\0\1\5\2\0\2\61\1\5\2\77\2\100\2\62"+
    "\2\63\1\64\2\65\40\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\4\6\1\101\4\6\1\102"+
    "\5\6\15\0\2\6\11\0\2\6\1\103\1\6\1\104"+
    "\12\6\1\0\2\6\1\0\2\6\1\0\17\6\15\0"+
    "\2\6\11\0\17\6\1\0\1\105\1\6\1\0\2\6"+
    "\1\0\4\6\1\106\4\6\1\107\5\6\15\0\1\64"+
    "\20\0\1\64\53\0\2\6\11\0\7\6\1\110\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\6\1\111\6\6"+
    "\1\112\6\6\15\0\2\6\11\0\2\6\1\113\14\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\1\114\2\6"+
    "\1\115\11\6\15\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\116\15\6\15\0\2\6"+
    "\11\0\2\6\1\117\14\6\1\0\1\120\1\6\1\0"+
    "\2\6\1\0\5\6\1\121\11\6\15\0\2\6\11\0"+
    "\17\6\1\0\1\122\1\6\1\0\2\6\1\0\17\6"+
    "\15\0\2\6\11\0\11\6\1\123\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\5\6\1\124\2\6\1\125\6\6"+
    "\15\0\2\6\11\0\4\6\1\126\12\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\127\1\130\4\6\1\131\10\6"+
    "\15\0\2\6\11\0\11\6\1\132\5\6\1\0\1\133"+
    "\1\6\1\0\2\6\1\0\7\6\1\134\3\6\1\135"+
    "\3\6\15\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\136\6\6\1\137\5\6\15\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\140\3\6\1\141\12\6\15\0\2\6\11\0\4\6"+
    "\1\142\12\6\1\0\2\6\1\0\2\6\1\0\4\6"+
    "\1\143\6\6\1\144\3\6\106\0\1\145\5\0\1\54"+
    "\104\0\1\56\64\0\1\146\1\0\1\146\5\0\1\146"+
    "\15\0\1\147\2\0\1\150\5\0\1\151\1\0\1\152"+
    "\31\0\2\60\11\0\17\60\1\0\2\60\1\0\2\60"+
    "\1\0\17\60\15\0\1\64\13\0\1\64\4\0\1\64"+
    "\4\0\2\62\2\63\1\0\2\65\40\0\1\153\13\0"+
    "\1\153\4\0\1\153\4\0\2\62\2\63\3\0\1\153"+
    "\36\0\4\154\1\155\1\0\5\154\1\0\61\154\6\156"+
    "\1\0\66\156\5\12\1\0\5\12\1\0\61\12\5\13"+
    "\1\0\5\13\1\0\61\13\5\74\1\0\2\74\1\157"+
    "\1\160\63\74\1\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\1\161\10\6\15\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\162\15\6\15\0\1\163\13\0\3\163\2\61\1\163"+
    "\2\0\6\163\1\164\2\163\16\0\1\163\21\0\1\100"+
    "\13\0\1\100\2\0\2\61\1\100\53\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\4\6\1\165"+
    "\12\6\15\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\7\6\1\166\7\6\15\0\2\6\11\0"+
    "\4\6\1\167\12\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\15\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\4\6\1\170\12\6\15\0\2\6\11\0"+
    "\4\6\1\171\12\6\1\0\2\6\1\0\2\6\1\0"+
    "\12\6\1\172\4\6\15\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\5\6\1\173\11\6\15\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\6\1\174\15\6\15\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\7\6\1\175\7\6\15\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\5\6\1\176\11\6\15\0\2\6\11\0\17\6\1\0"+
    "\1\177\1\6\1\0\2\6\1\0\17\6\15\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\200\14\6\15\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\201\3\6\1\202\12\6\15\0"+
    "\2\6\11\0\11\6\1\203\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\17\6\15\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\7\6\1\204\7\6\15\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\14\6\1\205\2\6\15\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\16\6\1\206\15\0\2\6"+
    "\11\0\4\6\1\207\12\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\15\0\2\6\11\0\2\6\1\210\10\6"+
    "\1\211\3\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\15\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\15\6\1\212\1\6\15\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\7\6\1\213\7\6"+
    "\15\0\2\6\11\0\17\6\1\0\1\214\1\6\1\0"+
    "\2\6\1\0\17\6\15\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\4\6\1\215\12\6\15\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\6\1\216\15\6\15\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\1\217\10\6\15\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\220\12\6\1\221\3\6\15\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\11\6\1\222\5\6"+
    "\15\0\2\6\11\0\2\6\1\223\14\6\1\0\2\6"+
    "\1\0\2\6\1\0\17\6\15\0\2\6\11\0\2\6"+
    "\1\224\14\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\225\14\6\15\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\4\6\1\226\12\6\15\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\5\6"+
    "\1\227\11\6\15\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\1\230\1\6\1\0\17\6\15\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\2\6\1\231"+
    "\14\6\15\0\2\6\11\0\4\6\1\232\12\6\1\0"+
    "\2\6\1\0\2\6\1\0\1\233\16\6\15\0\2\6"+
    "\11\0\2\6\1\234\14\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\15\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\235\15\6\15\0\2\6"+
    "\11\0\2\6\1\236\14\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\50\0\1\237\103\0\1\240\60\0\1\241"+
    "\101\0\1\242\41\0\1\153\13\0\1\153\4\0\1\153"+
    "\4\0\2\62\2\63\42\0\5\154\1\0\5\154\1\0"+
    "\61\154\5\155\1\0\5\155\1\0\61\155\6\156\1\243"+
    "\66\156\5\74\1\0\5\74\1\0\61\74\1\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\7\6"+
    "\1\244\7\6\15\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\3\6\1\245\13\6\15\0\1\163"+
    "\13\0\3\163\2\61\1\163\2\0\6\163\1\246\2\163"+
    "\1\0\2\65\13\0\1\163\21\0\1\246\13\0\3\246"+
    "\2\0\1\246\2\0\6\246\1\0\2\246\16\0\1\246"+
    "\21\0\2\6\11\0\4\6\1\247\12\6\1\0\2\6"+
    "\1\0\2\6\1\0\17\6\15\0\2\6\11\0\17\6"+
    "\1\0\1\250\1\6\1\0\2\6\1\0\17\6\15\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\6\6\1\227\10\6\15\0\2\6\11\0\2\6\1\251"+
    "\14\6\1\0\2\6\1\0\2\6\1\0\17\6\15\0"+
    "\2\6\11\0\17\6\1\0\1\252\1\6\1\0\2\6"+
    "\1\0\17\6\15\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\253\16\6\15\0\2\6\11\0"+
    "\11\6\1\254\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\15\0\2\6\11\0\2\6\1\255\14\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\15\0\2\6\11\0"+
    "\17\6\1\0\1\256\1\6\1\0\2\6\1\0\17\6"+
    "\15\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\14\6\1\257\2\6\15\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\6\1\260\15\6"+
    "\15\0\2\6\11\0\2\6\1\261\14\6\1\0\2\6"+
    "\1\0\2\6\1\0\17\6\15\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\10\6\1\262\6\6"+
    "\15\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\7\6\1\263\7\6\15\0\2\6\11\0\4\6"+
    "\1\264\12\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\15\0\2\6\11\0\17\6\1\0\1\265\1\6\1\0"+
    "\2\6\1\0\17\6\15\0\2\6\11\0\17\6\1\0"+
    "\1\266\1\6\1\0\2\6\1\0\17\6\15\0\2\6"+
    "\11\0\4\6\1\267\12\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\15\0\2\6\11\0\15\6\1\270\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\15\0\2\6"+
    "\11\0\17\6\1\0\1\271\1\6\1\0\2\6\1\0"+
    "\17\6\15\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\272\14\6\15\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\1\6\1\273"+
    "\15\6\15\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\7\6\1\274\7\6\15\0\2\6\11\0"+
    "\2\6\1\275\14\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\15\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\276\15\6\15\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\4\6\1\277"+
    "\12\6\15\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\7\6\1\300\7\6\15\0\2\6\11\0"+
    "\4\6\1\301\12\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\15\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\7\6\1\302\7\6\15\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\1\303\4\6"+
    "\1\304\11\6\15\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\305\14\6\15\0\2\6"+
    "\11\0\17\6\1\0\1\306\1\6\1\0\2\6\1\0"+
    "\17\6\15\0\2\6\11\0\17\6\1\0\1\307\1\6"+
    "\1\0\2\6\1\0\17\6\15\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\7\6\1\310\7\6"+
    "\15\0\2\6\11\0\2\6\1\311\14\6\1\0\2\6"+
    "\1\0\2\6\1\0\17\6\15\0\2\6\11\0\15\6"+
    "\1\312\1\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\15\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\1\313\10\6\15\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\1\314\10\6"+
    "\15\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\315\14\6\43\0\1\316\76\0\1\317"+
    "\110\0\1\320\27\0\4\156\1\321\1\156\1\243\66\156"+
    "\1\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\322\14\6\15\0\1\246\13\0\3\246"+
    "\2\0\1\246\2\0\6\246\1\0\2\246\1\0\2\65"+
    "\13\0\1\246\21\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\7\6\1\323\7\6\15\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\3\6"+
    "\1\324\13\6\15\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\14\6\1\325\2\6\15\0\2\6"+
    "\11\0\4\6\1\326\12\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\15\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\14\6\1\327\2\6\15\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\330\14\6\15\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\7\6\1\331\7\6\15\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\14\6"+
    "\1\332\2\6\15\0\2\6\11\0\2\6\1\333\14\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\15\0\2\6"+
    "\11\0\17\6\1\0\1\334\1\6\1\0\2\6\1\0"+
    "\17\6\15\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\335\16\6\15\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\1\336\14\6"+
    "\15\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\1\337\10\6\15\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\4\6\1\340\12\6"+
    "\15\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\12\6\1\341\4\6\15\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\1\342\14\6"+
    "\15\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\3\6\1\343\13\6\15\0\2\6\11\0\13\6"+
    "\1\344\3\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\15\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\3\6\1\345\13\6\15\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\1\346\14\6"+
    "\15\0\2\6\11\0\17\6\1\0\1\347\1\6\1\0"+
    "\2\6\1\0\17\6\15\0\2\6\11\0\17\6\1\0"+
    "\1\350\1\6\1\0\2\6\1\0\17\6\15\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\1\351"+
    "\16\6\15\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\352\15\6\15\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\12\6\1\353"+
    "\4\6\15\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\7\6\1\354\7\6\15\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\4\6\1\355"+
    "\12\6\15\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\5\6\1\356\11\6\15\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\7\6\1\357"+
    "\7\6\15\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\6\6\1\360\10\6\15\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\7\6\1\361"+
    "\7\6\56\0\1\362\74\0\1\363\1\0\1\364\72\0"+
    "\1\365\33\0\2\6\11\0\2\6\1\366\14\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\15\0\2\6\11\0"+
    "\2\6\1\367\14\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\15\0\2\6\11\0\2\6\1\370\14\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\15\0\2\6\11\0"+
    "\17\6\1\0\1\371\1\6\1\0\2\6\1\0\17\6"+
    "\15\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\372\16\6\15\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\1\6\1\373\15\6\15\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\6\6\1\374\10\6\15\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\7\6\1\375\7\6\15\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\12\6\1\376\4\6\15\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\12\6\1\377\4\6\15\0"+
    "\2\6\11\0\13\6\1\u0100\3\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\u0101\15\6\15\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\1\u0102\1\6\1\0\17\6"+
    "\15\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\u0103\15\6\15\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\7\6\1\u0104\7\6"+
    "\15\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\u0105\16\6\15\0\2\6\11\0\17\6\1\0"+
    "\1\u0106\1\6\1\0\2\6\1\0\17\6\15\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\7\6"+
    "\1\u0107\7\6\15\0\2\6\11\0\15\6\1\u0108\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\15\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\12\6"+
    "\1\u0109\4\6\15\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\3\6\1\u010a\13\6\15\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\7\6"+
    "\1\u010b\7\6\15\0\2\6\11\0\13\6\1\u010c\3\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\15\0\2\6"+
    "\11\0\2\6\1\u010d\14\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\15\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\u010e\16\6\57\0\1\u010f\60\0"+
    "\1\u0110\101\0\1\u0111\106\0\1\u0112\27\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\12\6\1\u0113"+
    "\4\6\15\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\7\6\1\u0114\7\6\15\0\2\6\11\0"+
    "\4\6\1\u0115\12\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\15\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\12\6\1\u0116\4\6\15\0\2\6\11\0"+
    "\17\6\1\0\1\u0117\1\6\1\0\2\6\1\0\17\6"+
    "\15\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\7\6\1\u0118\7\6\15\0\2\6\11\0\2\6"+
    "\1\u0119\14\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\15\0\2\6\11\0\2\6\1\u011a\14\6\1\0\2\6"+
    "\1\0\2\6\1\0\17\6\15\0\2\6\11\0\2\6"+
    "\1\u011b\14\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\15\0\2\6\11\0\4\6\1\u011c\12\6\1\0\2\6"+
    "\1\0\2\6\1\0\17\6\15\0\2\6\11\0\15\6"+
    "\1\u011d\1\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\15\0\2\6\11\0\4\6\1\u011e\12\6\1\0\2\6"+
    "\1\0\2\6\1\0\17\6\15\0\2\6\11\0\4\6"+
    "\1\u011f\12\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\50\0\1\u0120\105\0\1\u0121\72\0\1\u0122\32\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\7\6"+
    "\1\u0123\7\6\15\0\2\6\11\0\17\6\1\0\1\u0124"+
    "\1\6\1\0\2\6\1\0\17\6\15\0\2\6\11\0"+
    "\17\6\1\0\1\u0125\1\6\1\0\2\6\1\0\17\6"+
    "\15\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\12\6\1\u0126\4\6\15\0\2\6\11\0\4\6"+
    "\1\u0127\12\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\15\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\12\6\1\u0128\4\6\15\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\11\6\1\u0129\5\6"+
    "\15\0\2\6\11\0\17\6\1\0\1\u012a\1\6\1\0"+
    "\2\6\1\0\17\6\15\0\2\6\11\0\17\6\1\0"+
    "\1\u012b\1\6\1\0\2\6\1\0\17\6\56\0\1\u012c"+
    "\33\0\2\6\11\0\15\6\1\u012d\1\6\1\0\2\6"+
    "\1\0\2\6\1\0\17\6\15\0\2\6\11\0\17\6"+
    "\1\0\1\u012e\1\6\1\0\2\6\1\0\17\6\15\0"+
    "\2\6\11\0\17\6\1\0\1\u012f\1\6\1\0\2\6"+
    "\1\0\17\6\62\0\1\u0130\71\0\1\u0131\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14152];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\14\1\1\11\11\1\11\11"+
    "\1\1\2\11\2\1\1\11\2\1\3\11\4\1\1\11"+
    "\2\1\1\11\51\1\1\11\5\0\5\1\1\11\3\1"+
    "\1\0\52\1\2\0\1\11\2\0\2\1\1\0\47\1"+
    "\3\0\1\11\40\1\4\0\31\1\1\0\1\11\2\0"+
    "\15\1\1\11\1\0\1\11\11\1\1\0\3\1\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _CSharpLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CSharpLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1782) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 74: 
          { return CSharpTokens.ABSTRACT_KEYWORD;
          }
        case 84: break;
        case 43: 
          { return CSharpTokens.UINT_KEYWORD;
          }
        case 85: break;
        case 7: 
          { return CSharpTokens.STRING_LITERAL;
          }
        case 86: break;
        case 14: 
          { return CSharpTokens.LPAR;
          }
        case 87: break;
        case 1: 
          { return CSharpTokens.BAD_CHARACTER;
          }
        case 88: break;
        case 76: 
          { return CSharpTokens.INTERNAL_KEYWORD;
          }
        case 89: break;
        case 72: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_DEFINE_KEYWORD;
          }
        case 90: break;
        case 27: 
          { return CSharpTokens.LINE_COMMENT;
          }
        case 91: break;
        case 78: 
          { return CSharpTokens.OVERRIDE_KEYWORD;
          }
        case 92: break;
        case 48: 
          { return CSharpTokens.EVENT_KEYWORD;
          }
        case 93: break;
        case 50: 
          { return CSharpTokens.USING_KEYWORD;
          }
        case 94: break;
        case 47: 
          { return CSharpTokens.FLOAT_KEYWORD;
          }
        case 95: break;
        case 67: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_ENDIF_KEYWORD;
          }
        case 96: break;
        case 19: 
          { return CSharpTokens.COLON;
          }
        case 97: break;
        case 46: 
          { return CSharpTokens.CHAR_KEYWORD;
          }
        case 98: break;
        case 70: 
          { return CSharpTokens.PRIVATE_KEYWORD;
          }
        case 99: break;
        case 61: 
          { return CSharpTokens.USHORT_KEYWORD;
          }
        case 100: break;
        case 57: 
          { return CSharpTokens.PARAMS_KEYWORD;
          }
        case 101: break;
        case 31: 
          { return CSharpTokens.COLONCOLON;
          }
        case 102: break;
        case 71: 
          { return CSharpTokens.VIRTUAL_KEYWORD;
          }
        case 103: break;
        case 3: 
          { return CSharpTokens.IDENTIFIER;
          }
        case 104: break;
        case 16: 
          { return CSharpTokens.LT;
          }
        case 105: break;
        case 64: 
          { return CSharpTokens.STRING_KEYWORD;
          }
        case 106: break;
        case 4: 
          { return CSharpTokens.WHITE_SPACE;
          }
        case 107: break;
        case 30: 
          { return CSharpTokens.IN_KEYWORD;
          }
        case 108: break;
        case 55: 
          { return CSharpTokens.DOUBLE_KEYWORD;
          }
        case 109: break;
        case 6: 
          { return CSharpTokens.CHARACTER_LITERAL;
          }
        case 110: break;
        case 21: 
          { return CSharpTokens.COMMA;
          }
        case 111: break;
        case 75: 
          { return CSharpTokens.DELEGATE_KEYWORD;
          }
        case 112: break;
        case 40: 
          { return CSharpTokens.BYTE_KEYWORD;
          }
        case 113: break;
        case 45: 
          { return CSharpTokens.VOID_KEYWORD;
          }
        case 114: break;
        case 33: 
          { return CSharpTokens.INT_KEYWORD;
          }
        case 115: break;
        case 68: 
          { return CSharpTokens.DECIMAL_KEYWORD;
          }
        case 116: break;
        case 11: 
          { return CSharpTokens.RBRACE;
          }
        case 117: break;
        case 10: 
          { return CSharpTokens.LBRACE;
          }
        case 118: break;
        case 17: 
          { return CSharpTokens.GT;
          }
        case 119: break;
        case 44: 
          { return CSharpTokens.BOOL_LITERAL;
          }
        case 120: break;
        case 62: 
          { return CSharpTokens.SEALED_KEYWORD;
          }
        case 121: break;
        case 2: 
          { return CSharpTokens.INTEGER_LITERAL;
          }
        case 122: break;
        case 8: 
          { return CSharpTokens.DOT;
          }
        case 123: break;
        case 35: 
          { return CSharpTokens.REF_KEYWORD;
          }
        case 124: break;
        case 29: 
          { return CSharpTokens.VERBATIM_STRING_LITERAL;
          }
        case 125: break;
        case 56: 
          { return CSharpTokens.EXTERN_KEYWORD;
          }
        case 126: break;
        case 24: 
          { return CSharpTokens.LONG_LITERAL;
          }
        case 127: break;
        case 36: 
          { return CSharpTokens.OUT_KEYWORD;
          }
        case 128: break;
        case 77: 
          { return CSharpTokens.READONLY_KEYWORD;
          }
        case 129: break;
        case 9: 
          { yypushback(1);
		yybegin(MACRO);
          }
        case 130: break;
        case 34: 
          { return CSharpTokens.NEW_KEYWORD;
          }
        case 131: break;
        case 20: 
          { return CSharpTokens.SEMICOLON;
          }
        case 132: break;
        case 22: 
          { yybegin(YYINITIAL); return CSharpTokens.MACRO_STOP;
          }
        case 133: break;
        case 51: 
          { return CSharpTokens.SBYTE_KEYWORD;
          }
        case 134: break;
        case 28: 
          { return CSharpTokens.BLOCK_COMMENT;
          }
        case 135: break;
        case 58: 
          { return CSharpTokens.PUBLIC_KEYWORD;
          }
        case 136: break;
        case 65: 
          { return CSharpTokens.STRUCT_KEYWORD;
          }
        case 137: break;
        case 60: 
          { return CSharpTokens.UNSAFE_KEYWORD;
          }
        case 138: break;
        case 23: 
          { return CSharpTokens.MACRO_VALUE;
          }
        case 139: break;
        case 41: 
          { return CSharpTokens.ENUM_KEYWORD;
          }
        case 140: break;
        case 80: 
          { return CSharpTokens.PROTECTED_KEYWORD;
          }
        case 141: break;
        case 42: 
          { return CSharpTokens.NULL_LITERAL;
          }
        case 142: break;
        case 13: 
          { return CSharpTokens.RBRACKET;
          }
        case 143: break;
        case 54: 
          { return CSharpTokens.CONST_KEYWORD;
          }
        case 144: break;
        case 59: 
          { return CSharpTokens.OBJECT_KEYWORD;
          }
        case 145: break;
        case 39: 
          { return CSharpTokens.BOOL_KEYWORD;
          }
        case 146: break;
        case 69: 
          { return CSharpTokens.DYNAMIC_KEYWORD;
          }
        case 147: break;
        case 83: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_ENDREGION_KEYWORD;
          }
        case 148: break;
        case 49: 
          { return CSharpTokens.ULONG_KEYWORD;
          }
        case 149: break;
        case 82: 
          { return CSharpTokens.NAMESPACE_KEYWORD;
          }
        case 150: break;
        case 25: 
          { return CSharpTokens.FLOAT_LITERAL;
          }
        case 151: break;
        case 79: 
          { return CSharpTokens.VOLATILE_KEYWORD;
          }
        case 152: break;
        case 73: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_REGION_KEYWORD;
          }
        case 153: break;
        case 38: 
          { return CSharpTokens.LONG_KEYWORD;
          }
        case 154: break;
        case 37: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_IF_KEYWORD;
          }
        case 155: break;
        case 52: 
          { return CSharpTokens.SHORT_KEYWORD;
          }
        case 156: break;
        case 5: 
          { return CSharpTokens.MUL;
          }
        case 157: break;
        case 63: 
          { return CSharpTokens.STATIC_KEYWORD;
          }
        case 158: break;
        case 81: 
          { return CSharpTokens.INTERFACE_KEYWORD;
          }
        case 159: break;
        case 15: 
          { return CSharpTokens.RPAR;
          }
        case 160: break;
        case 12: 
          { return CSharpTokens.LBRACKET;
          }
        case 161: break;
        case 32: 
          { return CSharpTokens.LINE_DOC_COMMENT;
          }
        case 162: break;
        case 53: 
          { return CSharpTokens.CLASS_KEYWORD;
          }
        case 163: break;
        case 26: 
          { return CSharpTokens.DOUBLE_LITERAL;
          }
        case 164: break;
        case 66: 
          { return CSharpTokens.TYPEOF_KEYWORD;
          }
        case 165: break;
        case 18: 
          { return CSharpTokens.EQ;
          }
        case 166: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
