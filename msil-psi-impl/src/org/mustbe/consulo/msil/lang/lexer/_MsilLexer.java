/* The following code was generated by JFlex 1.4.3 on 19.11.14 4:08 */

package org.mustbe.consulo.msil.lang.lexer;

import org.mustbe.consulo.msil.lang.psi.MsilTokens;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19.11.14 4:08 from the specification file
 * <tt>F:/consulo-dotnet/msil-psi-impl/src/org/mustbe/consulo/msil/lang/lexer/_MsilLexer.flex</tt>
 */
public class _MsilLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\1\1\3\1\0\1\1\1\3\16\7\4\0\1\1\1\20"+
    "\2\0\1\6\1\0\1\27\1\12\1\24\1\25\1\4\1\0\1\30"+
    "\1\0\1\10\1\2\1\5\1\56\1\61\1\60\1\62\1\5\1\57"+
    "\1\5\1\55\1\5\1\21\1\0\1\16\1\26\1\17\2\0\32\6"+
    "\1\22\1\13\1\23\1\0\1\6\1\11\1\33\1\53\1\31\1\43"+
    "\1\41\1\44\1\54\1\42\1\45\1\63\1\6\1\32\1\40\1\52"+
    "\1\37\1\46\1\6\1\47\1\34\1\36\1\35\1\51\1\6\1\64"+
    "\1\50\1\65\1\14\1\0\1\15\1\0\41\7\2\0\4\6\4\0"+
    "\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0"+
    "\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0\5\6\11\0"+
    "\1\6\21\0\130\7\5\0\23\7\12\0\1\6\13\0\1\6\1\0"+
    "\3\6\1\0\1\6\1\0\24\6\1\0\54\6\1\0\46\6\1\0"+
    "\5\6\4\0\202\6\1\0\4\7\3\0\105\6\1\0\46\6\2\0"+
    "\2\6\6\0\20\6\41\0\46\6\2\0\1\6\7\0\47\6\11\0"+
    "\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0\2\7\1\0"+
    "\1\7\13\0\33\6\5\0\3\6\15\0\4\7\14\0\6\7\13\0"+
    "\32\6\5\0\13\6\16\7\7\0\12\7\4\0\2\6\1\7\143\6"+
    "\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6"+
    "\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7"+
    "\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0\3\7\66\6\2\0"+
    "\1\7\1\6\20\7\2\0\1\6\4\7\3\0\12\6\2\7\2\0"+
    "\12\7\21\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\11\0\1\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\4\6\15\0\3\7\1\0\6\6\4\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0\4\6\1\0"+
    "\1\6\7\0\14\7\3\6\14\0\3\7\1\0\11\6\1\0\3\6"+
    "\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7"+
    "\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6"+
    "\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\6\7\3\0\2\7\2\0\3\7\10\0\2\7\4\0"+
    "\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0\1\7\1\6"+
    "\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6"+
    "\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6\1\0\3\6"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7\17\0\11\7"+
    "\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\4\0\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\11\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6"+
    "\1\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\20\6\4\0\6\7\2\0\3\7\1\0\4\7"+
    "\11\0\1\7\10\0\2\6\4\0\12\7\22\0\2\7\1\0\22\6"+
    "\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7"+
    "\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6"+
    "\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6"+
    "\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6"+
    "\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6"+
    "\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6"+
    "\1\0\1\6\1\0\6\7\2\0\12\7\2\0\2\6\42\0\1\6"+
    "\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7"+
    "\4\0\2\7\10\6\1\0\42\6\6\0\24\7\1\0\2\7\4\6"+
    "\4\0\10\7\1\0\44\7\11\0\1\7\71\0\42\6\1\0\5\6"+
    "\1\0\2\6\1\0\7\7\3\0\4\7\6\0\12\7\6\0\6\6"+
    "\4\7\106\0\46\6\12\0\51\6\7\0\132\6\5\0\104\6\5\0"+
    "\122\6\6\0\7\6\1\0\77\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\47\6\1\0\1\6\1\0"+
    "\4\6\2\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\7\6\1\0\27\6\1\0"+
    "\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\47\6\1\0"+
    "\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6\2\0\10\6\12\0"+
    "\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7"+
    "\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6"+
    "\1\7\126\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6"+
    "\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6\6\0\26\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\17\0\4\7\32\0\5\7"+
    "\20\0\2\6\23\0\1\6\13\0\4\7\6\0\6\7\1\0\1\6"+
    "\15\0\1\6\40\0\22\6\36\0\15\7\4\0\1\7\3\0\6\7"+
    "\27\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\3\6"+
    "\1\0\7\6\3\0\3\6\5\0\5\6\26\0\44\6\u0e81\0\3\6"+
    "\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0"+
    "\2\7\2\0\3\6\1\0\137\6\5\0\50\6\4\0\136\6\21\0"+
    "\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0"+
    "\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0\5\6\5\0"+
    "\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\15\6\3\0\20\7\20\0\4\7\17\0\2\6\30\0"+
    "\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0"+
    "\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\12\0"+
    "\132\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0"+
    "\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\1\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\17\6\1\24"+
    "\1\25\1\0\12\6\1\7\1\26\1\0\31\6\1\0"+
    "\14\6\2\0\22\6\1\27\12\6\1\25\4\6\1\30"+
    "\6\6\1\31\2\0\1\6\1\32\10\6\1\33\10\6"+
    "\1\34\11\6\1\35\2\6\1\36\12\6\1\37\1\40"+
    "\1\41\10\6\1\42\6\6\1\43\1\6\1\44\2\6"+
    "\1\45\1\46\1\47\5\6\1\50\2\6\1\51\2\6"+
    "\1\52\1\6\1\53\1\54\1\55\5\6\1\56\1\57"+
    "\1\60\2\6\1\61\1\62\1\63\1\64\7\6\1\65"+
    "\5\6\1\66\1\67\1\6\1\70\2\6\1\71\4\6"+
    "\1\72\1\6\1\73\5\6\1\74\2\6\1\75\3\6"+
    "\1\76\1\77\6\6\1\100\3\6\1\101\1\102\1\103"+
    "\2\6\1\104\2\6\1\105\1\106\1\6\1\107\2\6"+
    "\1\110\1\111\2\6\1\112\1\6\1\113\1\6\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\66\0\66\0\330\0\u010e"+
    "\0\u0144\0\66\0\66\0\66\0\66\0\66\0\u017a\0\u01b0"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\u01e6\0\u021c"+
    "\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc"+
    "\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c"+
    "\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c"+
    "\0\u0762\0\u0798\0\66\0\66\0\u07ce\0\u0804\0\u083a\0\u0870"+
    "\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20"+
    "\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0"+
    "\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80"+
    "\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30"+
    "\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0"+
    "\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290"+
    "\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440"+
    "\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0"+
    "\0\u1626\0\u165c\0\66\0\u1692\0\u16c8\0\u16fe\0\u1734\0\330"+
    "\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\330\0\u18ae"+
    "\0\u18e4\0\u191a\0\330\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28"+
    "\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8"+
    "\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\330\0\u1ce6\0\u1d1c\0\u1d52"+
    "\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\330\0\u1ecc"+
    "\0\u1f02\0\330\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046"+
    "\0\u207c\0\u20b2\0\u20e8\0\u211e\0\66\0\66\0\330\0\u2154"+
    "\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\330"+
    "\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e"+
    "\0\330\0\u24b4\0\u24ea\0\330\0\330\0\330\0\u2520\0\u2556"+
    "\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\330\0\u26d0"+
    "\0\u2706\0\330\0\u273c\0\330\0\330\0\330\0\u2772\0\u27a8"+
    "\0\u27de\0\u2814\0\u284a\0\330\0\330\0\330\0\u2880\0\u28b6"+
    "\0\330\0\330\0\330\0\330\0\u28ec\0\u2922\0\u2958\0\u298e"+
    "\0\u29c4\0\u29fa\0\u2a30\0\330\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08"+
    "\0\u2b3e\0\330\0\330\0\u2b74\0\330\0\u2baa\0\u2be0\0\330"+
    "\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\330\0\u2cee\0\330\0\u2d24"+
    "\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\330\0\u2e32\0\u2e68\0\330"+
    "\0\u2e9e\0\u2ed4\0\u2f0a\0\330\0\330\0\u2f40\0\u2f76\0\u2fac"+
    "\0\u2fe2\0\u3018\0\u304e\0\330\0\u3084\0\u30ba\0\u30f0\0\330"+
    "\0\330\0\330\0\u3126\0\u315c\0\330\0\u3192\0\u31c8\0\330"+
    "\0\330\0\u31fe\0\330\0\u3234\0\u326a\0\330\0\330\0\u32a0"+
    "\0\u32d6\0\330\0\u330c\0\330\0\u3342\0\330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\2"+
    "\1\10\1\2\1\11\1\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\7\1\34"+
    "\1\7\1\35\1\36\1\7\1\37\1\40\1\41\1\42"+
    "\1\7\1\43\1\44\1\45\1\7\6\6\3\7\67\0"+
    "\1\3\1\0\1\3\64\0\1\46\1\0\1\47\66\0"+
    "\3\7\1\50\1\51\17\0\35\7\6\0\1\7\22\0"+
    "\1\52\1\7\1\53\1\54\3\7\1\55\1\56\2\7"+
    "\1\57\1\7\1\60\1\61\4\7\1\62\6\0\3\7"+
    "\3\11\1\0\6\11\2\63\52\11\21\0\1\64\103\0"+
    "\1\65\33\0\3\7\1\50\1\51\17\0\1\7\1\66"+
    "\7\7\1\67\23\7\5\0\3\7\1\50\1\51\17\0"+
    "\14\7\1\70\20\7\5\0\3\7\1\50\1\51\17\0"+
    "\3\7\1\71\16\7\1\72\12\7\5\0\3\7\1\50"+
    "\1\51\17\0\5\7\1\73\2\7\1\74\4\7\1\75"+
    "\17\7\5\0\3\7\1\50\1\51\17\0\14\7\1\76"+
    "\20\7\5\0\3\7\1\50\1\51\17\0\22\7\1\77"+
    "\12\7\5\0\3\7\1\50\1\51\17\0\33\7\1\100"+
    "\1\7\5\0\3\7\1\50\1\51\17\0\14\7\1\101"+
    "\20\7\5\0\3\7\1\50\1\51\17\0\1\7\1\102"+
    "\1\103\11\7\1\104\20\7\5\0\3\7\1\50\1\51"+
    "\17\0\7\7\1\105\11\7\1\106\13\7\5\0\3\7"+
    "\1\50\1\51\17\0\4\7\1\107\11\7\1\110\16\7"+
    "\5\0\3\7\1\50\1\51\17\0\5\7\1\111\27\7"+
    "\5\0\3\7\1\50\1\51\17\0\2\7\1\112\3\7"+
    "\1\113\5\7\1\114\20\7\5\0\3\7\1\50\1\51"+
    "\17\0\10\7\1\115\24\7\5\0\3\7\1\50\1\51"+
    "\17\0\6\7\1\116\26\7\3\46\1\0\62\46\4\47"+
    "\1\117\61\47\6\0\1\7\22\0\24\7\6\0\3\7"+
    "\5\0\3\51\21\0\35\51\5\0\3\7\1\50\1\51"+
    "\17\0\1\7\1\120\2\7\1\121\30\7\5\0\3\7"+
    "\1\50\1\51\17\0\3\7\1\122\6\7\1\123\22\7"+
    "\5\0\3\7\1\50\1\51\17\0\10\7\1\124\24\7"+
    "\5\0\3\7\1\50\1\51\17\0\10\7\1\125\24\7"+
    "\5\0\3\7\1\50\1\51\17\0\20\7\1\126\14\7"+
    "\5\0\3\7\1\50\1\51\17\0\14\7\1\127\20\7"+
    "\5\0\3\7\1\50\1\51\17\0\2\7\1\130\13\7"+
    "\1\131\16\7\5\0\3\7\1\50\1\51\17\0\10\7"+
    "\1\132\24\7\5\0\3\7\1\50\1\51\17\0\10\7"+
    "\1\133\24\7\35\0\1\134\10\0\1\135\24\0\3\7"+
    "\1\50\1\51\17\0\2\7\1\136\32\7\5\0\3\7"+
    "\1\50\1\51\17\0\2\7\1\137\32\7\5\0\3\7"+
    "\1\50\1\51\17\0\5\7\1\140\27\7\5\0\3\7"+
    "\1\50\1\51\17\0\3\7\1\141\31\7\5\0\3\7"+
    "\1\50\1\51\17\0\3\7\1\142\31\7\5\0\3\7"+
    "\1\50\1\51\17\0\2\7\1\143\13\7\1\144\16\7"+
    "\5\0\3\7\1\50\1\51\17\0\2\7\1\145\13\7"+
    "\1\146\16\7\5\0\3\7\1\50\1\51\17\0\10\7"+
    "\1\147\24\7\5\0\3\7\1\50\1\51\17\0\21\7"+
    "\1\150\13\7\5\0\3\7\1\50\1\51\17\0\32\7"+
    "\1\151\2\7\5\0\3\7\1\50\1\51\17\0\5\7"+
    "\1\152\27\7\5\0\3\7\1\50\1\51\17\0\12\7"+
    "\1\153\22\7\5\0\3\7\1\50\1\51\17\0\6\7"+
    "\1\154\26\7\5\0\3\7\1\50\1\51\17\0\7\7"+
    "\1\155\25\7\5\0\3\7\1\50\1\51\17\0\21\7"+
    "\1\156\13\7\5\0\3\7\1\50\1\51\17\0\15\7"+
    "\1\157\17\7\5\0\3\7\1\50\1\51\17\0\5\7"+
    "\1\160\6\7\1\161\20\7\5\0\3\7\1\50\1\51"+
    "\17\0\22\7\1\162\12\7\5\0\3\7\1\50\1\51"+
    "\17\0\6\7\1\163\5\7\1\164\20\7\5\0\3\7"+
    "\1\50\1\51\17\0\3\7\1\165\31\7\5\0\3\7"+
    "\1\50\1\51\17\0\1\7\1\166\33\7\5\0\3\7"+
    "\1\50\1\51\17\0\14\7\1\167\20\7\5\0\3\7"+
    "\1\50\1\51\17\0\16\7\1\170\16\7\5\0\3\7"+
    "\1\50\1\51\17\0\3\7\1\171\31\7\5\0\3\7"+
    "\1\50\1\51\17\0\6\7\1\172\26\7\2\47\1\173"+
    "\1\47\1\117\61\47\5\0\3\7\1\50\1\51\17\0"+
    "\2\7\1\174\32\7\5\0\3\7\1\50\1\51\17\0"+
    "\3\7\1\175\31\7\5\0\3\7\1\50\1\51\17\0"+
    "\3\7\1\176\31\7\5\0\3\7\1\50\1\51\17\0"+
    "\12\7\1\177\22\7\5\0\3\7\1\50\1\51\17\0"+
    "\5\7\1\200\27\7\5\0\3\7\1\50\1\51\17\0"+
    "\5\7\1\201\27\7\5\0\3\7\1\50\1\51\17\0"+
    "\10\7\1\202\24\7\5\0\3\7\1\50\1\51\17\0"+
    "\10\7\1\203\24\7\5\0\3\7\1\50\1\51\17\0"+
    "\16\7\1\204\16\7\5\0\3\7\1\50\1\51\17\0"+
    "\6\7\1\205\26\7\5\0\3\7\1\50\1\51\17\0"+
    "\7\7\1\206\25\7\5\0\3\7\1\50\1\51\17\0"+
    "\5\7\1\207\27\7\36\0\1\210\65\0\1\211\34\0"+
    "\3\7\1\50\1\51\17\0\3\7\1\212\31\7\5\0"+
    "\3\7\1\50\1\51\17\0\16\7\1\213\16\7\5\0"+
    "\3\7\1\50\1\51\17\0\10\7\1\214\24\7\5\0"+
    "\3\7\1\50\1\51\17\0\10\7\1\215\24\7\5\0"+
    "\3\7\1\50\1\51\17\0\5\7\1\216\27\7\5\0"+
    "\3\7\1\50\1\51\17\0\5\7\1\217\27\7\5\0"+
    "\3\7\1\50\1\51\17\0\14\7\1\220\20\7\5\0"+
    "\3\7\1\50\1\51\17\0\1\7\1\221\33\7\5\0"+
    "\3\7\1\50\1\51\17\0\14\7\1\222\20\7\5\0"+
    "\3\7\1\50\1\51\17\0\1\223\34\7\5\0\3\7"+
    "\1\50\1\51\17\0\5\7\1\224\27\7\5\0\3\7"+
    "\1\50\1\51\17\0\10\7\1\225\24\7\5\0\3\7"+
    "\1\50\1\51\17\0\10\7\1\226\24\7\5\0\3\7"+
    "\1\50\1\51\17\0\10\7\1\227\24\7\5\0\3\7"+
    "\1\50\1\51\17\0\2\7\1\230\32\7\5\0\3\7"+
    "\1\50\1\51\17\0\6\7\1\231\26\7\5\0\3\7"+
    "\1\50\1\51\17\0\2\7\1\232\32\7\5\0\3\7"+
    "\1\50\1\51\17\0\1\7\1\233\33\7\5\0\3\7"+
    "\1\50\1\51\17\0\10\7\1\234\13\7\1\235\1\236"+
    "\1\237\1\240\5\7\5\0\3\7\1\50\1\51\17\0"+
    "\5\7\1\241\27\7\5\0\3\7\1\50\1\51\17\0"+
    "\1\7\1\242\33\7\5\0\3\7\1\50\1\51\17\0"+
    "\5\7\1\243\27\7\5\0\3\7\1\50\1\51\17\0"+
    "\20\7\1\244\14\7\5\0\3\7\1\50\1\51\17\0"+
    "\15\7\1\245\17\7\5\0\3\7\1\50\1\51\17\0"+
    "\4\7\1\246\30\7\5\0\3\7\1\50\1\51\17\0"+
    "\12\7\1\247\22\7\5\0\3\7\1\50\1\51\17\0"+
    "\5\7\1\250\27\7\5\0\3\7\1\50\1\51\17\0"+
    "\5\7\1\251\27\7\5\0\3\7\1\50\1\51\17\0"+
    "\1\7\1\252\33\7\5\0\3\7\1\50\1\51\17\0"+
    "\3\7\1\253\31\7\5\0\3\7\1\50\1\51\17\0"+
    "\5\7\1\254\27\7\5\0\3\7\1\50\1\51\17\0"+
    "\10\7\1\255\24\7\5\0\3\7\1\50\1\51\17\0"+
    "\6\7\1\256\26\7\5\0\3\7\1\50\1\51\17\0"+
    "\11\7\1\257\23\7\5\0\3\7\1\50\1\51\17\0"+
    "\21\7\1\260\13\7\5\0\3\7\1\50\1\51\17\0"+
    "\1\7\1\261\33\7\5\0\3\7\1\50\1\51\17\0"+
    "\2\7\1\262\32\7\5\0\3\7\1\50\1\51\17\0"+
    "\15\7\1\263\17\7\5\0\3\7\1\50\1\51\17\0"+
    "\6\7\1\264\26\7\23\0\1\265\65\0\1\266\47\0"+
    "\3\7\1\50\1\51\17\0\3\7\1\267\31\7\5\0"+
    "\3\7\1\50\1\51\17\0\16\7\1\270\16\7\5\0"+
    "\3\7\1\50\1\51\17\0\7\7\1\271\25\7\5\0"+
    "\3\7\1\50\1\51\17\0\16\7\1\272\16\7\5\0"+
    "\3\7\1\50\1\51\17\0\14\7\1\273\20\7\5\0"+
    "\3\7\1\50\1\51\17\0\21\7\1\274\13\7\5\0"+
    "\3\7\1\50\1\51\17\0\10\7\1\275\24\7\5\0"+
    "\3\7\1\50\1\51\17\0\2\7\1\276\32\7\5\0"+
    "\3\7\1\50\1\51\17\0\14\7\1\277\20\7\5\0"+
    "\3\7\1\50\1\51\17\0\24\7\1\300\1\301\1\302"+
    "\1\303\5\7\5\0\3\7\1\50\1\51\17\0\1\304"+
    "\34\7\5\0\3\7\1\50\1\51\17\0\21\7\1\305"+
    "\13\7\5\0\3\7\1\50\1\51\17\0\22\7\1\306"+
    "\12\7\5\0\3\7\1\50\1\51\17\0\5\7\1\307"+
    "\27\7\5\0\3\7\1\50\1\51\17\0\16\7\1\310"+
    "\16\7\5\0\3\7\1\50\1\51\17\0\1\7\1\311"+
    "\33\7\5\0\3\7\1\50\1\51\17\0\10\7\1\312"+
    "\24\7\5\0\3\7\1\50\1\51\17\0\16\7\1\313"+
    "\16\7\5\0\3\7\1\50\1\51\17\0\26\7\1\314"+
    "\6\7\5\0\3\7\1\50\1\51\17\0\31\7\1\315"+
    "\3\7\5\0\3\7\1\50\1\51\17\0\30\7\1\316"+
    "\4\7\5\0\3\7\1\50\1\51\17\0\6\7\1\317"+
    "\26\7\5\0\3\7\1\50\1\51\17\0\14\7\1\320"+
    "\20\7\5\0\3\7\1\50\1\51\17\0\10\7\1\321"+
    "\24\7\5\0\3\7\1\50\1\51\17\0\2\7\1\322"+
    "\32\7\5\0\3\7\1\50\1\51\17\0\10\7\1\323"+
    "\24\7\5\0\3\7\1\50\1\51\17\0\10\7\1\324"+
    "\24\7\5\0\3\7\1\50\1\51\17\0\4\7\1\325"+
    "\30\7\5\0\3\7\1\50\1\51\17\0\10\7\1\326"+
    "\24\7\5\0\3\7\1\50\1\51\17\0\3\7\1\327"+
    "\31\7\5\0\3\7\1\50\1\51\17\0\6\7\1\330"+
    "\26\7\5\0\3\7\1\50\1\51\17\0\7\7\1\331"+
    "\25\7\5\0\3\7\1\50\1\51\17\0\21\7\1\332"+
    "\13\7\5\0\3\7\1\50\1\51\17\0\6\7\1\333"+
    "\26\7\5\0\3\7\1\50\1\51\17\0\5\7\1\334"+
    "\27\7\5\0\3\7\1\50\1\51\17\0\12\7\1\335"+
    "\22\7\5\0\3\7\1\50\1\51\17\0\7\7\1\336"+
    "\25\7\5\0\3\7\1\50\1\51\17\0\10\7\1\337"+
    "\24\7\5\0\3\7\1\50\1\51\17\0\20\7\1\340"+
    "\14\7\5\0\3\7\1\50\1\51\17\0\2\7\1\341"+
    "\32\7\5\0\3\7\1\50\1\51\17\0\22\7\1\342"+
    "\12\7\5\0\3\7\1\50\1\51\17\0\2\7\1\343"+
    "\32\7\5\0\3\7\1\50\1\51\17\0\1\344\34\7"+
    "\5\0\3\7\1\50\1\51\17\0\23\7\1\345\11\7"+
    "\5\0\3\7\1\50\1\51\17\0\12\7\1\346\22\7"+
    "\5\0\3\7\1\50\1\51\17\0\1\7\1\347\33\7"+
    "\5\0\3\7\1\50\1\51\17\0\2\7\1\350\32\7"+
    "\5\0\3\7\1\50\1\51\17\0\26\7\1\351\6\7"+
    "\5\0\3\7\1\50\1\51\17\0\31\7\1\352\3\7"+
    "\5\0\3\7\1\50\1\51\17\0\30\7\1\353\4\7"+
    "\5\0\3\7\1\50\1\51\17\0\5\7\1\354\27\7"+
    "\5\0\3\7\1\50\1\51\17\0\12\7\1\355\22\7"+
    "\5\0\3\7\1\50\1\51\17\0\17\7\1\356\15\7"+
    "\5\0\3\7\1\50\1\51\17\0\26\7\1\357\6\7"+
    "\5\0\3\7\1\50\1\51\17\0\2\7\1\360\32\7"+
    "\5\0\3\7\1\50\1\51\17\0\7\7\1\361\25\7"+
    "\5\0\3\7\1\50\1\51\17\0\13\7\1\362\21\7"+
    "\5\0\3\7\1\50\1\51\17\0\21\7\1\363\13\7"+
    "\5\0\3\7\1\50\1\51\17\0\1\364\34\7\5\0"+
    "\3\7\1\50\1\51\17\0\1\365\34\7\5\0\3\7"+
    "\1\50\1\51\17\0\5\7\1\366\27\7\5\0\3\7"+
    "\1\50\1\51\17\0\1\367\34\7\5\0\3\7\1\50"+
    "\1\51\17\0\5\7\1\370\27\7\5\0\3\7\1\50"+
    "\1\51\17\0\2\7\1\371\32\7\5\0\3\7\1\50"+
    "\1\51\17\0\12\7\1\372\22\7\5\0\3\7\1\50"+
    "\1\51\17\0\7\7\1\373\25\7\5\0\3\7\1\50"+
    "\1\51\17\0\22\7\1\374\12\7\5\0\3\7\1\50"+
    "\1\51\17\0\12\7\1\375\22\7\5\0\3\7\1\50"+
    "\1\51\17\0\16\7\1\376\16\7\5\0\3\7\1\50"+
    "\1\51\17\0\10\7\1\377\24\7\5\0\3\7\1\50"+
    "\1\51\17\0\1\7\1\u0100\33\7\5\0\3\7\1\50"+
    "\1\51\17\0\1\7\1\u0101\33\7\5\0\3\7\1\50"+
    "\1\51\17\0\1\u0102\34\7\5\0\3\7\1\50\1\51"+
    "\17\0\14\7\1\u0103\20\7\5\0\3\7\1\50\1\51"+
    "\17\0\1\7\1\u0104\33\7\5\0\3\7\1\50\1\51"+
    "\17\0\3\7\1\u0105\31\7\5\0\3\7\1\50\1\51"+
    "\17\0\3\7\1\u0106\31\7\5\0\3\7\1\50\1\51"+
    "\17\0\31\7\1\u0107\3\7\5\0\3\7\1\50\1\51"+
    "\17\0\3\7\1\u0108\31\7\5\0\3\7\1\50\1\51"+
    "\17\0\10\7\1\u0109\24\7\5\0\3\7\1\50\1\51"+
    "\17\0\2\7\1\u010a\32\7\5\0\3\7\1\50\1\51"+
    "\17\0\1\7\1\u010b\33\7\5\0\3\7\1\50\1\51"+
    "\17\0\5\7\1\u010c\27\7\5\0\3\7\1\50\1\51"+
    "\17\0\10\7\1\u010d\24\7\5\0\3\7\1\50\1\51"+
    "\17\0\14\7\1\u010e\20\7\5\0\3\7\1\50\1\51"+
    "\17\0\17\7\1\u010f\15\7\5\0\3\7\1\50\1\51"+
    "\17\0\1\7\1\u0110\33\7\5\0\3\7\1\50\1\51"+
    "\17\0\1\7\1\u0111\33\7\5\0\3\7\1\50\1\51"+
    "\17\0\5\7\1\u0112\27\7\5\0\3\7\1\50\1\51"+
    "\17\0\6\7\1\u0113\26\7\5\0\3\7\1\50\1\51"+
    "\17\0\17\7\1\u0114\15\7\5\0\3\7\1\50\1\51"+
    "\17\0\5\7\1\u0115\27\7\5\0\3\7\1\50\1\51"+
    "\17\0\34\7\1\u0116\5\0\3\7\1\50\1\51\17\0"+
    "\21\7\1\u0117\13\7\5\0\3\7\1\50\1\51\17\0"+
    "\14\7\1\u0118\20\7\5\0\3\7\1\50\1\51\17\0"+
    "\3\7\1\u0119\31\7\5\0\3\7\1\50\1\51\17\0"+
    "\21\7\1\u011a\13\7\5\0\3\7\1\50\1\51\17\0"+
    "\1\u011b\34\7\5\0\3\7\1\50\1\51\17\0\17\7"+
    "\1\u011c\15\7\5\0\3\7\1\50\1\51\17\0\10\7"+
    "\1\u011d\24\7\5\0\3\7\1\50\1\51\17\0\2\7"+
    "\1\u011e\32\7\5\0\3\7\1\50\1\51\17\0\15\7"+
    "\1\u011f\17\7\5\0\3\7\1\50\1\51\17\0\17\7"+
    "\1\u0120\15\7\5\0\3\7\1\50\1\51\17\0\17\7"+
    "\1\u0121\15\7\5\0\3\7\1\50\1\51\17\0\21\7"+
    "\1\u0122\13\7\5\0\3\7\1\50\1\51\17\0\2\7"+
    "\1\u0123\32\7\5\0\3\7\1\50\1\51\17\0\2\7"+
    "\1\u0124\32\7\5\0\3\7\1\50\1\51\17\0\23\7"+
    "\1\u0125\11\7\5\0\3\7\1\50\1\51\17\0\10\7"+
    "\1\u0126\24\7\5\0\3\7\1\50\1\51\17\0\5\7"+
    "\1\u0127\27\7\5\0\3\7\1\50\1\51\17\0\10\7"+
    "\1\u0128\24\7\5\0\3\7\1\50\1\51\17\0\12\7"+
    "\1\u0129\22\7\5\0\3\7\1\50\1\51\17\0\1\7"+
    "\1\u012a\33\7\5\0\3\7\1\50\1\51\17\0\10\7"+
    "\1\u012b\24\7\5\0\3\7\1\50\1\51\17\0\22\7"+
    "\1\u012c\12\7\5\0\3\7\1\50\1\51\17\0\7\7"+
    "\1\u012d\25\7\5\0\3\7\1\50\1\51\17\0\7\7"+
    "\1\u012e\25\7\5\0\3\7\1\50\1\51\17\0\3\7"+
    "\1\u012f\31\7\5\0\3\7\1\50\1\51\17\0\21\7"+
    "\1\u0130\13\7\5\0\3\7\1\50\1\51\17\0\1\7"+
    "\1\u0131\33\7\5\0\3\7\1\50\1\51\17\0\10\7"+
    "\1\u0132\24\7\5\0\3\7\1\50\1\51\17\0\2\7"+
    "\1\u0133\32\7\5\0\3\7\1\50\1\51\17\0\10\7"+
    "\1\u0134\24\7\5\0\3\7\1\50\1\51\17\0\7\7"+
    "\1\u0135\25\7\5\0\3\7\1\50\1\51\17\0\10\7"+
    "\1\u0136\24\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13176];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\3\1\5\11\2\1\6\11"+
    "\21\1\1\0\12\1\2\11\1\0\31\1\1\0\14\1"+
    "\2\0\35\1\1\11\14\1\2\0\53\1\2\11\200\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  public _MsilLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _MsilLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { return MsilTokens.CHAR_KEYWORD;
          }
        case 77: break;
        case 53: 
          { return MsilTokens.PUBLIC_KEYWORD;
          }
        case 78: break;
        case 10: 
          { return MsilTokens.LT;
          }
        case 79: break;
        case 6: 
          { return MsilTokens.IDENTIFIER;
          }
        case 80: break;
        case 15: 
          { return MsilTokens.LPAR;
          }
        case 81: break;
        case 61: 
          { return MsilTokens.VIRTUAL_KEYWORD;
          }
        case 82: break;
        case 43: 
          { return MsilTokens._EVENT_KEYWORD;
          }
        case 83: break;
        case 56: 
          { return MsilTokens._METHOD_KEYWORD;
          }
        case 84: break;
        case 22: 
          { return MsilTokens.COLONCOLON;
          }
        case 85: break;
        case 60: 
          { return MsilTokens.PRIVATE_KEYWORD;
          }
        case 86: break;
        case 62: 
          { return MsilTokens.ASSEMBLY_KEYWORD;
          }
        case 87: break;
        case 7: 
          { return MsilTokens.QIDENTIFIER;
          }
        case 88: break;
        case 50: 
          { return MsilTokens.UINT64_KEYWORD;
          }
        case 89: break;
        case 11: 
          { return MsilTokens.GT;
          }
        case 90: break;
        case 33: 
          { return MsilTokens.CLASS_KEYWORD;
          }
        case 91: break;
        case 71: 
          { return MsilTokens.VALUETYPE_KEYWORD;
          }
        case 92: break;
        case 9: 
          { return MsilTokens.RBRACE;
          }
        case 93: break;
        case 52: 
          { return MsilTokens.OBJECT_KEYWORD;
          }
        case 94: break;
        case 46: 
          { return MsilTokens.STATIC_KEYWORD;
          }
        case 95: break;
        case 29: 
          { return MsilTokens.VOID_KEYWORD;
          }
        case 96: break;
        case 49: 
          { return MsilTokens.UINT16_KEYWORD;
          }
        case 97: break;
        case 44: 
          { return MsilTokens._FIELD_KEYWORD;
          }
        case 98: break;
        case 72: 
          { return MsilTokens.FAMORASSEMBLY_KEYWORD;
          }
        case 99: break;
        case 19: 
          { return MsilTokens.COMMA;
          }
        case 100: break;
        case 2: 
          { return MsilTokens.WHITE_SPACE;
          }
        case 101: break;
        case 58: 
          { return MsilTokens.EXTENDS_KEYWORD;
          }
        case 102: break;
        case 40: 
          { return MsilTokens.VALUE_KEYWORD;
          }
        case 103: break;
        case 8: 
          { return MsilTokens.LBRACE;
          }
        case 104: break;
        case 42: 
          { return MsilTokens._ADDON_KEYWORD;
          }
        case 105: break;
        case 3: 
          { return MsilTokens.BACKSLASH;
          }
        case 106: break;
        case 32: 
          { return MsilTokens.BRACKET_OPT_KEYWORD;
          }
        case 107: break;
        case 23: 
          { return MsilTokens.INT_KEYWORD;
          }
        case 108: break;
        case 14: 
          { return MsilTokens.RBRACKET;
          }
        case 109: break;
        case 39: 
          { return MsilTokens.INT32_KEYWORD;
          }
        case 110: break;
        case 35: 
          { return MsilTokens.FLOAT_KEYWORD;
          }
        case 111: break;
        case 55: 
          { return MsilTokens._CUSTOM_KEYWORD;
          }
        case 112: break;
        case 31: 
          { return MsilTokens.BRACKET_OUT_KEYWORD;
          }
        case 113: break;
        case 68: 
          { return MsilTokens.HIDEBYSIG_KEYWORD;
          }
        case 114: break;
        case 18: 
          { return MsilTokens.AND;
          }
        case 115: break;
        case 12: 
          { return MsilTokens.EXCL;
          }
        case 116: break;
        case 30: 
          { return MsilTokens.BOOL_KEYWORD;
          }
        case 117: break;
        case 66: 
          { return MsilTokens._PROPERTY_KEYWORD;
          }
        case 118: break;
        case 70: 
          { return MsilTokens.PROTECTED_KEYWORD;
          }
        case 119: break;
        case 57: 
          { return MsilTokens.LITERAL_KEYWORD;
          }
        case 120: break;
        case 67: 
          { return MsilTokens._REMOVEON_KEYWORD;
          }
        case 121: break;
        case 38: 
          { return MsilTokens.INT64_KEYWORD;
          }
        case 122: break;
        case 13: 
          { return MsilTokens.LBRACKET;
          }
        case 123: break;
        case 74: 
          { return MsilTokens.SPECIALNAME_KEYWORD;
          }
        case 124: break;
        case 75: 
          { return MsilTokens.SERIALIZABLE_KEYWORD;
          }
        case 125: break;
        case 28: 
          { return MsilTokens.INT8_KEYWORD;
          }
        case 126: break;
        case 37: 
          { return MsilTokens.INT16_KEYWORD;
          }
        case 127: break;
        case 64: 
          { return MsilTokens.INITONLY_KEYWORD;
          }
        case 128: break;
        case 45: 
          { return MsilTokens._PARAM_KEYWORD;
          }
        case 129: break;
        case 5: 
          { return MsilTokens.NUMBER;
          }
        case 130: break;
        case 17: 
          { return MsilTokens.EQ;
          }
        case 131: break;
        case 36: 
          { return MsilTokens.FINAL_KEYWORD;
          }
        case 132: break;
        case 69: 
          { return MsilTokens.INTERFACE_KEYWORD;
          }
        case 133: break;
        case 47: 
          { return MsilTokens.STRING_KEYWORD;
          }
        case 134: break;
        case 41: 
          { return MsilTokens._CLASS_KEYWORD;
          }
        case 135: break;
        case 59: 
          { return MsilTokens.FLOAT64_KEYWORD;
          }
        case 136: break;
        case 54: 
          { return MsilTokens.NESTED_KEYWORD;
          }
        case 137: break;
        case 27: 
          { return MsilTokens.UINT_KEYWORD;
          }
        case 138: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 139: break;
        case 24: 
          { return MsilTokens._SET_KEYWORD;
          }
        case 140: break;
        case 21: 
          { return MsilTokens.BLOCK_COMMENT;
          }
        case 141: break;
        case 51: 
          { return MsilTokens.UINT32_KEYWORD;
          }
        case 142: break;
        case 73: 
          { return MsilTokens.IMPLEMENTS_KEYWORD;
          }
        case 143: break;
        case 25: 
          { return MsilTokens._GET_KEYWORD;
          }
        case 144: break;
        case 76: 
          { return MsilTokens.RTSPECIALNAME_KEYWORD;
          }
        case 145: break;
        case 34: 
          { return MsilTokens.UINT8_KEYWORD;
          }
        case 146: break;
        case 20: 
          { return MsilTokens.LINE_COMMENT;
          }
        case 147: break;
        case 63: 
          { return MsilTokens.ABSTRACT_KEYWORD;
          }
        case 148: break;
        case 48: 
          { return MsilTokens.SEALED_KEYWORD;
          }
        case 149: break;
        case 4: 
          { return MsilTokens.PERC;
          }
        case 150: break;
        case 65: 
          { return MsilTokens._ASSEMBLY_KEYWORD;
          }
        case 151: break;
        case 16: 
          { return MsilTokens.RPAR;
          }
        case 152: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
