/* The following code was generated by JFlex 1.4.3 on 18.12.13 20:37 */

package org.mustbe.consulo.csharp.lang.lexer;

import org.mustbe.consulo.csharp.lang.psi.CSharpTokens;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18.12.13 20:37 from the specification file
 * <tt>_CSharpLexer.flex</tt>
 */
class _CSharpLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MACRO = 2;
  public static final int MACRO_ENTERED = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\14\1\3\1\13\1\0\1\3\1\5\16\14\4\0\1\3\1\101"+
    "\1\11\1\41\1\2\1\75\1\76\1\7\1\65\1\66\1\6\1\74"+
    "\1\103\1\36\1\33\1\4\1\22\11\1\1\72\1\73\1\67\1\70"+
    "\1\71\1\0\1\12\1\17\1\26\1\17\1\32\1\35\1\30\5\2"+
    "\1\21\3\2\1\40\7\2\1\24\2\2\1\63\1\10\1\64\1\102"+
    "\1\15\1\0\1\16\1\25\1\54\1\31\1\34\1\27\1\45\1\55"+
    "\1\42\1\57\1\2\1\20\1\56\1\43\1\46\1\37\1\2\1\44"+
    "\1\50\1\51\1\47\1\52\1\60\1\23\1\53\1\2\1\61\1\77"+
    "\1\62\1\100\41\14\2\0\4\2\4\0\1\2\2\0\1\14\7\0"+
    "\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u013f\2\31\0"+
    "\162\2\4\0\14\2\16\0\5\2\11\0\1\2\21\0\130\14\5\0"+
    "\23\14\12\0\1\2\13\0\1\2\1\0\3\2\1\0\1\2\1\0"+
    "\24\2\1\0\54\2\1\0\46\2\1\0\5\2\4\0\202\2\1\0"+
    "\4\14\3\0\105\2\1\0\46\2\2\0\2\2\6\0\20\2\41\0"+
    "\46\2\2\0\1\2\7\0\47\2\11\0\21\14\1\0\27\14\1\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\1\14\13\0\33\2\5\0"+
    "\3\2\15\0\4\14\14\0\6\14\13\0\32\2\5\0\13\2\16\14"+
    "\7\0\12\14\4\0\2\2\1\14\143\2\1\0\1\2\10\14\1\0"+
    "\6\14\2\2\2\14\1\0\4\14\2\2\12\14\3\2\2\0\1\2"+
    "\17\0\1\14\1\2\1\14\36\2\33\14\2\0\3\2\60\0\46\2"+
    "\13\14\1\2\u014f\0\3\14\66\2\2\0\1\14\1\2\20\14\2\0"+
    "\1\2\4\14\3\0\12\2\2\14\2\0\12\14\21\0\3\14\1\0"+
    "\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0"+
    "\4\2\2\0\1\14\1\2\7\14\2\0\2\14\2\0\3\14\11\0"+
    "\1\14\4\0\2\2\1\0\3\2\2\14\2\0\12\14\4\2\15\0"+
    "\3\14\1\0\6\2\4\0\2\2\2\0\26\2\1\0\7\2\1\0"+
    "\2\2\1\0\2\2\1\0\2\2\2\0\1\14\1\0\5\14\4\0"+
    "\2\14\2\0\3\14\13\0\4\2\1\0\1\2\7\0\14\14\3\2"+
    "\14\0\3\14\1\0\11\2\1\0\3\2\1\0\26\2\1\0\7\2"+
    "\1\0\2\2\1\0\5\2\2\0\1\14\1\2\10\14\1\0\3\14"+
    "\1\0\3\14\2\0\1\2\17\0\2\2\2\14\2\0\12\14\1\0"+
    "\1\2\17\0\3\14\1\0\10\2\2\0\2\2\2\0\26\2\1\0"+
    "\7\2\1\0\2\2\1\0\5\2\2\0\1\14\1\2\6\14\3\0"+
    "\2\14\2\0\3\14\10\0\2\14\4\0\2\2\1\0\3\2\4\0"+
    "\12\14\1\0\1\2\20\0\1\14\1\2\1\0\6\2\3\0\3\2"+
    "\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3\0\2\2"+
    "\3\0\3\2\3\0\10\2\1\0\3\2\4\0\5\14\3\0\3\14"+
    "\1\0\4\14\11\0\1\14\17\0\11\14\11\0\1\2\7\0\3\14"+
    "\1\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2"+
    "\4\0\7\14\1\0\3\14\1\0\4\14\7\0\2\14\11\0\2\2"+
    "\4\0\12\14\22\0\2\14\1\0\10\2\1\0\3\2\1\0\27\2"+
    "\1\0\12\2\1\0\5\2\2\0\1\14\1\2\7\14\1\0\3\14"+
    "\1\0\4\14\7\0\2\14\7\0\1\2\1\0\2\2\4\0\12\14"+
    "\22\0\2\14\1\0\10\2\1\0\3\2\1\0\27\2\1\0\20\2"+
    "\4\0\6\14\2\0\3\14\1\0\4\14\11\0\1\14\10\0\2\2"+
    "\4\0\12\14\22\0\2\14\1\0\22\2\3\0\30\2\1\0\11\2"+
    "\1\0\1\2\2\0\7\2\3\0\1\14\4\0\6\14\1\0\1\14"+
    "\1\0\10\14\22\0\2\14\15\0\60\2\1\14\2\2\7\14\4\0"+
    "\10\2\10\14\1\0\12\14\47\0\2\2\1\0\1\2\2\0\2\2"+
    "\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2"+
    "\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\14\2\2"+
    "\6\14\1\0\2\14\1\2\2\0\5\2\1\0\1\2\1\0\6\14"+
    "\2\0\12\14\2\0\2\2\42\0\1\2\27\0\2\14\6\0\12\14"+
    "\13\0\1\14\1\0\1\14\1\0\1\14\4\0\2\14\10\2\1\0"+
    "\42\2\6\0\24\14\1\0\2\14\4\2\4\0\10\14\1\0\44\14"+
    "\11\0\1\14\71\0\42\2\1\0\5\2\1\0\2\2\1\0\7\14"+
    "\3\0\4\14\6\0\12\14\6\0\6\2\4\14\106\0\46\2\12\0"+
    "\51\2\7\0\132\2\5\0\104\2\5\0\122\2\6\0\7\2\1\0"+
    "\77\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0"+
    "\4\2\2\0\47\2\1\0\1\2\1\0\4\2\2\0\37\2\1\0"+
    "\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0"+
    "\7\2\1\0\7\2\1\0\27\2\1\0\37\2\1\0\1\2\1\0"+
    "\4\2\2\0\7\2\1\0\47\2\1\0\23\2\16\0\11\14\56\0"+
    "\125\2\14\0\u026c\2\2\0\10\2\12\0\32\2\5\0\113\2\3\0"+
    "\3\2\17\0\15\2\1\0\4\2\3\14\13\0\22\2\3\14\13\0"+
    "\22\2\2\14\14\0\15\2\1\0\3\2\1\0\2\14\14\0\64\2"+
    "\40\14\3\0\1\2\3\0\2\2\1\14\2\0\12\14\41\0\3\14"+
    "\2\0\12\14\6\0\130\2\10\0\51\2\1\14\126\0\35\2\3\0"+
    "\14\14\4\0\14\14\12\0\12\14\36\2\2\0\5\2\u038b\0\154\2"+
    "\224\0\234\2\4\0\132\2\6\0\26\2\2\0\6\2\2\0\46\2"+
    "\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2"+
    "\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2"+
    "\1\0\7\2\17\0\4\14\32\0\5\14\20\0\2\2\23\0\1\2"+
    "\13\0\4\14\6\0\6\14\1\0\1\2\15\0\1\2\40\0\22\2"+
    "\36\0\15\14\4\0\1\14\3\0\6\14\27\0\1\2\4\0\1\2"+
    "\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\4\2\1\0\3\2\1\0\7\2\3\0\3\2"+
    "\5\0\5\2\26\0\44\2\u0e81\0\3\2\31\0\11\2\6\14\1\0"+
    "\5\2\2\0\5\2\4\0\126\2\2\0\2\14\2\0\3\2\1\0"+
    "\137\2\5\0\50\2\4\0\136\2\21\0\30\2\70\0\20\2\u0200\0"+
    "\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2\2\0"+
    "\73\2\225\0\7\2\14\0\5\2\5\0\1\2\1\14\12\2\1\0"+
    "\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0"+
    "\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0\15\2\3\0"+
    "\20\14\20\0\4\14\17\0\2\2\30\0\3\2\31\0\1\2\6\0"+
    "\5\2\1\0\207\2\2\0\1\14\4\0\1\2\13\0\12\14\7\0"+
    "\32\2\4\0\1\2\1\0\32\2\12\0\132\2\3\0\6\2\2\0"+
    "\6\2\2\0\6\2\2\0\3\2\3\0\2\2\3\0\2\2\22\0"+
    "\3\14\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\2\3\1\2\3\3\1\11\1\3\1\12"+
    "\1\3\1\13\11\3\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\4\2\37"+
    "\1\1\1\40\1\41\1\42\3\43\1\44\1\45\2\7"+
    "\2\10\1\46\2\3\2\2\15\3\1\47\27\3\1\50"+
    "\1\51\1\52\1\53\1\54\5\0\1\43\1\44\1\55"+
    "\1\45\2\46\2\3\1\2\1\0\17\3\1\56\1\3"+
    "\1\57\2\3\1\60\2\3\1\61\23\3\2\0\1\62"+
    "\2\0\1\3\1\63\1\0\1\64\1\65\6\3\1\66"+
    "\7\3\1\67\5\3\1\70\11\3\1\71\3\3\1\72"+
    "\2\3\1\73\3\0\1\45\1\3\1\74\5\3\1\75"+
    "\12\3\1\76\1\3\1\77\1\3\1\100\4\3\1\101"+
    "\3\3\1\102\1\103\4\0\3\3\1\104\1\3\1\105"+
    "\1\106\2\3\1\107\4\3\1\110\2\3\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\2\3\1\0\1\120"+
    "\2\0\2\3\1\121\1\122\1\123\7\3\1\124\1\3"+
    "\1\125\1\0\1\126\1\127\1\130\2\3\1\131\1\3"+
    "\1\132\1\133\1\134\1\135\1\0\1\136\1\137\1\140"+
    "\1\0\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\314\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8"+
    "\0\u03fc\0\u0440\0\u0484\0\u04c8\0\314\0\u050c\0\314\0\u0550"+
    "\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\u07b4\0\u07f8"+
    "\0\u083c\0\u0880\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\u08c4\0\314\0\314\0\u0908\0\u094c\0\314\0\u0990\0\u09d4"+
    "\0\314\0\314\0\314\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\314"+
    "\0\u0b28\0\u0b6c\0\314\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0"+
    "\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0"+
    "\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100"+
    "\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320"+
    "\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540"+
    "\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\314\0\314\0\314"+
    "\0\314\0\314\0\u0990\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8"+
    "\0\u182c\0\u1870\0\u18b4\0\u18f8\0\314\0\u193c\0\u1980\0\u19c4"+
    "\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4"+
    "\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04"+
    "\0\u1e48\0\u1e8c\0\u0154\0\u1ed0\0\u1f14\0\u0154\0\u1f58\0\u1f9c"+
    "\0\u0154\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398"+
    "\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\314\0\u2574"+
    "\0\u25b8\0\u25fc\0\u0154\0\u2640\0\u0154\0\u0154\0\u2684\0\u26c8"+
    "\0\u270c\0\u2750\0\u2794\0\u27d8\0\u0154\0\u281c\0\u2860\0\u28a4"+
    "\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u0154\0\u29f8\0\u2a3c\0\u2a80"+
    "\0\u2ac4\0\u2b08\0\u0154\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c"+
    "\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u0154\0\u2db0\0\u2df4\0\u2e38"+
    "\0\u0154\0\u2e7c\0\u2ec0\0\u0154\0\u2f04\0\u2f48\0\u2f8c\0\314"+
    "\0\u2fd0\0\u0154\0\u3014\0\u3058\0\u309c\0\u30e0\0\u3124\0\u0154"+
    "\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344"+
    "\0\u3388\0\u33cc\0\u0154\0\u3410\0\u0154\0\u3454\0\u0154\0\u3498"+
    "\0\u34dc\0\u3520\0\u3564\0\u0154\0\u35a8\0\u35ec\0\u3630\0\u0154"+
    "\0\u0154\0\u3674\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c"+
    "\0\u0154\0\u3850\0\u0154\0\u0154\0\u3894\0\u38d8\0\u0154\0\u391c"+
    "\0\u3960\0\u39a4\0\u39e8\0\u0154\0\u3a2c\0\u3a70\0\u0154\0\u0154"+
    "\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u3ab4\0\u3af8\0\u3b3c"+
    "\0\314\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u0154\0\u0154\0\u0154"+
    "\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u0154"+
    "\0\u3e6c\0\314\0\u3eb0\0\314\0\u0154\0\u0154\0\u3ef4\0\u3f38"+
    "\0\u0154\0\u3f7c\0\u0154\0\u0154\0\u0154\0\u0154\0\u3fc0\0\u0154"+
    "\0\u0154\0\u0154\0\u4004\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\7\1\11\1\12"+
    "\1\4\1\13\1\14\1\7\1\4\1\6\1\15\1\6"+
    "\1\16\1\6\1\17\2\6\1\20\1\6\1\21\1\6"+
    "\1\22\1\6\1\23\1\24\1\6\1\25\1\26\1\6"+
    "\1\27\1\30\1\31\1\32\1\6\1\33\1\34\1\35"+
    "\1\36\1\37\1\6\1\40\4\6\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\3\4\1\64\1\4\1\65\5\4\1\66\25\4\1\67"+
    "\44\4\1\70\1\64\1\4\1\65\5\4\1\66\1\4"+
    "\5\70\1\4\10\70\1\4\2\70\1\4\2\70\1\4"+
    "\17\70\23\4\105\0\1\5\13\0\1\5\2\0\2\71"+
    "\1\5\4\0\2\72\2\73\1\74\2\75\47\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\17\6"+
    "\26\0\1\7\1\0\1\7\5\0\1\7\74\0\1\76"+
    "\1\0\1\77\75\0\5\12\1\0\1\12\1\100\1\101"+
    "\2\12\1\0\70\12\5\13\1\0\2\13\1\102\1\103"+
    "\1\13\1\0\70\13\11\0\1\104\73\0\2\6\11\0"+
    "\11\6\1\105\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\4\6\1\106\12\6\24\0\1\5\13\0"+
    "\1\5\2\0\2\71\1\5\2\107\2\110\2\72\2\73"+
    "\1\74\2\75\47\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\4\6\1\111\4\6\1\112\5\6"+
    "\24\0\2\6\11\0\2\6\1\113\1\6\1\114\12\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\24\0\2\6"+
    "\11\0\17\6\1\0\1\115\1\6\1\0\2\6\1\0"+
    "\4\6\1\116\4\6\1\117\5\6\24\0\1\74\20\0"+
    "\1\74\62\0\2\6\11\0\7\6\1\120\7\6\1\0"+
    "\2\6\1\0\2\6\1\0\1\6\1\121\6\6\1\122"+
    "\6\6\24\0\2\6\11\0\2\6\1\123\14\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\124\2\6\1\125"+
    "\11\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\126\15\6\24\0\2\6\11\0"+
    "\2\6\1\127\14\6\1\0\1\130\1\6\1\0\2\6"+
    "\1\0\5\6\1\131\11\6\24\0\2\6\11\0\17\6"+
    "\1\0\1\132\1\6\1\0\2\6\1\0\17\6\24\0"+
    "\2\6\11\0\11\6\1\133\5\6\1\0\2\6\1\0"+
    "\1\134\1\6\1\0\5\6\1\135\2\6\1\136\6\6"+
    "\24\0\2\6\11\0\4\6\1\137\12\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\140\1\141\4\6\1\142\10\6"+
    "\24\0\2\6\11\0\11\6\1\143\5\6\1\0\1\144"+
    "\1\6\1\0\2\6\1\0\7\6\1\145\3\6\1\146"+
    "\3\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\147\6\6\1\150\5\6\24\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\151\3\6\1\152\12\6\24\0\2\6\11\0\4\6"+
    "\1\153\12\6\1\0\2\6\1\0\2\6\1\0\4\6"+
    "\1\154\6\6\1\155\3\6\113\0\1\156\103\0\1\157"+
    "\103\0\1\160\105\0\1\161\101\0\1\162\16\0\1\64"+
    "\113\0\1\66\73\0\1\163\1\0\1\163\5\0\1\163"+
    "\15\0\1\164\2\0\1\165\5\0\1\166\1\0\1\167"+
    "\40\0\2\70\11\0\17\70\1\0\2\70\1\0\2\70"+
    "\1\0\17\70\24\0\1\74\13\0\1\74\4\0\1\74"+
    "\4\0\2\72\2\73\1\0\2\75\47\0\1\170\13\0"+
    "\1\170\4\0\1\170\4\0\2\72\2\73\3\0\1\170"+
    "\35\0\1\170\7\0\4\171\1\172\1\0\5\171\1\0"+
    "\70\171\6\173\1\0\75\173\5\12\1\0\5\12\1\0"+
    "\70\12\5\13\1\0\5\13\1\0\70\13\5\104\1\0"+
    "\2\104\1\174\1\175\72\104\1\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\1\176\10\6"+
    "\24\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\177\15\6\24\0\1\200\13\0\3\200"+
    "\2\71\1\200\2\0\6\200\1\201\2\200\16\0\1\200"+
    "\30\0\1\110\13\0\1\110\2\0\2\71\1\110\62\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\4\6\1\202\12\6\24\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\7\6\1\203\7\6\24\0"+
    "\2\6\11\0\4\6\1\204\12\6\1\0\2\6\1\0"+
    "\2\6\1\0\17\6\24\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\4\6\1\205\12\6\24\0"+
    "\2\6\11\0\4\6\1\206\12\6\1\0\2\6\1\0"+
    "\2\6\1\0\12\6\1\207\4\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\5\6\1\210"+
    "\11\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\211\15\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\7\6\1\212"+
    "\7\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\5\6\1\213\11\6\24\0\2\6\11\0"+
    "\17\6\1\0\1\214\1\6\1\0\2\6\1\0\17\6"+
    "\24\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\215\14\6\24\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\216\3\6\1\217"+
    "\12\6\24\0\2\6\11\0\11\6\1\220\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\7\6\1\221"+
    "\7\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\14\6\1\222\2\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\16\6\1\223"+
    "\24\0\2\6\11\0\4\6\1\224\12\6\1\0\2\6"+
    "\1\0\2\6\1\0\17\6\24\0\2\6\11\0\2\6"+
    "\1\225\10\6\1\226\3\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\24\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\15\6\1\227\1\6\24\0\2\6"+
    "\11\0\17\6\1\0\1\230\1\6\1\0\2\6\1\0"+
    "\17\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\7\6\1\231\7\6\24\0\2\6\11\0"+
    "\17\6\1\0\1\232\1\6\1\0\2\6\1\0\17\6"+
    "\24\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\4\6\1\233\12\6\24\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\6\1\234\15\6"+
    "\24\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\1\235\10\6\24\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\236\12\6\1\237"+
    "\3\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\11\6\1\240\5\6\24\0\2\6\11\0"+
    "\2\6\1\241\14\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\24\0\2\6\11\0\2\6\1\242\14\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\243\14\6\24\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\4\6\1\244\12\6\24\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\5\6\1\245\11\6\24\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\1\246\1\6"+
    "\1\0\17\6\24\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\247\14\6\24\0\2\6"+
    "\11\0\4\6\1\250\12\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\251\16\6\24\0\2\6\11\0\2\6\1\252"+
    "\14\6\1\0\2\6\1\0\2\6\1\0\17\6\24\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\6\1\253\15\6\24\0\2\6\11\0\2\6\1\254"+
    "\14\6\1\0\2\6\1\0\2\6\1\0\17\6\57\0"+
    "\1\255\112\0\1\256\67\0\1\257\110\0\1\260\50\0"+
    "\1\170\13\0\1\170\4\0\1\170\4\0\2\72\2\73"+
    "\51\0\5\171\1\0\5\171\1\0\70\171\5\172\1\0"+
    "\5\172\1\0\70\172\6\173\1\261\75\173\5\104\1\0"+
    "\5\104\1\0\70\104\1\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\7\6\1\262\7\6\24\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\3\6\1\263\13\6\24\0\1\200\13\0\3\200\2\71"+
    "\1\200\2\0\6\200\1\264\2\200\1\0\2\75\13\0"+
    "\1\200\30\0\1\264\13\0\3\264\2\0\1\264\2\0"+
    "\6\264\1\0\2\264\16\0\1\264\30\0\2\6\11\0"+
    "\4\6\1\265\12\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\24\0\2\6\11\0\17\6\1\0\1\266\1\6"+
    "\1\0\2\6\1\0\17\6\24\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\1\245\10\6"+
    "\24\0\2\6\11\0\2\6\1\267\14\6\1\0\2\6"+
    "\1\0\2\6\1\0\17\6\24\0\2\6\11\0\17\6"+
    "\1\0\1\270\1\6\1\0\2\6\1\0\17\6\24\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\271\16\6\24\0\2\6\11\0\11\6\1\272\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\24\0\2\6"+
    "\11\0\2\6\1\273\14\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\24\0\2\6\11\0\17\6\1\0\1\274"+
    "\1\6\1\0\2\6\1\0\17\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\14\6\1\275"+
    "\2\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\276\15\6\24\0\2\6\11\0"+
    "\2\6\1\277\14\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\10\6\1\300\6\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\7\6\1\301"+
    "\7\6\24\0\2\6\11\0\4\6\1\302\12\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\24\0\2\6\11\0"+
    "\17\6\1\0\1\303\1\6\1\0\2\6\1\0\17\6"+
    "\24\0\2\6\11\0\17\6\1\0\1\304\1\6\1\0"+
    "\2\6\1\0\17\6\24\0\2\6\11\0\4\6\1\305"+
    "\12\6\1\0\2\6\1\0\2\6\1\0\17\6\24\0"+
    "\2\6\11\0\15\6\1\306\1\6\1\0\2\6\1\0"+
    "\2\6\1\0\17\6\24\0\2\6\11\0\17\6\1\0"+
    "\1\307\1\6\1\0\2\6\1\0\17\6\24\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\310\14\6\24\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\311\14\6\24\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\312\15\6\24\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\7\6\1\313\7\6\24\0\2\6"+
    "\11\0\2\6\1\314\14\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\24\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\315\15\6\24\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\4\6"+
    "\1\316\12\6\24\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\7\6\1\317\7\6\24\0\2\6"+
    "\11\0\4\6\1\320\12\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\24\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\7\6\1\321\7\6\24\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\1\322"+
    "\4\6\1\323\11\6\24\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\324\14\6\24\0"+
    "\2\6\11\0\17\6\1\0\1\325\1\6\1\0\2\6"+
    "\1\0\17\6\24\0\2\6\11\0\17\6\1\0\1\326"+
    "\1\6\1\0\2\6\1\0\17\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\7\6\1\327"+
    "\7\6\24\0\2\6\11\0\2\6\1\330\14\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\24\0\2\6\11\0"+
    "\15\6\1\331\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\6\6\1\332\10\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\6\6\1\333"+
    "\10\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\334\14\6\52\0\1\335\105\0"+
    "\1\336\117\0\1\337\36\0\4\173\1\340\1\173\1\261"+
    "\75\173\1\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\341\14\6\24\0\1\264\13\0"+
    "\3\264\2\0\1\264\2\0\6\264\1\0\2\264\1\0"+
    "\2\75\13\0\1\264\30\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\7\6\1\342\7\6\24\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\3\6\1\343\13\6\24\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\14\6\1\344\2\6\24\0"+
    "\2\6\11\0\4\6\1\345\12\6\1\0\2\6\1\0"+
    "\2\6\1\0\17\6\24\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\14\6\1\346\2\6\24\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\1\347\14\6\24\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\7\6\1\350\7\6\24\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\14\6\1\351\2\6\24\0\2\6\11\0\2\6\1\352"+
    "\14\6\1\0\2\6\1\0\2\6\1\0\17\6\24\0"+
    "\2\6\11\0\17\6\1\0\1\353\1\6\1\0\2\6"+
    "\1\0\17\6\24\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\354\16\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\2\6\1\355"+
    "\14\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\6\6\1\356\10\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\4\6\1\357"+
    "\12\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\12\6\1\360\4\6\24\0\2\6\11\0"+
    "\2\6\1\361\14\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\362\14\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\3\6\1\363"+
    "\13\6\24\0\2\6\11\0\13\6\1\364\3\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\3\6\1\365"+
    "\13\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\366\14\6\24\0\2\6\11\0"+
    "\17\6\1\0\1\367\1\6\1\0\2\6\1\0\17\6"+
    "\24\0\2\6\11\0\17\6\1\0\1\370\1\6\1\0"+
    "\2\6\1\0\17\6\24\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\1\371\16\6\24\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\372\15\6\24\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\12\6\1\373\4\6\24\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\7\6"+
    "\1\374\7\6\24\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\4\6\1\375\12\6\24\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\5\6"+
    "\1\376\11\6\24\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\7\6\1\377\7\6\24\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\1\u0100\10\6\24\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\7\6\1\u0101\7\6\65\0\1\u0102"+
    "\103\0\1\u0103\1\0\1\u0104\101\0\1\u0105\42\0\2\6"+
    "\11\0\2\6\1\u0106\14\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\24\0\2\6\11\0\2\6\1\u0107\14\6"+
    "\1\0\2\6\1\0\2\6\1\0\17\6\24\0\2\6"+
    "\11\0\2\6\1\u0108\14\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\24\0\2\6\11\0\17\6\1\0\1\u0109"+
    "\1\6\1\0\2\6\1\0\17\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\1\u010a\16\6"+
    "\24\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\u010b\15\6\24\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\1\u010c\10\6"+
    "\24\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\7\6\1\u010d\7\6\24\0\2\6\11\0\17\6"+
    "\1\0\2\6\1\0\2\6\1\0\12\6\1\u010e\4\6"+
    "\24\0\2\6\11\0\17\6\1\0\2\6\1\0\2\6"+
    "\1\0\12\6\1\u010f\4\6\24\0\2\6\11\0\13\6"+
    "\1\u0110\3\6\1\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\u0111\15\6\24\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\1\u0112\1\6\1\0\17\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\1\6\1\u0113"+
    "\15\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\7\6\1\u0114\7\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\7\6\1\u0115"+
    "\7\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\u0116\16\6\24\0\2\6\11\0\17\6"+
    "\1\0\1\u0117\1\6\1\0\2\6\1\0\17\6\24\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\7\6\1\u0118\7\6\24\0\2\6\11\0\15\6\1\u0119"+
    "\1\6\1\0\2\6\1\0\2\6\1\0\17\6\24\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\12\6\1\u011a\4\6\24\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\3\6\1\u011b\13\6\24\0"+
    "\2\6\11\0\17\6\1\0\2\6\1\0\2\6\1\0"+
    "\7\6\1\u011c\7\6\24\0\2\6\11\0\13\6\1\u011d"+
    "\3\6\1\0\2\6\1\0\2\6\1\0\17\6\24\0"+
    "\2\6\11\0\2\6\1\u011e\14\6\1\0\2\6\1\0"+
    "\2\6\1\0\17\6\24\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\1\u011f\16\6\66\0\1\u0120"+
    "\67\0\1\u0121\110\0\1\u0122\115\0\1\u0123\36\0\2\6"+
    "\11\0\17\6\1\0\2\6\1\0\2\6\1\0\12\6"+
    "\1\u0124\4\6\24\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\7\6\1\u0125\7\6\24\0\2\6"+
    "\11\0\4\6\1\u0126\12\6\1\0\2\6\1\0\2\6"+
    "\1\0\17\6\24\0\2\6\11\0\17\6\1\0\2\6"+
    "\1\0\2\6\1\0\12\6\1\u0127\4\6\24\0\2\6"+
    "\11\0\17\6\1\0\1\u0128\1\6\1\0\2\6\1\0"+
    "\17\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\7\6\1\u0129\7\6\24\0\2\6\11\0"+
    "\2\6\1\u012a\14\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\24\0\2\6\11\0\2\6\1\u012b\14\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\24\0\2\6\11\0"+
    "\2\6\1\u012c\14\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\24\0\2\6\11\0\4\6\1\u012d\12\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\4\6\1\u012e"+
    "\12\6\24\0\2\6\11\0\15\6\1\u012f\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\24\0\2\6\11\0"+
    "\4\6\1\u0130\12\6\1\0\2\6\1\0\2\6\1\0"+
    "\17\6\24\0\2\6\11\0\4\6\1\u0131\12\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\57\0\1\u0132\114\0"+
    "\1\u0133\101\0\1\u0134\41\0\2\6\11\0\17\6\1\0"+
    "\2\6\1\0\2\6\1\0\7\6\1\u0135\7\6\24\0"+
    "\2\6\11\0\17\6\1\0\1\u0136\1\6\1\0\2\6"+
    "\1\0\17\6\24\0\2\6\11\0\17\6\1\0\1\u0137"+
    "\1\6\1\0\2\6\1\0\17\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\12\6\1\u0138"+
    "\4\6\24\0\2\6\11\0\4\6\1\u0139\12\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\12\6\1\u013a"+
    "\4\6\24\0\2\6\11\0\17\6\1\0\2\6\1\0"+
    "\2\6\1\0\11\6\1\u013b\5\6\24\0\2\6\11\0"+
    "\17\6\1\0\2\6\1\0\2\6\1\0\2\6\1\u013c"+
    "\14\6\24\0\2\6\11\0\17\6\1\0\1\u013d\1\6"+
    "\1\0\2\6\1\0\17\6\24\0\2\6\11\0\17\6"+
    "\1\0\1\u013e\1\6\1\0\2\6\1\0\17\6\65\0"+
    "\1\u013f\42\0\2\6\11\0\15\6\1\u0140\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\17\6\24\0\2\6\11\0"+
    "\17\6\1\0\1\u0141\1\6\1\0\2\6\1\0\17\6"+
    "\24\0\2\6\11\0\17\6\1\0\1\u0142\1\6\1\0"+
    "\2\6\1\0\17\6\71\0\1\u0143\100\0\1\u0144\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16456];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\13\1\1\11\1\1\1\11"+
    "\11\1\6\11\4\1\6\11\1\1\2\11\2\1\1\11"+
    "\2\1\3\11\4\1\1\11\2\1\1\11\52\1\5\11"+
    "\5\0\5\1\1\11\3\1\1\0\53\1\2\0\1\11"+
    "\2\0\2\1\1\0\50\1\3\0\1\11\41\1\4\0"+
    "\32\1\1\0\1\11\2\0\16\1\1\11\1\0\1\11"+
    "\12\1\1\0\3\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _CSharpLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CSharpLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1784) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 87: 
          { return CSharpTokens.ABSTRACT_KEYWORD;
          }
        case 98: break;
        case 56: 
          { return CSharpTokens.UINT_KEYWORD;
          }
        case 99: break;
        case 8: 
          { return CSharpTokens.STRING_LITERAL;
          }
        case 100: break;
        case 16: 
          { return CSharpTokens.LPAR;
          }
        case 101: break;
        case 1: 
          { return CSharpTokens.BAD_CHARACTER;
          }
        case 102: break;
        case 25: 
          { return CSharpTokens.AND;
          }
        case 103: break;
        case 89: 
          { return CSharpTokens.INTERNAL_KEYWORD;
          }
        case 104: break;
        case 85: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_DEFINE_KEYWORD;
          }
        case 105: break;
        case 42: 
          { return CSharpTokens.GTEQ;
          }
        case 106: break;
        case 36: 
          { return CSharpTokens.LINE_COMMENT;
          }
        case 107: break;
        case 92: 
          { return CSharpTokens.OVERRIDE_KEYWORD;
          }
        case 108: break;
        case 61: 
          { return CSharpTokens.EVENT_KEYWORD;
          }
        case 109: break;
        case 40: 
          { return CSharpTokens.LTEQ;
          }
        case 110: break;
        case 80: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_ENDIF_KEYWORD;
          }
        case 111: break;
        case 63: 
          { return CSharpTokens.USING_KEYWORD;
          }
        case 112: break;
        case 60: 
          { return CSharpTokens.FLOAT_KEYWORD;
          }
        case 113: break;
        case 21: 
          { return CSharpTokens.COLON;
          }
        case 114: break;
        case 59: 
          { return CSharpTokens.CHAR_KEYWORD;
          }
        case 115: break;
        case 83: 
          { return CSharpTokens.PRIVATE_KEYWORD;
          }
        case 116: break;
        case 74: 
          { return CSharpTokens.USHORT_KEYWORD;
          }
        case 117: break;
        case 70: 
          { return CSharpTokens.PARAMS_KEYWORD;
          }
        case 118: break;
        case 43: 
          { return CSharpTokens.COLONCOLON;
          }
        case 119: break;
        case 84: 
          { return CSharpTokens.VIRTUAL_KEYWORD;
          }
        case 120: break;
        case 3: 
          { return CSharpTokens.IDENTIFIER;
          }
        case 121: break;
        case 18: 
          { return CSharpTokens.LT;
          }
        case 122: break;
        case 77: 
          { return CSharpTokens.STRING_KEYWORD;
          }
        case 123: break;
        case 4: 
          { return CSharpTokens.WHITE_SPACE;
          }
        case 124: break;
        case 39: 
          { return CSharpTokens.IN_KEYWORD;
          }
        case 125: break;
        case 68: 
          { return CSharpTokens.DOUBLE_KEYWORD;
          }
        case 126: break;
        case 29: 
          { return CSharpTokens.CARET;
          }
        case 127: break;
        case 7: 
          { return CSharpTokens.CHARACTER_LITERAL;
          }
        case 128: break;
        case 23: 
          { return CSharpTokens.PLUS;
          }
        case 129: break;
        case 5: 
          { return CSharpTokens.DIV;
          }
        case 130: break;
        case 30: 
          { return CSharpTokens.COMMA;
          }
        case 131: break;
        case 88: 
          { return CSharpTokens.DELEGATE_KEYWORD;
          }
        case 132: break;
        case 41: 
          { return CSharpTokens.EQEQ;
          }
        case 133: break;
        case 53: 
          { return CSharpTokens.BYTE_KEYWORD;
          }
        case 134: break;
        case 58: 
          { return CSharpTokens.VOID_KEYWORD;
          }
        case 135: break;
        case 81: 
          { return CSharpTokens.DECIMAL_KEYWORD;
          }
        case 136: break;
        case 46: 
          { return CSharpTokens.INT_KEYWORD;
          }
        case 137: break;
        case 13: 
          { return CSharpTokens.RBRACE;
          }
        case 138: break;
        case 12: 
          { return CSharpTokens.LBRACE;
          }
        case 139: break;
        case 20: 
          { return CSharpTokens.GT;
          }
        case 140: break;
        case 28: 
          { return CSharpTokens.EXCL;
          }
        case 141: break;
        case 57: 
          { return CSharpTokens.BOOL_LITERAL;
          }
        case 142: break;
        case 75: 
          { return CSharpTokens.SEALED_KEYWORD;
          }
        case 143: break;
        case 2: 
          { return CSharpTokens.INTEGER_LITERAL;
          }
        case 144: break;
        case 9: 
          { return CSharpTokens.DOT;
          }
        case 145: break;
        case 26: 
          { return CSharpTokens.OR;
          }
        case 146: break;
        case 48: 
          { return CSharpTokens.REF_KEYWORD;
          }
        case 147: break;
        case 38: 
          { return CSharpTokens.VERBATIM_STRING_LITERAL;
          }
        case 148: break;
        case 69: 
          { return CSharpTokens.EXTERN_KEYWORD;
          }
        case 149: break;
        case 33: 
          { return CSharpTokens.LONG_LITERAL;
          }
        case 150: break;
        case 49: 
          { return CSharpTokens.OUT_KEYWORD;
          }
        case 151: break;
        case 90: 
          { return CSharpTokens.READONLY_KEYWORD;
          }
        case 152: break;
        case 11: 
          { yypushback(1);
		yybegin(MACRO);
          }
        case 153: break;
        case 47: 
          { return CSharpTokens.NEW_KEYWORD;
          }
        case 154: break;
        case 22: 
          { return CSharpTokens.SEMICOLON;
          }
        case 155: break;
        case 31: 
          { yybegin(YYINITIAL); return CSharpTokens.MACRO_STOP;
          }
        case 156: break;
        case 64: 
          { return CSharpTokens.SBYTE_KEYWORD;
          }
        case 157: break;
        case 37: 
          { return CSharpTokens.BLOCK_COMMENT;
          }
        case 158: break;
        case 71: 
          { return CSharpTokens.PUBLIC_KEYWORD;
          }
        case 159: break;
        case 78: 
          { return CSharpTokens.STRUCT_KEYWORD;
          }
        case 160: break;
        case 73: 
          { return CSharpTokens.UNSAFE_KEYWORD;
          }
        case 161: break;
        case 32: 
          { return CSharpTokens.MACRO_VALUE;
          }
        case 162: break;
        case 54: 
          { return CSharpTokens.ENUM_KEYWORD;
          }
        case 163: break;
        case 94: 
          { return CSharpTokens.PROTECTED_KEYWORD;
          }
        case 164: break;
        case 55: 
          { return CSharpTokens.NULL_LITERAL;
          }
        case 165: break;
        case 15: 
          { return CSharpTokens.RBRACKET;
          }
        case 166: break;
        case 67: 
          { return CSharpTokens.CONST_KEYWORD;
          }
        case 167: break;
        case 72: 
          { return CSharpTokens.OBJECT_KEYWORD;
          }
        case 168: break;
        case 82: 
          { return CSharpTokens.DYNAMIC_KEYWORD;
          }
        case 169: break;
        case 52: 
          { return CSharpTokens.BOOL_KEYWORD;
          }
        case 170: break;
        case 97: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_ENDREGION_KEYWORD;
          }
        case 171: break;
        case 62: 
          { return CSharpTokens.ULONG_KEYWORD;
          }
        case 172: break;
        case 96: 
          { return CSharpTokens.NAMESPACE_KEYWORD;
          }
        case 173: break;
        case 34: 
          { return CSharpTokens.FLOAT_LITERAL;
          }
        case 174: break;
        case 44: 
          { return CSharpTokens.NTEQ;
          }
        case 175: break;
        case 93: 
          { return CSharpTokens.VOLATILE_KEYWORD;
          }
        case 176: break;
        case 27: 
          { return CSharpTokens.TILDE;
          }
        case 177: break;
        case 86: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_REGION_KEYWORD;
          }
        case 178: break;
        case 51: 
          { return CSharpTokens.LONG_KEYWORD;
          }
        case 179: break;
        case 50: 
          { yybegin(MACRO_ENTERED); return CSharpTokens.MACRO_IF_KEYWORD;
          }
        case 180: break;
        case 65: 
          { return CSharpTokens.SHORT_KEYWORD;
          }
        case 181: break;
        case 6: 
          { return CSharpTokens.MUL;
          }
        case 182: break;
        case 76: 
          { return CSharpTokens.STATIC_KEYWORD;
          }
        case 183: break;
        case 24: 
          { return CSharpTokens.PERC;
          }
        case 184: break;
        case 95: 
          { return CSharpTokens.INTERFACE_KEYWORD;
          }
        case 185: break;
        case 17: 
          { return CSharpTokens.RPAR;
          }
        case 186: break;
        case 14: 
          { return CSharpTokens.LBRACKET;
          }
        case 187: break;
        case 45: 
          { return CSharpTokens.LINE_DOC_COMMENT;
          }
        case 188: break;
        case 66: 
          { return CSharpTokens.CLASS_KEYWORD;
          }
        case 189: break;
        case 35: 
          { return CSharpTokens.DOUBLE_LITERAL;
          }
        case 190: break;
        case 10: 
          { return CSharpTokens.MINUS;
          }
        case 191: break;
        case 91: 
          { return CSharpTokens.OPERATOR_KEYWORD;
          }
        case 192: break;
        case 79: 
          { return CSharpTokens.TYPEOF_KEYWORD;
          }
        case 193: break;
        case 19: 
          { return CSharpTokens.EQ;
          }
        case 194: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
