/* The following code was generated by JFlex 1.4.3 on 21.05.14 17:24 */

package org.mustbe.consulo.msil.lang.lexer;

import org.mustbe.consulo.msil.lang.psi.MsilTokens;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21.05.14 17:24 from the specification file
 * <tt>H:/github.com/consulo/consulo-dotnet/msil-psi-impl/src/org/mustbe/consulo/msil/lang/lexer/_MsilLexer.flex</tt>
 */
public class _MsilLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\1\1\3\1\0\1\1\1\3\16\6\4\0\1\1\3\0"+
    "\1\5\1\0\1\23\1\11\1\20\1\21\1\4\1\0\1\24\1\0"+
    "\1\7\1\2\1\6\1\51\1\54\1\53\1\55\1\6\1\52\1\6"+
    "\1\50\1\6\2\0\1\14\1\22\1\15\2\0\32\5\1\16\1\0"+
    "\1\17\1\0\1\5\1\10\1\27\1\47\1\25\1\37\1\35\1\40"+
    "\1\56\1\36\1\41\1\57\1\5\1\26\1\34\1\46\1\33\1\42"+
    "\1\5\1\43\1\30\1\32\1\31\1\45\1\5\1\60\1\44\1\61"+
    "\1\12\1\0\1\13\1\0\41\6\2\0\4\5\4\0\1\5\2\0"+
    "\1\6\7\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5\1\0"+
    "\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5\21\0"+
    "\160\6\5\5\1\0\2\5\2\0\4\5\10\0\1\5\1\0\3\5"+
    "\1\0\1\5\1\0\24\5\1\0\123\5\1\0\213\5\1\0\5\6"+
    "\2\0\236\5\11\0\46\5\2\0\1\5\7\0\47\5\7\0\1\5"+
    "\1\0\55\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6"+
    "\10\0\33\5\5\0\3\5\15\0\5\6\6\0\1\5\4\0\13\6"+
    "\5\0\53\5\37\6\4\0\2\5\1\6\143\5\1\0\1\5\10\6"+
    "\1\0\6\6\2\5\2\6\1\0\4\6\2\5\12\6\3\5\2\0"+
    "\1\5\17\0\1\6\1\5\1\6\36\5\33\6\2\0\131\5\13\6"+
    "\1\5\16\0\12\6\41\5\11\6\2\5\4\0\1\5\5\0\26\5"+
    "\4\6\1\5\11\6\1\5\3\6\1\5\5\6\22\0\31\5\3\6"+
    "\104\0\1\5\1\0\13\5\67\0\33\6\1\0\4\6\66\5\3\6"+
    "\1\5\22\6\1\5\7\6\12\5\2\6\2\0\12\6\1\0\7\5"+
    "\1\0\7\5\1\0\3\6\1\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5\7\6"+
    "\2\0\2\6\2\0\3\6\1\5\10\0\1\6\4\0\2\5\1\0"+
    "\3\5\2\6\2\0\12\6\4\5\7\0\1\5\5\0\3\6\1\0"+
    "\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\2\5\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0"+
    "\3\6\3\0\1\6\7\0\4\5\1\0\1\5\7\0\14\6\3\5"+
    "\1\6\13\0\3\6\1\0\11\5\1\0\3\5\1\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\10\6\1\0"+
    "\3\6\1\0\3\6\2\0\1\5\17\0\2\5\2\6\2\0\12\6"+
    "\1\0\1\5\17\0\3\6\1\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\7\6"+
    "\2\0\2\6\2\0\3\6\10\0\2\6\4\0\2\5\1\0\3\5"+
    "\2\6\2\0\12\6\1\0\1\5\20\0\1\6\1\5\1\0\6\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5"+
    "\3\0\2\5\3\0\3\5\3\0\14\5\4\0\5\6\3\0\3\6"+
    "\1\0\4\6\2\0\1\5\6\0\1\6\16\0\12\6\11\0\1\5"+
    "\7\0\3\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\3\0\1\5\7\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\1\0\2\5\6\0\2\5\2\6\2\0\12\6\22\0\2\6"+
    "\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5"+
    "\2\0\1\6\1\5\7\6\1\0\3\6\1\0\4\6\7\0\2\6"+
    "\7\0\1\5\1\0\2\5\2\6\2\0\12\6\1\0\2\5\17\0"+
    "\2\6\1\0\10\5\1\0\3\5\1\0\51\5\2\0\1\5\7\6"+
    "\1\0\3\6\1\0\4\6\1\5\10\0\1\6\10\0\2\5\2\6"+
    "\2\0\12\6\12\0\6\5\2\0\2\6\1\0\22\5\3\0\30\5"+
    "\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\6\4\0\6\6"+
    "\1\0\1\6\1\0\10\6\22\0\2\6\15\0\60\5\1\6\2\5"+
    "\7\6\4\0\10\5\10\6\1\0\12\6\47\0\2\5\1\0\1\5"+
    "\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5"+
    "\1\6\2\5\6\6\1\0\2\6\1\5\2\0\5\5\1\0\1\5"+
    "\1\0\6\6\2\0\12\6\2\0\4\5\40\0\1\5\27\0\2\6"+
    "\6\0\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\10\5\1\0\44\5\4\0\24\6\1\0\2\6\5\5\13\6\1\0"+
    "\44\6\11\0\1\6\71\0\53\5\24\6\1\5\12\6\6\0\6\5"+
    "\4\6\4\5\3\6\1\5\3\6\2\5\7\6\3\5\4\6\15\5"+
    "\14\6\1\5\17\6\2\0\46\5\1\0\1\5\5\0\1\5\2\0"+
    "\53\5\1\0\u014d\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0"+
    "\4\5\2\0\51\5\1\0\4\5\2\0\41\5\1\0\4\5\2\0"+
    "\7\5\1\0\1\5\1\0\4\5\2\0\17\5\1\0\71\5\1\0"+
    "\4\5\2\0\103\5\2\0\3\6\40\0\20\5\20\0\125\5\14\0"+
    "\u026c\5\2\0\21\5\1\0\32\5\5\0\113\5\3\0\3\5\17\0"+
    "\15\5\1\0\4\5\3\6\13\0\22\5\3\6\13\0\22\5\2\6"+
    "\14\0\15\5\1\0\3\5\1\0\2\6\14\0\64\5\40\6\3\0"+
    "\1\5\3\0\2\5\1\6\2\0\12\6\41\0\3\6\2\0\12\6"+
    "\6\0\130\5\10\0\51\5\1\6\1\5\5\0\106\5\12\0\35\5"+
    "\3\0\14\6\4\0\14\6\12\0\12\6\36\5\2\0\5\5\13\0"+
    "\54\5\4\0\21\6\7\5\2\6\6\0\12\6\46\0\27\5\5\6"+
    "\4\0\65\5\12\6\1\0\35\6\2\0\13\6\6\0\12\6\15\0"+
    "\1\5\130\0\5\6\57\5\21\6\7\5\4\0\12\6\21\0\11\6"+
    "\14\0\3\6\36\5\15\6\2\5\12\6\54\5\16\6\14\0\44\5"+
    "\24\6\10\0\12\6\3\0\3\5\12\6\44\5\122\0\3\6\1\0"+
    "\25\6\4\5\1\6\4\5\3\6\2\5\11\0\300\5\47\6\25\0"+
    "\4\6\u0116\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5"+
    "\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5"+
    "\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\16\0\5\6"+
    "\32\0\5\6\20\0\2\5\23\0\1\5\13\0\5\6\5\0\6\6"+
    "\1\0\1\5\15\0\1\5\20\0\15\5\3\0\33\5\25\0\15\6"+
    "\4\0\1\6\3\0\14\6\21\0\1\5\4\0\1\5\2\0\12\5"+
    "\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\13\5\2\0\4\5\5\0\5\5\4\0\1\5"+
    "\21\0\51\5\u0a77\0\57\5\1\0\57\5\1\0\205\5\6\0\4\5"+
    "\3\6\2\5\14\0\46\5\1\0\1\5\5\0\1\5\2\0\70\5"+
    "\7\0\1\5\17\0\1\6\27\5\11\0\7\5\1\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\7\5\1\0\40\6\57\0\1\5\u01d5\0\3\5\31\0\11\5\6\6"+
    "\1\0\5\5\2\0\5\5\4\0\126\5\2\0\2\6\2\0\3\5"+
    "\1\0\132\5\1\0\4\5\5\0\51\5\3\0\136\5\21\0\33\5"+
    "\65\0\20\5\u0200\0\u19b6\5\112\0\u51cd\5\63\0\u048d\5\103\0\56\5"+
    "\2\0\u010d\5\3\0\20\5\12\6\2\5\24\0\57\5\1\6\4\0"+
    "\12\6\1\0\31\5\7\0\1\6\120\5\2\6\45\0\11\5\2\0"+
    "\147\5\2\0\4\5\1\0\4\5\14\0\13\5\115\0\12\5\1\6"+
    "\3\5\1\6\4\5\1\6\27\5\5\6\20\0\1\5\7\0\64\5"+
    "\14\0\2\6\62\5\21\6\13\0\12\6\6\0\22\6\6\5\3\0"+
    "\1\5\4\0\12\6\34\5\10\6\2\0\27\5\15\6\14\0\35\5"+
    "\3\0\4\6\57\5\16\6\16\0\1\5\12\6\46\0\51\5\16\6"+
    "\11\0\3\5\1\6\10\5\2\6\2\0\12\6\6\0\27\5\3\0"+
    "\1\5\1\6\4\0\60\5\1\6\1\5\3\6\2\5\2\6\5\5"+
    "\2\6\1\5\1\6\1\5\30\0\3\5\2\0\13\5\5\6\2\0"+
    "\3\5\2\6\12\0\6\5\2\0\6\5\2\0\6\5\11\0\7\5"+
    "\1\0\7\5\221\0\43\5\10\6\1\0\2\6\2\0\12\6\6\0"+
    "\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0\u016e\5\2\0\152\5\46\0"+
    "\7\5\14\0\5\5\5\0\1\5\1\6\12\5\1\0\15\5\1\0"+
    "\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0"+
    "\u016b\5\22\0\100\5\2\0\66\5\50\0\15\5\3\0\20\6\20\0"+
    "\7\6\14\0\2\5\30\0\3\5\31\0\1\5\6\0\5\5\1\0"+
    "\207\5\2\0\1\6\4\0\1\5\13\0\12\6\7\0\32\5\4\0"+
    "\1\5\1\0\32\5\13\0\131\5\3\0\6\5\2\0\6\5\2\0"+
    "\6\5\2\0\3\5\3\0\2\5\3\0\2\5\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\15\4\1\20\1\21\1\0\7\4\3\0"+
    "\26\4\1\0\10\4\1\0\1\22\1\0\32\4\1\21"+
    "\10\4\1\0\1\4\1\23\20\4\1\24\10\4\1\25"+
    "\1\4\1\26\10\4\1\27\1\30\10\4\1\31\6\4"+
    "\1\32\1\33\2\4\1\34\1\35\1\36\4\4\1\37"+
    "\1\4\1\40\3\4\1\41\1\42\1\43\4\4\1\44"+
    "\1\45\1\46\2\4\1\47\1\50\1\51\1\52\6\4"+
    "\1\53\4\4\1\54\1\4\1\55\1\4\1\56\4\4"+
    "\1\57\1\4\1\60\4\4\1\61\1\4\1\62\2\4"+
    "\1\63\1\64\5\4\1\65\2\4\1\66\1\67\2\4"+
    "\1\70\1\4\1\71\1\72\1\73\2\4\1\74\1\4"+
    "\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\62\0\310\0\372\0\u012c"+
    "\0\62\0\62\0\62\0\62\0\u015e\0\62\0\62\0\62"+
    "\0\62\0\62\0\62\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578"+
    "\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708"+
    "\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898"+
    "\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\62\0\u0ce4\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036"+
    "\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6"+
    "\0\u11f8\0\62\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324"+
    "\0\u1356\0\u1388\0\u13ba\0\u13ec\0\310\0\u141e\0\u1450\0\u1482"+
    "\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612"+
    "\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\310\0\u173e\0\u1770"+
    "\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\310\0\u18ce"+
    "\0\310\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c"+
    "\0\u1a5e\0\62\0\310\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u1bbc\0\u1bee\0\310\0\u1c20\0\u1c52\0\u1c84\0\u1cb6"+
    "\0\u1ce8\0\u1d1a\0\u1d4c\0\310\0\u1d7e\0\u1db0\0\310\0\310"+
    "\0\310\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\310"+
    "\0\u1f0e\0\u1f40\0\u1f72\0\310\0\310\0\310\0\u1fa4\0\u1fd6"+
    "\0\u2008\0\u203a\0\310\0\310\0\310\0\u206c\0\u209e\0\310"+
    "\0\310\0\310\0\310\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198"+
    "\0\u21ca\0\310\0\u21fc\0\u222e\0\u2260\0\u2292\0\310\0\u22c4"+
    "\0\310\0\u22f6\0\310\0\u2328\0\u235a\0\u238c\0\u23be\0\310"+
    "\0\u23f0\0\310\0\u2422\0\u2454\0\u2486\0\u24b8\0\310\0\u24ea"+
    "\0\310\0\u251c\0\u254e\0\310\0\310\0\u2580\0\u25b2\0\u25e4"+
    "\0\u2616\0\u2648\0\310\0\u267a\0\u26ac\0\310\0\310\0\u26de"+
    "\0\u2710\0\310\0\u2742\0\310\0\310\0\310\0\u2774\0\u27a6"+
    "\0\310\0\u27d8\0\310\0\310";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\2\1\7"+
    "\1\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\6\1\31\1\6\1\32\1\33\1\6"+
    "\1\34\1\35\1\36\2\6\1\37\1\6\1\40\6\2"+
    "\4\6\63\0\1\3\1\0\1\3\60\0\1\41\1\0"+
    "\1\42\62\0\2\6\1\43\1\44\14\0\35\6\5\0"+
    "\1\6\17\0\1\45\1\6\1\46\4\6\1\47\1\50"+
    "\2\6\1\51\1\6\1\52\5\6\6\0\4\6\5\0"+
    "\1\53\1\0\1\54\15\0\23\53\6\0\4\53\33\0"+
    "\1\55\33\0\2\6\1\43\1\44\14\0\1\6\1\56"+
    "\7\6\1\57\23\6\5\0\2\6\1\43\1\44\14\0"+
    "\14\6\1\60\20\6\5\0\2\6\1\43\1\44\14\0"+
    "\3\6\1\61\16\6\1\62\12\6\5\0\2\6\1\43"+
    "\1\44\14\0\5\6\1\63\2\6\1\64\4\6\1\65"+
    "\17\6\5\0\2\6\1\43\1\44\14\0\14\6\1\66"+
    "\20\6\5\0\2\6\1\43\1\44\14\0\22\6\1\67"+
    "\12\6\5\0\2\6\1\43\1\44\14\0\33\6\1\70"+
    "\1\6\5\0\2\6\1\43\1\44\14\0\14\6\1\71"+
    "\20\6\5\0\2\6\1\43\1\44\14\0\1\6\1\72"+
    "\12\6\1\73\20\6\5\0\2\6\1\43\1\44\14\0"+
    "\7\6\1\74\11\6\1\75\13\6\5\0\2\6\1\43"+
    "\1\44\14\0\4\6\1\76\11\6\1\77\16\6\5\0"+
    "\2\6\1\43\1\44\14\0\2\6\1\100\3\6\1\101"+
    "\5\6\1\102\20\6\5\0\2\6\1\43\1\44\14\0"+
    "\6\6\1\103\26\6\3\41\1\0\56\41\4\42\1\104"+
    "\55\42\5\0\1\6\17\0\23\6\6\0\4\6\5\0"+
    "\2\44\16\0\35\44\5\0\2\6\1\43\1\44\14\0"+
    "\1\6\1\105\2\6\1\106\30\6\5\0\2\6\1\43"+
    "\1\44\14\0\3\6\1\107\31\6\5\0\2\6\1\43"+
    "\1\44\14\0\10\6\1\110\24\6\5\0\2\6\1\43"+
    "\1\44\14\0\20\6\1\111\14\6\5\0\2\6\1\43"+
    "\1\44\14\0\14\6\1\112\20\6\5\0\2\6\1\43"+
    "\1\44\14\0\2\6\1\113\13\6\1\114\16\6\5\0"+
    "\2\53\1\54\1\115\1\116\13\0\35\53\5\0\1\53"+
    "\17\0\23\53\6\0\4\53\31\0\1\117\35\0\2\6"+
    "\1\43\1\44\14\0\2\6\1\120\32\6\5\0\2\6"+
    "\1\43\1\44\14\0\2\6\1\121\32\6\5\0\2\6"+
    "\1\43\1\44\14\0\5\6\1\122\27\6\5\0\2\6"+
    "\1\43\1\44\14\0\3\6\1\123\31\6\5\0\2\6"+
    "\1\43\1\44\14\0\3\6\1\124\31\6\5\0\2\6"+
    "\1\43\1\44\14\0\2\6\1\125\13\6\1\126\16\6"+
    "\5\0\2\6\1\43\1\44\14\0\2\6\1\127\13\6"+
    "\1\130\16\6\5\0\2\6\1\43\1\44\14\0\10\6"+
    "\1\131\24\6\5\0\2\6\1\43\1\44\14\0\21\6"+
    "\1\132\13\6\5\0\2\6\1\43\1\44\14\0\32\6"+
    "\1\133\2\6\5\0\2\6\1\43\1\44\14\0\5\6"+
    "\1\134\27\6\5\0\2\6\1\43\1\44\14\0\12\6"+
    "\1\135\22\6\5\0\2\6\1\43\1\44\14\0\6\6"+
    "\1\136\26\6\5\0\2\6\1\43\1\44\14\0\21\6"+
    "\1\137\13\6\5\0\2\6\1\43\1\44\14\0\15\6"+
    "\1\140\17\6\5\0\2\6\1\43\1\44\14\0\5\6"+
    "\1\141\6\6\1\142\20\6\5\0\2\6\1\43\1\44"+
    "\14\0\22\6\1\143\12\6\5\0\2\6\1\43\1\44"+
    "\14\0\6\6\1\144\5\6\1\145\20\6\5\0\2\6"+
    "\1\43\1\44\14\0\1\6\1\146\33\6\5\0\2\6"+
    "\1\43\1\44\14\0\14\6\1\147\20\6\5\0\2\6"+
    "\1\43\1\44\14\0\16\6\1\150\16\6\5\0\2\6"+
    "\1\43\1\44\14\0\6\6\1\151\26\6\2\42\1\152"+
    "\1\42\1\104\55\42\5\0\2\6\1\43\1\44\14\0"+
    "\2\6\1\153\32\6\5\0\2\6\1\43\1\44\14\0"+
    "\3\6\1\154\31\6\5\0\2\6\1\43\1\44\14\0"+
    "\3\6\1\155\31\6\5\0\2\6\1\43\1\44\14\0"+
    "\5\6\1\156\27\6\5\0\2\6\1\43\1\44\14\0"+
    "\10\6\1\157\24\6\5\0\2\6\1\43\1\44\14\0"+
    "\10\6\1\160\24\6\5\0\2\6\1\43\1\44\14\0"+
    "\16\6\1\161\16\6\5\0\2\6\1\43\1\44\14\0"+
    "\6\6\1\162\26\6\5\0\2\115\2\0\1\116\13\0"+
    "\35\115\32\0\1\163\34\0\2\6\1\43\1\44\14\0"+
    "\3\6\1\164\31\6\5\0\2\6\1\43\1\44\14\0"+
    "\16\6\1\165\16\6\5\0\2\6\1\43\1\44\14\0"+
    "\10\6\1\166\24\6\5\0\2\6\1\43\1\44\14\0"+
    "\10\6\1\167\24\6\5\0\2\6\1\43\1\44\14\0"+
    "\5\6\1\170\27\6\5\0\2\6\1\43\1\44\14\0"+
    "\5\6\1\171\27\6\5\0\2\6\1\43\1\44\14\0"+
    "\14\6\1\172\20\6\5\0\2\6\1\43\1\44\14\0"+
    "\1\6\1\173\33\6\5\0\2\6\1\43\1\44\14\0"+
    "\14\6\1\174\20\6\5\0\2\6\1\43\1\44\14\0"+
    "\1\175\34\6\5\0\2\6\1\43\1\44\14\0\5\6"+
    "\1\176\27\6\5\0\2\6\1\43\1\44\14\0\10\6"+
    "\1\177\24\6\5\0\2\6\1\43\1\44\14\0\10\6"+
    "\1\200\24\6\5\0\2\6\1\43\1\44\14\0\10\6"+
    "\1\201\24\6\5\0\2\6\1\43\1\44\14\0\2\6"+
    "\1\202\32\6\5\0\2\6\1\43\1\44\14\0\2\6"+
    "\1\203\32\6\5\0\2\6\1\43\1\44\14\0\1\6"+
    "\1\204\33\6\5\0\2\6\1\43\1\44\14\0\10\6"+
    "\1\205\12\6\1\206\1\207\1\210\1\211\6\6\5\0"+
    "\2\6\1\43\1\44\14\0\5\6\1\212\27\6\5\0"+
    "\2\6\1\43\1\44\14\0\1\6\1\213\33\6\5\0"+
    "\2\6\1\43\1\44\14\0\5\6\1\214\27\6\5\0"+
    "\2\6\1\43\1\44\14\0\20\6\1\215\14\6\5\0"+
    "\2\6\1\43\1\44\14\0\4\6\1\216\30\6\5\0"+
    "\2\6\1\43\1\44\14\0\12\6\1\217\22\6\5\0"+
    "\2\6\1\43\1\44\14\0\5\6\1\220\27\6\5\0"+
    "\2\6\1\43\1\44\14\0\1\6\1\221\33\6\5\0"+
    "\2\6\1\43\1\44\14\0\3\6\1\222\31\6\5\0"+
    "\2\6\1\43\1\44\14\0\5\6\1\223\27\6\5\0"+
    "\2\6\1\43\1\44\14\0\10\6\1\224\24\6\5\0"+
    "\2\6\1\43\1\44\14\0\11\6\1\225\23\6\5\0"+
    "\2\6\1\43\1\44\14\0\21\6\1\226\13\6\5\0"+
    "\2\6\1\43\1\44\14\0\1\6\1\227\33\6\5\0"+
    "\2\6\1\43\1\44\14\0\2\6\1\230\32\6\5\0"+
    "\2\6\1\43\1\44\14\0\15\6\1\231\17\6\17\0"+
    "\1\232\47\0\2\6\1\43\1\44\14\0\3\6\1\233"+
    "\31\6\5\0\2\6\1\43\1\44\14\0\16\6\1\234"+
    "\16\6\5\0\2\6\1\43\1\44\14\0\7\6\1\235"+
    "\25\6\5\0\2\6\1\43\1\44\14\0\16\6\1\236"+
    "\16\6\5\0\2\6\1\43\1\44\14\0\14\6\1\237"+
    "\20\6\5\0\2\6\1\43\1\44\14\0\21\6\1\240"+
    "\13\6\5\0\2\6\1\43\1\44\14\0\10\6\1\241"+
    "\24\6\5\0\2\6\1\43\1\44\14\0\2\6\1\242"+
    "\32\6\5\0\2\6\1\43\1\44\14\0\14\6\1\243"+
    "\20\6\5\0\2\6\1\43\1\44\14\0\23\6\1\244"+
    "\1\245\1\246\1\247\6\6\5\0\2\6\1\43\1\44"+
    "\14\0\1\250\34\6\5\0\2\6\1\43\1\44\14\0"+
    "\21\6\1\251\13\6\5\0\2\6\1\43\1\44\14\0"+
    "\22\6\1\252\12\6\5\0\2\6\1\43\1\44\14\0"+
    "\5\6\1\253\27\6\5\0\2\6\1\43\1\44\14\0"+
    "\1\6\1\254\33\6\5\0\2\6\1\43\1\44\14\0"+
    "\10\6\1\255\24\6\5\0\2\6\1\43\1\44\14\0"+
    "\16\6\1\256\16\6\5\0\2\6\1\43\1\44\14\0"+
    "\25\6\1\257\7\6\5\0\2\6\1\43\1\44\14\0"+
    "\30\6\1\260\4\6\5\0\2\6\1\43\1\44\14\0"+
    "\27\6\1\261\5\6\5\0\2\6\1\43\1\44\14\0"+
    "\6\6\1\262\26\6\5\0\2\6\1\43\1\44\14\0"+
    "\14\6\1\263\20\6\5\0\2\6\1\43\1\44\14\0"+
    "\10\6\1\264\24\6\5\0\2\6\1\43\1\44\14\0"+
    "\2\6\1\265\32\6\5\0\2\6\1\43\1\44\14\0"+
    "\10\6\1\266\24\6\5\0\2\6\1\43\1\44\14\0"+
    "\4\6\1\267\30\6\5\0\2\6\1\43\1\44\14\0"+
    "\3\6\1\270\31\6\5\0\2\6\1\43\1\44\14\0"+
    "\6\6\1\271\26\6\5\0\2\6\1\43\1\44\14\0"+
    "\7\6\1\272\25\6\5\0\2\6\1\43\1\44\14\0"+
    "\6\6\1\273\26\6\5\0\2\6\1\43\1\44\14\0"+
    "\5\6\1\274\27\6\5\0\2\6\1\43\1\44\14\0"+
    "\12\6\1\275\22\6\5\0\2\6\1\43\1\44\14\0"+
    "\7\6\1\276\25\6\5\0\2\6\1\43\1\44\14\0"+
    "\10\6\1\277\24\6\5\0\2\6\1\43\1\44\14\0"+
    "\2\6\1\300\32\6\5\0\2\6\1\43\1\44\14\0"+
    "\22\6\1\301\12\6\5\0\2\6\1\43\1\44\14\0"+
    "\2\6\1\302\32\6\5\0\2\6\1\43\1\44\14\0"+
    "\1\303\34\6\5\0\2\6\1\43\1\44\14\0\31\6"+
    "\1\304\3\6\5\0\2\6\1\43\1\44\14\0\12\6"+
    "\1\305\22\6\5\0\2\6\1\43\1\44\14\0\1\6"+
    "\1\306\33\6\5\0\2\6\1\43\1\44\14\0\2\6"+
    "\1\307\32\6\5\0\2\6\1\43\1\44\14\0\25\6"+
    "\1\310\7\6\5\0\2\6\1\43\1\44\14\0\30\6"+
    "\1\311\4\6\5\0\2\6\1\43\1\44\14\0\27\6"+
    "\1\312\5\6\5\0\2\6\1\43\1\44\14\0\5\6"+
    "\1\313\27\6\5\0\2\6\1\43\1\44\14\0\12\6"+
    "\1\314\22\6\5\0\2\6\1\43\1\44\14\0\17\6"+
    "\1\315\15\6\5\0\2\6\1\43\1\44\14\0\25\6"+
    "\1\316\7\6\5\0\2\6\1\43\1\44\14\0\7\6"+
    "\1\317\25\6\5\0\2\6\1\43\1\44\14\0\13\6"+
    "\1\320\21\6\5\0\2\6\1\43\1\44\14\0\21\6"+
    "\1\321\13\6\5\0\2\6\1\43\1\44\14\0\1\322"+
    "\34\6\5\0\2\6\1\43\1\44\14\0\1\323\34\6"+
    "\5\0\2\6\1\43\1\44\14\0\5\6\1\324\27\6"+
    "\5\0\2\6\1\43\1\44\14\0\5\6\1\325\27\6"+
    "\5\0\2\6\1\43\1\44\14\0\2\6\1\326\32\6"+
    "\5\0\2\6\1\43\1\44\14\0\7\6\1\327\25\6"+
    "\5\0\2\6\1\43\1\44\14\0\22\6\1\330\12\6"+
    "\5\0\2\6\1\43\1\44\14\0\12\6\1\331\22\6"+
    "\5\0\2\6\1\43\1\44\14\0\16\6\1\332\16\6"+
    "\5\0\2\6\1\43\1\44\14\0\1\6\1\333\33\6"+
    "\5\0\2\6\1\43\1\44\14\0\1\6\1\334\33\6"+
    "\5\0\2\6\1\43\1\44\14\0\1\335\34\6\5\0"+
    "\2\6\1\43\1\44\14\0\14\6\1\336\20\6\5\0"+
    "\2\6\1\43\1\44\14\0\1\6\1\337\33\6\5\0"+
    "\2\6\1\43\1\44\14\0\3\6\1\340\31\6\5\0"+
    "\2\6\1\43\1\44\14\0\3\6\1\341\31\6\5\0"+
    "\2\6\1\43\1\44\14\0\30\6\1\342\4\6\5\0"+
    "\2\6\1\43\1\44\14\0\10\6\1\343\24\6\5\0"+
    "\2\6\1\43\1\44\14\0\2\6\1\344\32\6\5\0"+
    "\2\6\1\43\1\44\14\0\1\6\1\345\33\6\5\0"+
    "\2\6\1\43\1\44\14\0\5\6\1\346\27\6\5\0"+
    "\2\6\1\43\1\44\14\0\10\6\1\347\24\6\5\0"+
    "\2\6\1\43\1\44\14\0\17\6\1\350\15\6\5\0"+
    "\2\6\1\43\1\44\14\0\1\6\1\351\33\6\5\0"+
    "\2\6\1\43\1\44\14\0\1\6\1\352\33\6\5\0"+
    "\2\6\1\43\1\44\14\0\5\6\1\353\27\6\5\0"+
    "\2\6\1\43\1\44\14\0\17\6\1\354\15\6\5\0"+
    "\2\6\1\43\1\44\14\0\5\6\1\355\27\6\5\0"+
    "\2\6\1\43\1\44\14\0\34\6\1\356\5\0\2\6"+
    "\1\43\1\44\14\0\21\6\1\357\13\6\5\0\2\6"+
    "\1\43\1\44\14\0\14\6\1\360\20\6\5\0\2\6"+
    "\1\43\1\44\14\0\21\6\1\361\13\6\5\0\2\6"+
    "\1\43\1\44\14\0\1\362\34\6\5\0\2\6\1\43"+
    "\1\44\14\0\17\6\1\363\15\6\5\0\2\6\1\43"+
    "\1\44\14\0\10\6\1\364\24\6\5\0\2\6\1\43"+
    "\1\44\14\0\15\6\1\365\17\6\5\0\2\6\1\43"+
    "\1\44\14\0\17\6\1\366\15\6\5\0\2\6\1\43"+
    "\1\44\14\0\17\6\1\367\15\6\5\0\2\6\1\43"+
    "\1\44\14\0\2\6\1\370\32\6\5\0\2\6\1\43"+
    "\1\44\14\0\2\6\1\371\32\6\5\0\2\6\1\43"+
    "\1\44\14\0\31\6\1\372\3\6\5\0\2\6\1\43"+
    "\1\44\14\0\5\6\1\373\27\6\5\0\2\6\1\43"+
    "\1\44\14\0\10\6\1\374\24\6\5\0\2\6\1\43"+
    "\1\44\14\0\12\6\1\375\22\6\5\0\2\6\1\43"+
    "\1\44\14\0\10\6\1\376\24\6\5\0\2\6\1\43"+
    "\1\44\14\0\22\6\1\377\12\6\5\0\2\6\1\43"+
    "\1\44\14\0\7\6\1\u0100\25\6\5\0\2\6\1\43"+
    "\1\44\14\0\3\6\1\u0101\31\6\5\0\2\6\1\43"+
    "\1\44\14\0\1\6\1\u0102\33\6\5\0\2\6\1\43"+
    "\1\44\14\0\10\6\1\u0103\24\6\5\0\2\6\1\43"+
    "\1\44\14\0\10\6\1\u0104\24\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10250];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\4\11\1\1\6\11"+
    "\17\1\1\0\7\1\3\0\26\1\1\0\10\1\1\0"+
    "\1\11\1\0\32\1\1\11\10\1\1\0\46\1\1\11"+
    "\152\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  public _MsilLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _MsilLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2260) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { return MsilTokens.INT8_KEYWORD;
          }
        case 63: break;
        case 60: 
          { return MsilTokens.IMPLEMENTS_KEYWORD;
          }
        case 64: break;
        case 37: 
          { return MsilTokens.STRING_KEYWORD;
          }
        case 65: break;
        case 36: 
          { return MsilTokens.STATIC_KEYWORD;
          }
        case 66: break;
        case 7: 
          { return MsilTokens.LT;
          }
        case 67: break;
        case 55: 
          { return MsilTokens._PROPERTY_KEYWORD;
          }
        case 68: break;
        case 57: 
          { return MsilTokens.INTERFACE_KEYWORD;
          }
        case 69: break;
        case 5: 
          { return MsilTokens.LBRACE;
          }
        case 70: break;
        case 23: 
          { return MsilTokens.BRACKET_OUT_KEYWORD;
          }
        case 71: break;
        case 3: 
          { return MsilTokens.PERC;
          }
        case 72: break;
        case 54: 
          { return MsilTokens._ASSEMBLY_KEYWORD;
          }
        case 73: break;
        case 6: 
          { return MsilTokens.RBRACE;
          }
        case 74: break;
        case 10: 
          { return MsilTokens.RBRACKET;
          }
        case 75: break;
        case 32: 
          { return MsilTokens._CLASS_KEYWORD;
          }
        case 76: break;
        case 39: 
          { return MsilTokens.UINT16_KEYWORD;
          }
        case 77: break;
        case 44: 
          { return MsilTokens._CUSTOM_KEYWORD;
          }
        case 78: break;
        case 62: 
          { return MsilTokens.SERIALIZABLE_KEYWORD;
          }
        case 79: break;
        case 12: 
          { return MsilTokens.RPAR;
          }
        case 80: break;
        case 41: 
          { return MsilTokens.UINT32_KEYWORD;
          }
        case 81: break;
        case 34: 
          { return MsilTokens._FIELD_KEYWORD;
          }
        case 82: break;
        case 38: 
          { return MsilTokens.SEALED_KEYWORD;
          }
        case 83: break;
        case 52: 
          { return MsilTokens.ABSTRACT_KEYWORD;
          }
        case 84: break;
        case 43: 
          { return MsilTokens.PUBLIC_KEYWORD;
          }
        case 85: break;
        case 21: 
          { return MsilTokens.VOID_KEYWORD;
          }
        case 86: break;
        case 15: 
          { return MsilTokens.COMMA;
          }
        case 87: break;
        case 27: 
          { return MsilTokens.FINAL_KEYWORD;
          }
        case 88: break;
        case 18: 
          { return MsilTokens.QIDENTIFIER;
          }
        case 89: break;
        case 25: 
          { return MsilTokens.UINT8_KEYWORD;
          }
        case 90: break;
        case 48: 
          { return MsilTokens.FLOAT64_KEYWORD;
          }
        case 91: break;
        case 29: 
          { return MsilTokens.INT64_KEYWORD;
          }
        case 92: break;
        case 49: 
          { return MsilTokens.PRIVATE_KEYWORD;
          }
        case 93: break;
        case 61: 
          { return MsilTokens.SPECIALNAME_KEYWORD;
          }
        case 94: break;
        case 42: 
          { return MsilTokens.OBJECT_KEYWORD;
          }
        case 95: break;
        case 59: 
          { return MsilTokens.VALUETYPE_KEYWORD;
          }
        case 96: break;
        case 16: 
          { return MsilTokens.LINE_COMMENT;
          }
        case 97: break;
        case 9: 
          { return MsilTokens.LBRACKET;
          }
        case 98: break;
        case 2: 
          { return MsilTokens.WHITE_SPACE;
          }
        case 99: break;
        case 46: 
          { return MsilTokens.LITERAL_KEYWORD;
          }
        case 100: break;
        case 24: 
          { return MsilTokens.CLASS_KEYWORD;
          }
        case 101: break;
        case 22: 
          { return MsilTokens.BOOL_KEYWORD;
          }
        case 102: break;
        case 8: 
          { return MsilTokens.GT;
          }
        case 103: break;
        case 31: 
          { return MsilTokens.VALUE_KEYWORD;
          }
        case 104: break;
        case 19: 
          { return MsilTokens.CHAR_KEYWORD;
          }
        case 105: break;
        case 51: 
          { return MsilTokens.ASSEMBLY_KEYWORD;
          }
        case 106: break;
        case 47: 
          { return MsilTokens.EXTENDS_KEYWORD;
          }
        case 107: break;
        case 26: 
          { return MsilTokens.FLOAT_KEYWORD;
          }
        case 108: break;
        case 56: 
          { return MsilTokens.HIDEBYSIG_KEYWORD;
          }
        case 109: break;
        case 28: 
          { return MsilTokens.INT16_KEYWORD;
          }
        case 110: break;
        case 33: 
          { return MsilTokens._EVENT_KEYWORD;
          }
        case 111: break;
        case 30: 
          { return MsilTokens.INT32_KEYWORD;
          }
        case 112: break;
        case 11: 
          { return MsilTokens.LPAR;
          }
        case 113: break;
        case 13: 
          { return MsilTokens.EQ;
          }
        case 114: break;
        case 14: 
          { return MsilTokens.AND;
          }
        case 115: break;
        case 4: 
          { return MsilTokens.IDENTIFIER;
          }
        case 116: break;
        case 53: 
          { return MsilTokens.INITONLY_KEYWORD;
          }
        case 117: break;
        case 17: 
          { return MsilTokens.BLOCK_COMMENT;
          }
        case 118: break;
        case 50: 
          { return MsilTokens.VIRTUAL_KEYWORD;
          }
        case 119: break;
        case 40: 
          { return MsilTokens.UINT64_KEYWORD;
          }
        case 120: break;
        case 35: 
          { return MsilTokens._PARAM_KEYWORD;
          }
        case 121: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 122: break;
        case 45: 
          { return MsilTokens._METHOD_KEYWORD;
          }
        case 123: break;
        case 58: 
          { return MsilTokens.PROTECTED_KEYWORD;
          }
        case 124: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
