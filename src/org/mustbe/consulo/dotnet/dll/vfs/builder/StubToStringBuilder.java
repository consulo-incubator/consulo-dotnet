package org.mustbe.consulo.dotnet.dll.vfs.builder;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import com.intellij.openapi.util.text.StringUtil;
import edu.arizona.cs.mbel.mbel.TypeDef;

/**
 * @author VISTALL
 * @since 12.12.13.
 */
public class StubToStringBuilder
{
	private static final char GENERIC_MARKER_IN_NAME = '`';

	private TypeDef myTypeDef;
	private StubBlock myRoot;

	public StubToStringBuilder(TypeDef typeDef)
	{
		myTypeDef = typeDef;

		StubBlock namespaceBlock = processNamespace();
		if(namespaceBlock != null)
		{
			myRoot = namespaceBlock;
		}

		StubBlock typeBlock = processType();
		if(namespaceBlock != null)
		{
			namespaceBlock.getBlocks().add(typeBlock);
		}
		else
		{
			myRoot = typeBlock;
		}
	}

	@NotNull
	private StubBlock processType()
	{
		String name = myTypeDef.getName();
		int i = name.lastIndexOf(GENERIC_MARKER_IN_NAME);
		if(i > 0)
		{
			name = name.substring(0, i);
		}
		StubBlock stubBlock = new StubBlock("class " + name, '{', '}');
		return stubBlock;
	}

	@Nullable
	private StubBlock processNamespace()
	{
		String namespace = myTypeDef.getNamespace();
		if(StringUtil.isEmpty(namespace))
		{
			return null;
		}

		return new StubBlock("namespace " + namespace, '{', '}');
	}

	@NotNull
	public String gen()
	{
		assert myRoot != null;

		StringBuilder builder = new StringBuilder();
		builder.append("// Generated by decompiler from Consulo .NET plugin\n\n");

		processBlock(builder, myRoot, 0);

		return builder.toString();
	}

	private static void processBlock(StringBuilder builder, StubBlock root, int index)
	{
		builder.append(StringUtil.repeatSymbol('\t', index));
		builder.append(root.getStartText());
		builder.append('\n');
		builder.append(StringUtil.repeatSymbol('\t', index));
		builder.append(root.getIndents()[0]);
		builder.append('\n');

		for(StubBlock stubBlock : root.getBlocks())
		{
			processBlock(builder, stubBlock, index + 1);
		}

		builder.append(StringUtil.repeatSymbol('\t', index));
		builder.append(root.getIndents()[1]);
		builder.append('\n');
	}
}
