/* The following code was generated by JFlex 1.4.4 on 08.11.15 22:38 */

package org.mustbe.consulo.msil.lang.lexer;

import com.intellij.lexer.LexerBase;
import com.intellij.psi.tree.IElementType;
import org.mustbe.consulo.msil.lang.psi.MsilTokens;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.4
 * on 08.11.15 22:38 from the specification file
 * <tt>R:/_github.com/consulo/consulo-dotnet/msil-psi-impl/src/org/mustbe/consulo/msil/lang/lexer/_MsilLexer.flex</tt>
 */
public class _MsilLexer extends LexerBase {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\1\1\3\1\0\1\1\1\3\16\10\4\0\1\1\1\22"+
    "\1\15\1\0\1\10\1\0\1\31\1\13\1\26\1\27\1\4\1\33"+
    "\1\32\1\5\1\7\1\2\1\6\1\61\1\64\1\63\1\65\1\6"+
    "\1\62\1\6\1\60\1\6\1\23\1\0\1\20\1\30\1\21\1\0"+
    "\1\11\32\10\1\24\1\14\1\25\1\0\1\10\1\12\1\36\1\56"+
    "\1\34\1\47\1\45\1\50\1\57\1\46\1\51\1\66\1\10\1\35"+
    "\1\44\1\55\1\41\1\52\1\10\1\42\1\37\1\40\1\43\1\54"+
    "\1\10\1\67\1\53\1\70\1\16\1\0\1\17\1\0\41\10\2\0"+
    "\4\10\4\0\1\10\2\0\1\10\7\0\1\10\4\0\1\10\5\0"+
    "\27\10\1\0\37\10\1\0\u013f\10\31\0\162\10\4\0\14\10\16\0"+
    "\5\10\11\0\1\10\21\0\130\10\5\0\23\10\12\0\1\10\13\0"+
    "\1\10\1\0\3\10\1\0\1\10\1\0\24\10\1\0\54\10\1\0"+
    "\46\10\1\0\5\10\4\0\202\10\1\0\4\10\3\0\105\10\1\0"+
    "\46\10\2\0\2\10\6\0\20\10\41\0\46\10\2\0\1\10\7\0"+
    "\47\10\11\0\21\10\1\0\27\10\1\0\3\10\1\0\1\10\1\0"+
    "\2\10\1\0\1\10\13\0\33\10\5\0\3\10\15\0\4\10\14\0"+
    "\6\10\13\0\32\10\5\0\13\10\16\10\7\0\12\10\4\0\2\10"+
    "\1\10\143\10\1\0\1\10\10\10\1\0\6\10\2\10\2\10\1\0"+
    "\4\10\2\10\12\10\3\10\2\0\1\10\17\0\1\10\1\10\1\10"+
    "\36\10\33\10\2\0\3\10\60\0\46\10\13\10\1\10\u014f\0\3\10"+
    "\66\10\2\0\1\10\1\10\20\10\2\0\1\10\4\10\3\0\12\10"+
    "\2\10\2\0\12\10\21\0\3\10\1\0\10\10\2\0\2\10\2\0"+
    "\26\10\1\0\7\10\1\0\1\10\3\0\4\10\2\0\1\10\1\10"+
    "\7\10\2\0\2\10\2\0\3\10\11\0\1\10\4\0\2\10\1\0"+
    "\3\10\2\10\2\0\12\10\4\10\15\0\3\10\1\0\6\10\4\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10\1\0"+
    "\2\10\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10\13\0"+
    "\4\10\1\0\1\10\7\0\14\10\3\10\14\0\3\10\1\0\11\10"+
    "\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10"+
    "\2\0\1\10\1\10\10\10\1\0\3\10\1\0\3\10\2\0\1\10"+
    "\17\0\2\10\2\10\2\0\12\10\1\0\1\10\17\0\3\10\1\0"+
    "\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\5\10\2\0\1\10\1\10\6\10\3\0\2\10\2\0\3\10\10\0"+
    "\2\10\4\0\2\10\1\0\3\10\4\0\12\10\1\0\1\10\20\0"+
    "\1\10\1\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10"+
    "\1\0\1\10\1\0\2\10\3\0\2\10\3\0\3\10\3\0\10\10"+
    "\1\0\3\10\4\0\5\10\3\0\3\10\1\0\4\10\11\0\1\10"+
    "\17\0\11\10\11\0\1\10\7\0\3\10\1\0\10\10\1\0\3\10"+
    "\1\0\27\10\1\0\12\10\1\0\5\10\4\0\7\10\1\0\3\10"+
    "\1\0\4\10\7\0\2\10\11\0\2\10\4\0\12\10\22\0\2\10"+
    "\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10"+
    "\2\0\1\10\1\10\7\10\1\0\3\10\1\0\4\10\7\0\2\10"+
    "\7\0\1\10\1\0\2\10\4\0\12\10\22\0\2\10\1\0\10\10"+
    "\1\0\3\10\1\0\27\10\1\0\20\10\4\0\6\10\2\0\3\10"+
    "\1\0\4\10\11\0\1\10\10\0\2\10\4\0\12\10\22\0\2\10"+
    "\1\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10"+
    "\3\0\1\10\4\0\6\10\1\0\1\10\1\0\10\10\22\0\2\10"+
    "\15\0\60\10\1\10\2\10\7\10\4\0\10\10\10\10\1\0\12\10"+
    "\47\0\2\10\1\0\1\10\2\0\2\10\1\0\1\10\2\0\1\10"+
    "\6\0\4\10\1\0\7\10\1\0\3\10\1\0\1\10\1\0\1\10"+
    "\2\0\2\10\1\0\4\10\1\10\2\10\6\10\1\0\2\10\1\10"+
    "\2\0\5\10\1\0\1\10\1\0\6\10\2\0\12\10\2\0\2\10"+
    "\42\0\1\10\27\0\2\10\6\0\12\10\13\0\1\10\1\0\1\10"+
    "\1\0\1\10\4\0\2\10\10\10\1\0\42\10\6\0\24\10\1\0"+
    "\2\10\4\10\4\0\10\10\1\0\44\10\11\0\1\10\71\0\42\10"+
    "\1\0\5\10\1\0\2\10\1\0\7\10\3\0\4\10\6\0\12\10"+
    "\6\0\6\10\4\10\106\0\46\10\12\0\51\10\7\0\132\10\5\0"+
    "\104\10\5\0\122\10\6\0\7\10\1\0\77\10\1\0\1\10\1\0"+
    "\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\47\10\1\0"+
    "\1\10\1\0\4\10\2\0\37\10\1\0\1\10\1\0\4\10\2\0"+
    "\7\10\1\0\1\10\1\0\4\10\2\0\7\10\1\0\7\10\1\0"+
    "\27\10\1\0\37\10\1\0\1\10\1\0\4\10\2\0\7\10\1\0"+
    "\47\10\1\0\23\10\16\0\11\10\56\0\125\10\14\0\u026c\10\2\0"+
    "\10\10\12\0\32\10\5\0\113\10\3\0\3\10\17\0\15\10\1\0"+
    "\4\10\3\10\13\0\22\10\3\10\13\0\22\10\2\10\14\0\15\10"+
    "\1\0\3\10\1\0\2\10\14\0\64\10\40\10\3\0\1\10\3\0"+
    "\2\10\1\10\2\0\12\10\41\0\3\10\2\0\12\10\6\0\130\10"+
    "\10\0\51\10\1\10\126\0\35\10\3\0\14\10\4\0\14\10\12\0"+
    "\12\10\36\10\2\0\5\10\u038b\0\154\10\224\0\234\10\4\0\132\10"+
    "\6\0\26\10\2\0\6\10\2\0\46\10\2\0\6\10\2\0\10\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\37\10\2\0\65\10"+
    "\1\0\7\10\1\0\1\10\3\0\3\10\1\0\7\10\3\0\4\10"+
    "\2\0\6\10\4\0\15\10\5\0\3\10\1\0\7\10\17\0\4\10"+
    "\32\0\5\10\20\0\2\10\23\0\1\10\13\0\4\10\6\0\6\10"+
    "\1\0\1\10\15\0\1\10\40\0\22\10\36\0\15\10\4\0\1\10"+
    "\3\0\6\10\27\0\1\10\4\0\1\10\2\0\12\10\1\0\1\10"+
    "\3\0\5\10\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10"+
    "\1\0\3\10\1\0\7\10\3\0\3\10\5\0\5\10\26\0\44\10"+
    "\u0e81\0\3\10\31\0\11\10\6\10\1\0\5\10\2\0\5\10\4\0"+
    "\126\10\2\0\2\10\2\0\3\10\1\0\137\10\5\0\50\10\4\0"+
    "\136\10\21\0\30\10\70\0\20\10\u0200\0\u19b6\10\112\0\u51a6\10\132\0"+
    "\u048d\10\u0773\0\u2ba4\10\u215c\0\u012e\10\2\0\73\10\225\0\7\10\14\0"+
    "\5\10\5\0\1\10\1\10\12\10\1\0\15\10\1\0\5\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0"+
    "\100\10\2\0\66\10\50\0\15\10\3\0\20\10\20\0\4\10\17\0"+
    "\2\10\30\0\3\10\31\0\1\10\6\0\5\10\1\0\207\10\2\0"+
    "\1\10\4\0\1\10\13\0\12\10\7\0\32\10\4\0\1\10\1\0"+
    "\32\10\12\0\132\10\3\0\6\10\2\0\6\10\2\0\6\10\2\0"+
    "\3\10\3\0\2\10\3\0\2\10\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\2\6\1\7\1\10\1\11\1\12\1\13\1\14\1\1"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\20\6\1\25\1\26\1\5\2\0\1\6\12\0\2\6"+
    "\2\7\1\27\2\0\34\6\3\0\1\30\1\31\21\0"+
    "\26\6\1\32\13\6\1\26\1\30\6\0\1\33\6\0"+
    "\1\34\2\0\1\35\1\6\1\36\10\6\1\37\1\40"+
    "\2\6\1\41\7\6\1\42\11\6\1\43\3\6\1\44"+
    "\2\0\1\45\11\0\1\46\1\47\1\50\12\6\1\51"+
    "\7\6\1\52\2\6\1\53\1\54\1\55\4\6\1\56"+
    "\4\6\1\57\1\60\2\0\1\61\2\0\1\62\1\63"+
    "\1\64\1\0\3\6\1\65\1\66\1\67\2\6\1\70"+
    "\1\6\1\71\1\72\1\73\12\6\1\74\1\6\1\75"+
    "\2\6\1\76\1\77\2\0\1\100\1\0\1\101\5\6"+
    "\1\102\1\6\1\103\1\104\5\6\1\105\1\6\1\106"+
    "\1\107\3\0\1\110\1\111\7\6\1\112\2\6\1\113"+
    "\1\114\1\115\3\6\1\116\2\6\1\117\1\120\1\121"+
    "\3\6\1\122\1\123\1\6\1\124\1\6\1\125\1\6"+
    "\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\71\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\71\0\71\0\71\0\71\0\71"+
    "\0\u023a\0\u0273\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402"+
    "\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca"+
    "\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792"+
    "\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a"+
    "\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\71\0\71\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78"+
    "\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40"+
    "\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008"+
    "\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0"+
    "\0\71\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f"+
    "\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527"+
    "\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef"+
    "\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7"+
    "\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f"+
    "\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47"+
    "\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\71\0\u1197\0\u1d64\0\u1d9d"+
    "\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\71\0\u1eba\0\u1ef3\0\u1f2c"+
    "\0\u1f65\0\u1f9e\0\u1fd7\0\71\0\u2010\0\u2049\0\71\0\u2082"+
    "\0\u018f\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211"+
    "\0\u224a\0\u018f\0\u018f\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367"+
    "\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484\0\u018f\0\u24bd\0\u24f6"+
    "\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u018f"+
    "\0\u26be\0\u26f7\0\u2730\0\u018f\0\u2769\0\u27a2\0\71\0\u27db"+
    "\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3"+
    "\0\71\0\71\0\u018f\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0"+
    "\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u018f\0\u2c16\0\u2c4f"+
    "\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u018f\0\u2da5\0\u2dde"+
    "\0\u018f\0\u018f\0\u018f\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb"+
    "\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\71\0\71\0\u3018\0\u3051"+
    "\0\71\0\u308a\0\u30c3\0\71\0\71\0\71\0\u30fc\0\u3135"+
    "\0\u316e\0\u31a7\0\u018f\0\u018f\0\u018f\0\u31e0\0\u3219\0\u018f"+
    "\0\u3252\0\u018f\0\u018f\0\u018f\0\u328b\0\u32c4\0\u32fd\0\u3336"+
    "\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c\0\u018f\0\u34c5"+
    "\0\u018f\0\u34fe\0\u3537\0\u018f\0\71\0\u3570\0\u35a9\0\71"+
    "\0\u35e2\0\u018f\0\u361b\0\u3654\0\u368d\0\u36c6\0\u36ff\0\u018f"+
    "\0\u3738\0\u018f\0\u018f\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855"+
    "\0\u018f\0\u388e\0\u018f\0\u018f\0\u38c7\0\u3900\0\u3939\0\u018f"+
    "\0\u018f\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8"+
    "\0\u018f\0\u3b01\0\u3b3a\0\71\0\71\0\71\0\u3b73\0\u3bac"+
    "\0\u3be5\0\u018f\0\u3c1e\0\u3c57\0\u018f\0\u018f\0\u018f\0\u3c90"+
    "\0\u3cc9\0\u3d02\0\u018f\0\u018f\0\u3d3b\0\u018f\0\u3d74\0\u018f"+
    "\0\u3dad\0\u018f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\2\11\1\2\1\12\1\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\11\1\42\1\43\1\11\1\44"+
    "\1\45\1\46\1\11\1\47\1\50\1\51\1\11\6\7"+
    "\3\11\72\0\1\3\1\0\1\3\67\0\1\52\1\0"+
    "\1\53\72\0\1\54\51\0\6\54\5\0\1\55\3\0"+
    "\1\7\1\56\2\11\1\57\21\0\24\11\6\7\3\11"+
    "\7\0\1\60\24\0\1\61\1\0\1\62\1\63\2\0"+
    "\1\64\1\0\1\65\1\66\2\0\1\67\1\0\1\70"+
    "\4\0\1\71\13\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\35\11\2\12\1\72\1\0\3\12\1\72"+
    "\3\12\2\73\54\12\3\13\1\0\10\13\1\74\1\75"+
    "\53\13\23\0\1\76\106\0\1\77\7\0\1\100\21\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\1\11"+
    "\1\101\10\11\1\102\22\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\15\11\1\103\17\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\3\11"+
    "\1\104\16\11\1\105\12\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\4\11\1\106\4\11\1\107"+
    "\4\11\1\110\16\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\6\11\1\111\10\11\1\112\15\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\22\11\1\113\12\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\4\11\1\114\30\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\15\11\1\115"+
    "\17\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\33\11\1\116\1\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\15\11\1\117\17\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\1\11"+
    "\1\120\1\121\12\11\1\122\17\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\10\11\1\123\10\11"+
    "\1\124\13\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\6\11\1\125\1\126\25\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\2\11\1\127"+
    "\2\11\1\130\7\11\1\131\17\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\7\11\1\132\1\11"+
    "\1\133\23\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\5\11\1\134\27\11\3\52\1\0\65\52"+
    "\4\53\1\135\64\53\6\0\1\54\1\136\50\0\6\54"+
    "\11\0\1\11\1\0\2\11\1\0\1\12\20\0\35\11"+
    "\5\0\1\137\1\140\1\0\2\11\1\0\1\12\20\0"+
    "\24\11\6\140\3\11\2\0\1\55\3\0\1\57\1\55"+
    "\1\57\23\0\35\57\7\0\1\141\115\0\1\142\1\143"+
    "\2\0\1\144\2\0\1\145\64\0\1\146\7\0\1\147"+
    "\66\0\1\150\70\0\1\151\70\0\1\152\77\0\1\153"+
    "\65\0\1\154\55\0\1\155\3\0\1\156\73\0\1\157"+
    "\23\0\2\12\1\72\1\0\3\12\1\72\4\12\1\73"+
    "\54\12\2\0\1\55\4\0\1\55\61\0\3\13\1\0"+
    "\65\13\43\0\1\160\6\0\1\161\73\0\1\162\15\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\2\11"+
    "\1\163\32\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\2\11\1\164\32\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\4\11\1\165\30\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\3\11\1\166\31\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\3\11\1\167\31\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\2\11\1\170"+
    "\3\11\1\171\26\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\2\11\1\172\3\11\1\173\26\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\11\11\1\174\23\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\7\11\1\175\25\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\16\11\1\176"+
    "\16\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\32\11\1\177\2\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\3\11\1\200\31\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\21\11"+
    "\1\201\13\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\4\11\1\202\30\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\13\11\1\203\21\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\5\11\1\204\27\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\1\11\1\205\6\11\1\206\24\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\21\11\1\207\13\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\16\11\1\210\16\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\4\11\1\211"+
    "\10\11\1\212\17\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\5\11\1\213\7\11\1\214\17\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\22\11\1\215\12\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\1\11\1\216\4\11\1\217\26\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\15\11\1\220\17\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\6\11\1\221\26\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\1\11\1\222"+
    "\33\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\3\11\1\223\31\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\5\11\1\224\27\11\2\53"+
    "\1\225\1\53\1\135\64\53\5\0\1\137\1\226\51\0"+
    "\6\226\11\0\1\226\51\0\6\226\5\0\1\55\3\0"+
    "\1\140\1\55\2\11\1\57\21\0\24\11\6\140\3\11"+
    "\40\0\1\227\66\0\1\230\73\0\1\231\66\0\1\232"+
    "\70\0\1\233\100\0\1\234\61\0\1\235\74\0\1\236"+
    "\64\0\1\237\75\0\1\240\70\0\1\241\65\0\1\242"+
    "\67\0\1\243\67\0\1\244\70\0\1\245\70\0\1\246"+
    "\55\0\1\247\45\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\3\11\1\250\31\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\6\11\1\251\26\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\11\11\1\252\23\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\11\11\1\253\23\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\4\11\1\254"+
    "\30\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\4\11\1\255\30\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\15\11\1\256\17\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\1\11"+
    "\1\257\33\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\15\11\1\260\17\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\1\261\34\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\11\11"+
    "\1\262\23\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\11\11\1\263\23\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\11\11\1\264\23\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\16\11\1\265\16\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\4\11\1\266\30\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\11\11\1\267"+
    "\23\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\11\11\1\270\23\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\2\11\1\271\32\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\3\11"+
    "\1\175\31\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\5\11\1\272\27\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\2\11\1\273\32\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\1\11\1\274\33\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\11\11\1\275\12\11\1\276\1\277"+
    "\1\300\1\301\5\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\4\11\1\302\30\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\4\11\1\303"+
    "\30\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\20\11\1\304\14\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\1\11\1\305\33\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\7\11"+
    "\1\306\25\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\2\11\1\307\32\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\13\11\1\310\21\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\4\11\1\311\30\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\1\11\1\312\33\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\4\11\1\313"+
    "\30\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\1\11\1\314\33\11\41\0\1\315\66\0\1\316"+
    "\73\0\1\317\66\0\1\320\75\0\1\321\64\0\1\322"+
    "\70\0\1\323\75\0\1\324\77\0\1\325\50\0\1\326"+
    "\71\0\1\327\104\0\1\330\43\0\1\331\70\0\1\332"+
    "\45\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\3\11\1\333\31\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\6\11\1\334\26\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\10\11\1\335"+
    "\24\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\6\11\1\336\26\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\15\11\1\337\17\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\21\11"+
    "\1\340\13\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\11\11\1\341\23\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\2\11\1\342\32\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\15\11\1\343\17\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\1\344\34\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\11\11\1\345\23\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\24\11\1\346\1\347\1\350\1\351\5\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\21\11\1\352"+
    "\13\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\22\11\1\353\12\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\4\11\1\354\30\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\6\11"+
    "\1\355\26\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\1\11\1\356\33\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\11\11\1\357\23\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\6\11\1\360\26\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\26\11\1\361\6\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\31\11\1\362"+
    "\3\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\30\11\1\363\4\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\5\11\1\364\27\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\11\11"+
    "\1\365\23\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\2\11\1\366\32\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\15\11\1\367\17\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\11\11\1\370\23\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\6\11\1\371\26\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\7\11\1\372"+
    "\25\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\6\11\1\373\26\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\11\11\1\374\23\11\42\0"+
    "\1\375\65\0\1\376\72\0\1\377\73\0\1\u0100\101\0"+
    "\1\u0101\67\0\1\u0102\55\0\1\u0103\67\0\1\u0104\77\0"+
    "\1\u0105\65\0\1\u0106\71\0\1\u0107\25\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\2\11\1\u0108\32\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\22\11\1\u0109\12\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\2\11\1\u010a\32\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\1\u010b\34\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\23\11\1\u010c\11\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\13\11\1\u010d\21\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\1\11\1\u010e"+
    "\33\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\2\11\1\u010f\32\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\4\11\1\u0110\30\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\1\u0111"+
    "\34\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\26\11\1\u0112\6\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\31\11\1\u0113\3\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\30\11"+
    "\1\u0114\4\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\13\11\1\u0115\21\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\17\11\1\u0116\15\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\26\11\1\u0117\1\u0118\5\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\2\11\1\u0119\32\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\10\11"+
    "\1\u011a\24\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\14\11\1\u011b\20\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\21\11\1\u011c\13\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\1\u011d\34\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\4\11\1\u011e\30\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\1\u011f\34\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\4\11"+
    "\1\u0120\30\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\23\11\1\u0121\11\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\2\11\1\u0122\32\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\11\11\1\u0123\23\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\13\11\1\u0124\21\11\44\0\1\u0125"+
    "\102\0\1\u0126\57\0\1\u0127\72\0\1\u0128\63\0\1\u0129"+
    "\30\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\1\11\1\u012a\33\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\1\11\1\u012b\33\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\1\u012c\34\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\15\11\1\u012d\17\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\1\11\1\u012e\33\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\15\11\1\u012f"+
    "\17\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\3\11\1\u0130\31\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\3\11\1\u0131\31\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\31\11"+
    "\1\u0132\3\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\30\11\1\u0133\4\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\3\11\1\u0134\31\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\11\11\1\u0135\23\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\2\11\1\u0136\32\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\1\11\1\u0137"+
    "\33\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\4\11\1\u0138\30\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\11\11\1\u0139\23\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\17\11"+
    "\1\u013a\15\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\1\11\1\u013b\33\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\14\11\1\u013c\20\11"+
    "\35\0\1\u013d\74\0\1\u013e\67\0\1\u013f\32\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\17\11\1\u0140"+
    "\15\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\4\11\1\u0141\30\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\34\11\1\u0142\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\21\11\1\u0143"+
    "\13\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\2\11\1\u0144\32\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\15\11\1\u0145\17\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\3\11"+
    "\1\u0146\31\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\21\11\1\u0147\13\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\1\u0148\34\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\17\11"+
    "\1\u0149\15\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\11\11\1\u014a\23\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\16\11\1\u014b\16\11"+
    "\53\0\1\u014c\72\0\1\u014d\66\0\1\u014e\17\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\2\11\1\u014f"+
    "\32\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\2\11\1\u0150\32\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\1\11\1\u0151\33\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\23\11"+
    "\1\u0152\11\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\11\11\1\u0153\23\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\4\11\1\u0154\30\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\11\11\1\u0155\23\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\13\11\1\u0156\21\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\11\11\1\u0157"+
    "\23\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\22\11\1\u0158\12\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\10\11\1\u0159\24\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\21\11"+
    "\1\u015a\13\11\2\0\1\55\3\0\1\11\1\55\2\11"+
    "\1\57\21\0\10\11\1\u015b\24\11\2\0\1\55\3\0"+
    "\1\11\1\55\2\11\1\57\21\0\3\11\1\u015c\31\11"+
    "\2\0\1\55\3\0\1\11\1\55\2\11\1\57\21\0"+
    "\1\11\1\u015d\33\11\2\0\1\55\3\0\1\11\1\55"+
    "\2\11\1\57\21\0\11\11\1\u015e\23\11\2\0\1\55"+
    "\3\0\1\11\1\55\2\11\1\57\21\0\2\11\1\u015f"+
    "\32\11\2\0\1\55\3\0\1\11\1\55\2\11\1\57"+
    "\21\0\11\11\1\u0160\23\11\2\0\1\55\3\0\1\11"+
    "\1\55\2\11\1\57\21\0\10\11\1\u0161\24\11\2\0"+
    "\1\55\3\0\1\11\1\55\2\11\1\57\21\0\11\11"+
    "\1\u0162\23\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15846];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\6\1\5\11\2\1\7\11"+
    "\23\1\2\0\1\1\12\0\3\1\2\11\2\0\34\1"+
    "\3\0\1\1\1\11\21\0\42\1\1\11\1\1\6\0"+
    "\1\11\6\0\1\11\2\0\1\11\45\1\2\0\1\11"+
    "\11\0\2\11\42\1\2\11\2\0\1\11\2\0\3\11"+
    "\1\0\35\1\1\11\2\0\1\11\1\0\23\1\3\0"+
    "\14\1\3\11\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  private IElementType myTokenType;
  private int myState;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;



  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1776) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  @Override
  public IElementType getTokenType() {
    if (myTokenType == null) locateToken();
    return myTokenType;
  }

  @Override
  public final int getTokenStart(){
    if (myTokenType == null) locateToken();
    return zzStartRead;
  }

  @Override
  public final int getTokenEnd(){
    if (myTokenType == null) locateToken();
    return getTokenStart() + yylength();
  }

  @Override
  public void advance() {
    if (myTokenType == null) locateToken();
    myTokenType = null;
  }

  @Override
  public int getState() {
    if (myTokenType == null) locateToken();
    return myState;
  }

  @Override
  public void start(final CharSequence buffer, int startOffset, int endOffset, final int initialState) {
    reset(buffer, startOffset, endOffset, initialState);
    myTokenType = null;
  }

   @Override
   public CharSequence getBufferSequence() {
     return zzBuffer;
   }

   @Override
   public int getBufferEnd() {
     return zzEndRead;
   }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
    myTokenType = null;
  }

   private void locateToken() {
     if (myTokenType != null) return;
     try {
       myState = yystate();
       myTokenType = advanceImpl();
     }
     catch (java.io.IOException e) { /*Can't happen*/ }
     catch (Error e) {
       // add lexer class name to the error
       final Error error = new Error(getClass().getName() + ": " + e.getMessage());
       error.setStackTrace(e.getStackTrace());
       throw error;
     }
   }

   /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advanceImpl() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { return MsilTokens.CHAR_KEYWORD;
          }
        case 87: break;
        case 71: 
          { return MsilTokens.NULLREF_KEYWORD;
          }
        case 88: break;
        case 60: 
          { return MsilTokens.PUBLIC_KEYWORD;
          }
        case 89: break;
        case 10: 
          { return MsilTokens.LT;
          }
        case 90: break;
        case 6: 
          { return MsilTokens.IDENTIFIER;
          }
        case 91: break;
        case 25: 
          { return MsilTokens.ELLIPSIS;
          }
        case 92: break;
        case 29: 
          { return MsilTokens.BRACKET_IN_KEYWORD;
          }
        case 93: break;
        case 15: 
          { return MsilTokens.LPAR;
          }
        case 94: break;
        case 70: 
          { return MsilTokens.VIRTUAL_KEYWORD;
          }
        case 95: break;
        case 50: 
          { return MsilTokens._EVENT_KEYWORD;
          }
        case 96: break;
        case 64: 
          { return MsilTokens._METHOD_KEYWORD;
          }
        case 97: break;
        case 23: 
          { return MsilTokens.COLONCOLON;
          }
        case 98: break;
        case 69: 
          { return MsilTokens.PRIVATE_KEYWORD;
          }
        case 99: break;
        case 72: 
          { return MsilTokens.ASSEMBLY_KEYWORD;
          }
        case 100: break;
        case 58: 
          { return MsilTokens.UINT64_KEYWORD;
          }
        case 101: break;
        case 32: 
          { return MsilTokens.TYPE_KEYWORD;
          }
        case 102: break;
        case 11: 
          { return MsilTokens.GT;
          }
        case 103: break;
        case 40: 
          { return MsilTokens.CLASS_KEYWORD;
          }
        case 104: break;
        case 81: 
          { return MsilTokens.VALUETYPE_KEYWORD;
          }
        case 105: break;
        case 9: 
          { return MsilTokens.RBRACE;
          }
        case 106: break;
        case 56: 
          { return MsilTokens.OBJECT_KEYWORD;
          }
        case 107: break;
        case 53: 
          { return MsilTokens.STATIC_KEYWORD;
          }
        case 108: break;
        case 35: 
          { return MsilTokens.VOID_KEYWORD;
          }
        case 109: break;
        case 57: 
          { return MsilTokens.UINT16_KEYWORD;
          }
        case 110: break;
        case 31: 
          { return MsilTokens.BOOL_LITERAL;
          }
        case 111: break;
        case 51: 
          { return MsilTokens._FIELD_KEYWORD;
          }
        case 112: break;
        case 5: 
          { return MsilTokens.NUMBER_LITERAL;
          }
        case 113: break;
        case 82: 
          { return MsilTokens.FAMORASSEMBLY_KEYWORD;
          }
        case 114: break;
        case 61: 
          { return MsilTokens.VARARG_KEYWORD;
          }
        case 115: break;
        case 19: 
          { return MsilTokens.COMMA;
          }
        case 116: break;
        case 2: 
          { return MsilTokens.WHITE_SPACE;
          }
        case 117: break;
        case 66: 
          { return MsilTokens.EXTENDS_KEYWORD;
          }
        case 118: break;
        case 46: 
          { return MsilTokens.VALUE_KEYWORD;
          }
        case 119: break;
        case 8: 
          { return MsilTokens.LBRACE;
          }
        case 120: break;
        case 49: 
          { return MsilTokens._ADDON_KEYWORD;
          }
        case 121: break;
        case 24: 
          { return MsilTokens.DOUBLE_LITERAL;
          }
        case 122: break;
        case 39: 
          { return MsilTokens.BRACKET_OPT_KEYWORD;
          }
        case 123: break;
        case 26: 
          { return MsilTokens.INT_KEYWORD;
          }
        case 124: break;
        case 14: 
          { return MsilTokens.RBRACKET;
          }
        case 125: break;
        case 45: 
          { return MsilTokens.INT32_KEYWORD;
          }
        case 126: break;
        case 63: 
          { return MsilTokens._CUSTOM_KEYWORD;
          }
        case 127: break;
        case 20: 
          { return MsilTokens.PLUS;
          }
        case 128: break;
        case 38: 
          { return MsilTokens.BRACKET_OUT_KEYWORD;
          }
        case 129: break;
        case 78: 
          { return MsilTokens.HIDEBYSIG_KEYWORD;
          }
        case 130: break;
        case 7: 
          { return MsilTokens.STRING_LITERAL;
          }
        case 131: break;
        case 68: 
          { return MsilTokens.FLOAT32_KEYWORD;
          }
        case 132: break;
        case 18: 
          { return MsilTokens.AND;
          }
        case 133: break;
        case 12: 
          { return MsilTokens.EXCL;
          }
        case 134: break;
        case 36: 
          { return MsilTokens.BOOL_KEYWORD;
          }
        case 135: break;
        case 77: 
          { return MsilTokens._PROPERTY_KEYWORD;
          }
        case 136: break;
        case 80: 
          { return MsilTokens.PROTECTED_KEYWORD;
          }
        case 137: break;
        case 47: 
          { return MsilTokens._CCTOR_KEYWORD;
          }
        case 138: break;
        case 65: 
          { return MsilTokens.LITERAL_KEYWORD;
          }
        case 139: break;
        case 76: 
          { return MsilTokens._REMOVEON_KEYWORD;
          }
        case 140: break;
        case 44: 
          { return MsilTokens.INT64_KEYWORD;
          }
        case 141: break;
        case 13: 
          { return MsilTokens.LBRACKET;
          }
        case 142: break;
        case 84: 
          { return MsilTokens.SPECIALNAME_KEYWORD;
          }
        case 143: break;
        case 85: 
          { return MsilTokens.SERIALIZABLE_KEYWORD;
          }
        case 144: break;
        case 34: 
          { return MsilTokens.INT8_KEYWORD;
          }
        case 145: break;
        case 43: 
          { return MsilTokens.INT16_KEYWORD;
          }
        case 146: break;
        case 74: 
          { return MsilTokens.INITONLY_KEYWORD;
          }
        case 147: break;
        case 52: 
          { return MsilTokens._PARAM_KEYWORD;
          }
        case 148: break;
        case 17: 
          { return MsilTokens.EQ;
          }
        case 149: break;
        case 42: 
          { return MsilTokens.FINAL_KEYWORD;
          }
        case 150: break;
        case 79: 
          { return MsilTokens.INTERFACE_KEYWORD;
          }
        case 151: break;
        case 54: 
          { return MsilTokens.STRING_KEYWORD;
          }
        case 152: break;
        case 48: 
          { return MsilTokens._CLASS_KEYWORD;
          }
        case 153: break;
        case 67: 
          { return MsilTokens.FLOAT64_KEYWORD;
          }
        case 154: break;
        case 62: 
          { return MsilTokens.NESTED_KEYWORD;
          }
        case 155: break;
        case 33: 
          { return MsilTokens.UINT_KEYWORD;
          }
        case 156: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 157: break;
        case 4: 
          { return MsilTokens.MINUS;
          }
        case 158: break;
        case 27: 
          { return MsilTokens._SET_KEYWORD;
          }
        case 159: break;
        case 22: 
          { return MsilTokens.BLOCK_COMMENT;
          }
        case 160: break;
        case 59: 
          { return MsilTokens.UINT32_KEYWORD;
          }
        case 161: break;
        case 83: 
          { return MsilTokens.IMPLEMENTS_KEYWORD;
          }
        case 162: break;
        case 28: 
          { return MsilTokens._GET_KEYWORD;
          }
        case 163: break;
        case 86: 
          { return MsilTokens.RTSPECIALNAME_KEYWORD;
          }
        case 164: break;
        case 41: 
          { return MsilTokens.UINT8_KEYWORD;
          }
        case 165: break;
        case 73: 
          { return MsilTokens.ABSTRACT_KEYWORD;
          }
        case 166: break;
        case 21: 
          { return MsilTokens.LINE_COMMENT;
          }
        case 167: break;
        case 55: 
          { return MsilTokens.SEALED_KEYWORD;
          }
        case 168: break;
        case 3: 
          { return MsilTokens.PERC;
          }
        case 169: break;
        case 75: 
          { return MsilTokens._ASSEMBLY_KEYWORD;
          }
        case 170: break;
        case 37: 
          { return MsilTokens._CTOR_KEYWORD;
          }
        case 171: break;
        case 16: 
          { return MsilTokens.RPAR;
          }
        case 172: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
