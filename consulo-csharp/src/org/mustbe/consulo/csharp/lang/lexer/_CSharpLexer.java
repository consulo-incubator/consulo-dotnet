/* The following code was generated by JFlex 1.4.3 on 04.12.13 18:56 */

package org.mustbe.consulo.csharp.lang.lexer;

import java.util.*;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.mustbe.consulo.csharp.lang.psi.CSharpTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 04.12.13 18:56 from the specification file
 * <tt>_CSharpLexer.flex</tt>
 */
class _CSharpLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\14\1\3\1\13\1\0\1\3\1\5\16\14\4\0\1\3\1\0"+
    "\1\11\1\0\1\2\2\0\1\7\1\61\1\62\1\6\1\35\1\70"+
    "\1\35\1\32\1\4\1\22\11\1\1\66\1\67\1\63\1\65\1\64"+
    "\1\0\1\12\1\17\1\25\1\17\1\31\1\34\1\27\5\2\1\21"+
    "\3\2\1\37\7\2\1\23\2\2\1\57\1\10\1\60\1\0\1\15"+
    "\1\0\1\51\1\24\1\16\1\30\1\33\1\26\1\44\1\2\1\42"+
    "\2\2\1\20\1\52\1\43\1\50\1\36\1\2\1\46\1\41\1\45"+
    "\1\40\1\47\1\53\1\23\1\54\1\2\1\55\1\0\1\56\1\0"+
    "\41\14\2\0\4\2\4\0\1\2\2\0\1\14\7\0\1\2\4\0"+
    "\1\2\5\0\27\2\1\0\37\2\1\0\u013f\2\31\0\162\2\4\0"+
    "\14\2\16\0\5\2\11\0\1\2\21\0\130\14\5\0\23\14\12\0"+
    "\1\2\13\0\1\2\1\0\3\2\1\0\1\2\1\0\24\2\1\0"+
    "\54\2\1\0\46\2\1\0\5\2\4\0\202\2\1\0\4\14\3\0"+
    "\105\2\1\0\46\2\2\0\2\2\6\0\20\2\41\0\46\2\2\0"+
    "\1\2\7\0\47\2\11\0\21\14\1\0\27\14\1\0\3\14\1\0"+
    "\1\14\1\0\2\14\1\0\1\14\13\0\33\2\5\0\3\2\15\0"+
    "\4\14\14\0\6\14\13\0\32\2\5\0\13\2\16\14\7\0\12\14"+
    "\4\0\2\2\1\14\143\2\1\0\1\2\10\14\1\0\6\14\2\2"+
    "\2\14\1\0\4\14\2\2\12\14\3\2\2\0\1\2\17\0\1\14"+
    "\1\2\1\14\36\2\33\14\2\0\3\2\60\0\46\2\13\14\1\2"+
    "\u014f\0\3\14\66\2\2\0\1\14\1\2\20\14\2\0\1\2\4\14"+
    "\3\0\12\2\2\14\2\0\12\14\21\0\3\14\1\0\10\2\2\0"+
    "\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2\2\0"+
    "\1\14\1\2\7\14\2\0\2\14\2\0\3\14\11\0\1\14\4\0"+
    "\2\2\1\0\3\2\2\14\2\0\12\14\4\2\15\0\3\14\1\0"+
    "\6\2\4\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0"+
    "\2\2\1\0\2\2\2\0\1\14\1\0\5\14\4\0\2\14\2\0"+
    "\3\14\13\0\4\2\1\0\1\2\7\0\14\14\3\2\14\0\3\14"+
    "\1\0\11\2\1\0\3\2\1\0\26\2\1\0\7\2\1\0\2\2"+
    "\1\0\5\2\2\0\1\14\1\2\10\14\1\0\3\14\1\0\3\14"+
    "\2\0\1\2\17\0\2\2\2\14\2\0\12\14\1\0\1\2\17\0"+
    "\3\14\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0"+
    "\2\2\1\0\5\2\2\0\1\14\1\2\6\14\3\0\2\14\2\0"+
    "\3\14\10\0\2\14\4\0\2\2\1\0\3\2\4\0\12\14\1\0"+
    "\1\2\20\0\1\14\1\2\1\0\6\2\3\0\3\2\1\0\4\2"+
    "\3\0\2\2\1\0\1\2\1\0\2\2\3\0\2\2\3\0\3\2"+
    "\3\0\10\2\1\0\3\2\4\0\5\14\3\0\3\14\1\0\4\14"+
    "\11\0\1\14\17\0\11\14\11\0\1\2\7\0\3\14\1\0\10\2"+
    "\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2\4\0\7\14"+
    "\1\0\3\14\1\0\4\14\7\0\2\14\11\0\2\2\4\0\12\14"+
    "\22\0\2\14\1\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2"+
    "\1\0\5\2\2\0\1\14\1\2\7\14\1\0\3\14\1\0\4\14"+
    "\7\0\2\14\7\0\1\2\1\0\2\2\4\0\12\14\22\0\2\14"+
    "\1\0\10\2\1\0\3\2\1\0\27\2\1\0\20\2\4\0\6\14"+
    "\2\0\3\14\1\0\4\14\11\0\1\14\10\0\2\2\4\0\12\14"+
    "\22\0\2\14\1\0\22\2\3\0\30\2\1\0\11\2\1\0\1\2"+
    "\2\0\7\2\3\0\1\14\4\0\6\14\1\0\1\14\1\0\10\14"+
    "\22\0\2\14\15\0\60\2\1\14\2\2\7\14\4\0\10\2\10\14"+
    "\1\0\12\14\47\0\2\2\1\0\1\2\2\0\2\2\1\0\1\2"+
    "\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2"+
    "\1\0\1\2\2\0\2\2\1\0\4\2\1\14\2\2\6\14\1\0"+
    "\2\14\1\2\2\0\5\2\1\0\1\2\1\0\6\14\2\0\12\14"+
    "\2\0\2\2\42\0\1\2\27\0\2\14\6\0\12\14\13\0\1\14"+
    "\1\0\1\14\1\0\1\14\4\0\2\14\10\2\1\0\42\2\6\0"+
    "\24\14\1\0\2\14\4\2\4\0\10\14\1\0\44\14\11\0\1\14"+
    "\71\0\42\2\1\0\5\2\1\0\2\2\1\0\7\14\3\0\4\14"+
    "\6\0\12\14\6\0\6\2\4\14\106\0\46\2\12\0\51\2\7\0"+
    "\132\2\5\0\104\2\5\0\122\2\6\0\7\2\1\0\77\2\1\0"+
    "\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0"+
    "\47\2\1\0\1\2\1\0\4\2\2\0\37\2\1\0\1\2\1\0"+
    "\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0"+
    "\7\2\1\0\27\2\1\0\37\2\1\0\1\2\1\0\4\2\2\0"+
    "\7\2\1\0\47\2\1\0\23\2\16\0\11\14\56\0\125\2\14\0"+
    "\u026c\2\2\0\10\2\12\0\32\2\5\0\113\2\3\0\3\2\17\0"+
    "\15\2\1\0\4\2\3\14\13\0\22\2\3\14\13\0\22\2\2\14"+
    "\14\0\15\2\1\0\3\2\1\0\2\14\14\0\64\2\40\14\3\0"+
    "\1\2\3\0\2\2\1\14\2\0\12\14\41\0\3\14\2\0\12\14"+
    "\6\0\130\2\10\0\51\2\1\14\126\0\35\2\3\0\14\14\4\0"+
    "\14\14\12\0\12\14\36\2\2\0\5\2\u038b\0\154\2\224\0\234\2"+
    "\4\0\132\2\6\0\26\2\2\0\6\2\2\0\46\2\2\0\6\2"+
    "\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\37\2"+
    "\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2"+
    "\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2\1\0\7\2"+
    "\17\0\4\14\32\0\5\14\20\0\2\2\23\0\1\2\13\0\4\14"+
    "\6\0\6\14\1\0\1\2\15\0\1\2\40\0\22\2\36\0\15\14"+
    "\4\0\1\14\3\0\6\14\27\0\1\2\4\0\1\2\2\0\12\2"+
    "\1\0\1\2\3\0\5\2\6\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\4\2\1\0\3\2\1\0\7\2\3\0\3\2\5\0\5\2"+
    "\26\0\44\2\u0e81\0\3\2\31\0\11\2\6\14\1\0\5\2\2\0"+
    "\5\2\4\0\126\2\2\0\2\14\2\0\3\2\1\0\137\2\5\0"+
    "\50\2\4\0\136\2\21\0\30\2\70\0\20\2\u0200\0\u19b6\2\112\0"+
    "\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2\2\0\73\2\225\0"+
    "\7\2\14\0\5\2\5\0\1\2\1\14\12\2\1\0\15\2\1\0"+
    "\5\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0\154\2\41\0"+
    "\u016b\2\22\0\100\2\2\0\66\2\50\0\15\2\3\0\20\14\20\0"+
    "\4\14\17\0\2\2\30\0\3\2\31\0\1\2\6\0\5\2\1\0"+
    "\207\2\2\0\1\14\4\0\1\2\13\0\12\14\7\0\32\2\4\0"+
    "\1\2\1\0\32\2\12\0\132\2\3\0\6\2\2\0\6\2\2\0"+
    "\6\2\2\0\3\2\3\0\2\2\3\0\2\2\22\0\3\14\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\1\1\3\1\2\1\3\1\7\11\3\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\3\26\1\27\1\30\2\5"+
    "\2\6\1\31\1\3\2\2\6\3\1\32\5\3\1\33"+
    "\1\26\1\27\1\34\1\30\2\31\1\3\1\2\1\0"+
    "\7\3\1\35\1\36\3\3\1\37\1\0\1\3\1\0"+
    "\1\3\1\40\11\3\1\41\1\30\1\42\1\3\1\43"+
    "\1\3\1\44\7\3\1\45\1\46\1\47\1\50\2\3"+
    "\1\51\3\3\1\52\2\3\1\53\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\u04e6"+
    "\0\71\0\71\0\71\0\71\0\71\0\u051f\0\u0558\0\u0591"+
    "\0\u05ca\0\71\0\u0603\0\u063c\0\71\0\u0675\0\u06ae\0\u06e7"+
    "\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af"+
    "\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\71\0\u0a05\0\u0a3e"+
    "\0\u0a77\0\u0ab0\0\u0ae9\0\71\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd"+
    "\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\253"+
    "\0\u0d95\0\u0dce\0\u0e07\0\253\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\253\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\u10ec\0\253\0\71\0\253\0\u1125\0\253\0\u115e"+
    "\0\253\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed"+
    "\0\253\0\253\0\253\0\253\0\u1326\0\u135f\0\253\0\u1398"+
    "\0\u13d1\0\u140a\0\253\0\u1443\0\u147c\0\253\0\253";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\2\1\7"+
    "\1\2\1\10\1\11\1\5\1\2\1\4\1\12\3\4"+
    "\1\13\5\4\1\14\1\4\1\15\1\16\1\4\1\2"+
    "\1\17\1\4\1\20\1\21\1\22\1\23\1\4\1\24"+
    "\1\4\1\25\1\26\4\4\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\72\0\1\3\13\0\1\3\2\0\2\43\1\3\3\0"+
    "\2\44\2\45\1\46\2\47\35\0\2\4\11\0\16\4"+
    "\1\0\2\4\1\0\17\4\17\0\1\5\1\0\1\5"+
    "\5\0\1\5\61\0\1\50\1\0\1\51\62\0\5\7"+
    "\1\0\1\7\1\52\1\53\2\7\1\0\55\7\5\10"+
    "\1\0\2\10\1\54\1\55\1\10\1\0\55\10\11\0"+
    "\1\56\60\0\2\4\11\0\4\4\1\57\11\4\1\0"+
    "\2\4\1\0\17\4\15\0\1\3\13\0\1\3\2\0"+
    "\2\43\1\3\1\60\2\61\2\44\2\45\1\46\2\47"+
    "\35\0\2\4\11\0\16\4\1\0\1\62\1\4\1\0"+
    "\17\4\15\0\1\46\20\0\1\46\47\0\2\4\11\0"+
    "\16\4\1\0\2\4\1\0\5\4\1\63\3\4\1\64"+
    "\5\4\15\0\2\4\11\0\16\4\1\0\2\4\1\0"+
    "\2\4\1\65\14\4\15\0\2\4\11\0\16\4\1\0"+
    "\2\4\1\0\3\4\1\66\13\4\15\0\2\4\11\0"+
    "\16\4\1\0\2\4\1\0\7\4\1\67\7\4\15\0"+
    "\2\4\11\0\16\4\1\0\2\4\1\0\5\4\1\70"+
    "\11\4\15\0\2\4\11\0\16\4\1\0\1\71\1\4"+
    "\1\0\13\4\1\72\3\4\15\0\2\4\11\0\16\4"+
    "\1\0\2\4\1\0\16\4\1\73\15\0\2\4\11\0"+
    "\16\4\1\0\2\4\1\0\12\4\1\74\4\4\15\0"+
    "\2\4\11\0\16\4\1\0\2\4\1\0\2\4\1\75"+
    "\14\4\102\0\1\76\3\0\1\46\13\0\1\46\4\0"+
    "\1\46\3\0\2\44\2\45\1\0\2\47\35\0\1\77"+
    "\13\0\1\77\4\0\1\77\3\0\2\44\2\45\3\0"+
    "\1\77\33\0\4\100\1\101\1\0\5\100\1\0\55\100"+
    "\6\102\1\0\62\102\5\7\1\0\5\7\1\0\55\7"+
    "\5\10\1\0\5\10\1\0\55\10\5\56\1\0\2\56"+
    "\1\103\1\104\57\56\1\0\2\4\11\0\16\4\1\0"+
    "\2\4\1\0\13\4\1\105\3\4\15\0\1\106\13\0"+
    "\3\106\2\43\1\106\1\0\6\106\1\107\2\106\14\0"+
    "\1\106\20\0\1\61\13\0\1\61\2\0\2\43\1\61"+
    "\47\0\2\4\11\0\4\4\1\110\11\4\1\0\2\4"+
    "\1\0\17\4\15\0\2\4\11\0\16\4\1\0\2\4"+
    "\1\0\2\4\1\111\14\4\15\0\2\4\11\0\16\4"+
    "\1\0\1\112\1\4\1\0\17\4\15\0\2\4\11\0"+
    "\10\4\1\113\5\4\1\0\2\4\1\0\17\4\15\0"+
    "\2\4\11\0\16\4\1\0\2\4\1\0\4\4\1\114"+
    "\12\4\15\0\2\4\11\0\16\4\1\0\2\4\1\0"+
    "\10\4\1\115\2\4\1\116\3\4\15\0\2\4\11\0"+
    "\16\4\1\0\2\4\1\0\7\4\1\117\7\4\15\0"+
    "\2\4\11\0\16\4\1\0\2\4\1\0\15\4\1\120"+
    "\1\4\15\0\2\4\11\0\16\4\1\0\2\4\1\0"+
    "\14\4\1\121\2\4\15\0\2\4\11\0\16\4\1\0"+
    "\2\4\1\0\1\122\16\4\15\0\2\4\11\0\16\4"+
    "\1\0\2\4\1\0\4\4\1\123\12\4\15\0\2\4"+
    "\11\0\16\4\1\0\2\4\1\0\7\4\1\124\7\4"+
    "\15\0\1\77\13\0\1\77\4\0\1\77\3\0\2\44"+
    "\2\45\37\0\5\100\1\0\5\100\1\0\55\100\5\101"+
    "\1\0\5\101\1\0\55\101\6\102\1\125\62\102\5\56"+
    "\1\0\5\56\1\0\55\56\1\0\2\4\11\0\16\4"+
    "\1\0\2\4\1\0\3\4\1\126\13\4\15\0\1\106"+
    "\13\0\3\106\2\43\1\106\1\0\6\106\1\127\2\106"+
    "\1\0\2\47\11\0\1\106\20\0\1\127\13\0\3\127"+
    "\2\0\1\127\1\0\6\127\1\0\2\127\14\0\1\127"+
    "\20\0\2\4\11\0\16\4\1\0\1\130\1\4\1\0"+
    "\17\4\15\0\2\4\11\0\16\4\1\0\2\4\1\0"+
    "\14\4\1\131\2\4\15\0\2\4\11\0\16\4\1\0"+
    "\2\4\1\0\5\4\1\132\11\4\15\0\2\4\11\0"+
    "\4\4\1\133\11\4\1\0\2\4\1\0\17\4\15\0"+
    "\2\4\11\0\16\4\1\0\2\4\1\0\5\4\1\134"+
    "\11\4\15\0\2\4\11\0\16\4\1\0\2\4\1\0"+
    "\2\4\1\135\1\4\1\136\12\4\15\0\2\4\11\0"+
    "\16\4\1\0\2\4\1\0\7\4\1\137\7\4\15\0"+
    "\2\4\11\0\16\4\1\0\1\140\1\4\1\0\17\4"+
    "\15\0\2\4\11\0\16\4\1\0\1\141\1\4\1\0"+
    "\17\4\15\0\2\4\11\0\16\4\1\0\1\142\1\4"+
    "\1\0\17\4\15\0\2\4\11\0\14\4\1\143\1\4"+
    "\1\0\2\4\1\0\17\4\14\0\4\102\1\144\1\102"+
    "\1\125\62\102\1\0\2\4\11\0\16\4\1\0\2\4"+
    "\1\0\3\4\1\145\13\4\15\0\1\127\13\0\3\127"+
    "\2\0\1\127\1\0\6\127\1\0\2\127\1\0\2\47"+
    "\11\0\1\127\20\0\2\4\11\0\16\4\1\0\2\4"+
    "\1\0\6\4\1\146\10\4\15\0\2\4\11\0\16\4"+
    "\1\0\2\4\1\0\7\4\1\147\7\4\15\0\2\4"+
    "\11\0\16\4\1\0\2\4\1\0\4\4\1\150\12\4"+
    "\15\0\2\4\11\0\16\4\1\0\2\4\1\0\6\4"+
    "\1\151\10\4\15\0\2\4\11\0\2\4\1\152\13\4"+
    "\1\0\2\4\1\0\17\4\15\0\2\4\11\0\16\4"+
    "\1\0\2\4\1\0\5\4\1\153\11\4\15\0\2\4"+
    "\11\0\16\4\1\0\2\4\1\0\4\4\1\154\12\4"+
    "\15\0\2\4\11\0\16\4\1\0\2\4\1\0\10\4"+
    "\1\155\6\4\15\0\2\4\11\0\16\4\1\0\2\4"+
    "\1\0\3\4\1\156\13\4\15\0\2\4\11\0\16\4"+
    "\1\0\2\4\1\0\12\4\1\157\4\4\15\0\2\4"+
    "\11\0\16\4\1\0\2\4\1\0\13\4\1\160\3\4"+
    "\15\0\2\4\11\0\2\4\1\161\13\4\1\0\2\4"+
    "\1\0\17\4\15\0\2\4\11\0\16\4\1\0\2\4"+
    "\1\0\7\4\1\162\7\4\15\0\2\4\11\0\16\4"+
    "\1\0\2\4\1\0\6\4\1\163\10\4\15\0\2\4"+
    "\11\0\2\4\1\164\13\4\1\0\2\4\1\0\17\4"+
    "\15\0\2\4\11\0\12\4\1\165\3\4\1\0\2\4"+
    "\1\0\17\4\15\0\2\4\11\0\16\4\1\0\2\4"+
    "\1\0\1\166\16\4\15\0\2\4\11\0\12\4\1\167"+
    "\3\4\1\0\2\4\1\0\17\4\15\0\2\4\11\0"+
    "\16\4\1\0\2\4\1\0\7\4\1\170\7\4\15\0"+
    "\2\4\11\0\16\4\1\0\2\4\1\0\13\4\1\171"+
    "\3\4\15\0\2\4\11\0\16\4\1\0\2\4\1\0"+
    "\13\4\1\172\3\4\15\0\2\4\11\0\16\4\1\0"+
    "\1\173\1\4\1\0\17\4\15\0\2\4\11\0\2\4"+
    "\1\174\13\4\1\0\2\4\1\0\17\4\15\0\2\4"+
    "\11\0\2\4\1\175\13\4\1\0\2\4\1\0\17\4"+
    "\15\0\2\4\11\0\16\4\1\0\1\176\1\4\1\0"+
    "\17\4\15\0\2\4\11\0\16\4\1\0\1\177\1\4"+
    "\1\0\17\4\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5301];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\11\11\1\1\5\11\4\1\1\11"+
    "\2\1\1\11\20\1\1\11\5\1\1\11\2\1\1\0"+
    "\15\1\1\0\1\1\1\0\14\1\1\11\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _CSharpLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CSharpLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1780) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { return CSharpTokens.COLONCOLON;
          }
        case 45: break;
        case 11: 
          { return CSharpTokens.RBRACKET;
          }
        case 46: break;
        case 42: 
          { return CSharpTokens.DELEGATE_KEYWORD;
          }
        case 47: break;
        case 32: 
          { return CSharpTokens.ENUM_KEYWORD;
          }
        case 48: break;
        case 15: 
          { return CSharpTokens.GT;
          }
        case 49: break;
        case 22: 
          { return CSharpTokens.DOUBLE_LITERAL;
          }
        case 50: break;
        case 37: 
          { return CSharpTokens.PUBLIC_KEYWORD;
          }
        case 51: break;
        case 7: 
          { return CSharpTokens.DOT;
          }
        case 52: break;
        case 20: 
          { return CSharpTokens.LONG_LITERAL;
          }
        case 53: break;
        case 38: 
          { return CSharpTokens.STRUCT_KEYWORD;
          }
        case 54: break;
        case 16: 
          { return CSharpTokens.EQ;
          }
        case 55: break;
        case 34: 
          { return CSharpTokens.CLASS_KEYWORD;
          }
        case 56: break;
        case 18: 
          { return CSharpTokens.SEMICOLON;
          }
        case 57: break;
        case 28: 
          { return CSharpTokens.LINE_DOC_COMMENT;
          }
        case 58: break;
        case 12: 
          { return CSharpTokens.LPAR;
          }
        case 59: break;
        case 21: 
          { return CSharpTokens.FLOAT_LITERAL;
          }
        case 60: break;
        case 33: 
          { return CSharpTokens.VOID_KEYWORD;
          }
        case 61: break;
        case 10: 
          { return CSharpTokens.LBRACKET;
          }
        case 62: break;
        case 3: 
          { return CSharpTokens.IDENTIFIER;
          }
        case 63: break;
        case 26: 
          { return CSharpTokens.IN_KEYWORD;
          }
        case 64: break;
        case 14: 
          { return CSharpTokens.LT;
          }
        case 65: break;
        case 24: 
          { return CSharpTokens.BLOCK_COMMENT;
          }
        case 66: break;
        case 5: 
          { return CSharpTokens.CHARACTER_LITERAL;
          }
        case 67: break;
        case 29: 
          { return CSharpTokens.INT_KEYWORD;
          }
        case 68: break;
        case 4: 
          { return CSharpTokens.WHITE_SPACE;
          }
        case 69: break;
        case 23: 
          { return CSharpTokens.LINE_COMMENT;
          }
        case 70: break;
        case 19: 
          { return CSharpTokens.COMMA;
          }
        case 71: break;
        case 25: 
          { return CSharpTokens.VERBATIM_STRING_LITERAL;
          }
        case 72: break;
        case 13: 
          { return CSharpTokens.RPAR;
          }
        case 73: break;
        case 2: 
          { return CSharpTokens.INTEGER_LITERAL;
          }
        case 74: break;
        case 17: 
          { return CSharpTokens.COLON;
          }
        case 75: break;
        case 41: 
          { return CSharpTokens.TYPEOF_KEYWORD;
          }
        case 76: break;
        case 8: 
          { return CSharpTokens.LBRACE;
          }
        case 77: break;
        case 9: 
          { return CSharpTokens.RBRACE;
          }
        case 78: break;
        case 40: 
          { return CSharpTokens.STATIC_KEYWORD;
          }
        case 79: break;
        case 44: 
          { return CSharpTokens.NAMESPACE_KEYWORD;
          }
        case 80: break;
        case 39: 
          { return CSharpTokens.STRING_KEYWORD;
          }
        case 81: break;
        case 31: 
          { return CSharpTokens.OUT_KEYWORD;
          }
        case 82: break;
        case 6: 
          { return CSharpTokens.STRING_LITERAL;
          }
        case 83: break;
        case 43: 
          { return CSharpTokens.INTERFACE_KEYWORD;
          }
        case 84: break;
        case 1: 
          { return CSharpTokens.BAD_CHARACTER;
          }
        case 85: break;
        case 35: 
          { return CSharpTokens.EVENT_KEYWORD;
          }
        case 86: break;
        case 36: 
          { return CSharpTokens.USING_KEYWORD;
          }
        case 87: break;
        case 30: 
          { return CSharpTokens.NEW_KEYWORD;
          }
        case 88: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
