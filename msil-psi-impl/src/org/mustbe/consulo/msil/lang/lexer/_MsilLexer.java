/* The following code was generated by JFlex 1.4.3 on 21.05.14 17:17 */

package org.mustbe.consulo.msil.lang.lexer;

import org.mustbe.consulo.msil.lang.psi.MsilTokens;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21.05.14 17:17 from the specification file
 * <tt>H:/github.com/consulo/consulo-dotnet/msil-psi-impl/src/org/mustbe/consulo/msil/lang/lexer/_MsilLexer.flex</tt>
 */
public class _MsilLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\1\1\3\1\0\1\1\1\3\16\6\4\0\1\1\3\0"+
    "\1\5\1\0\1\23\1\11\1\20\1\21\1\4\1\0\1\24\1\0"+
    "\1\7\1\2\1\6\1\51\1\54\1\53\1\55\1\6\1\52\1\6"+
    "\1\50\1\6\2\0\1\14\1\22\1\15\2\0\32\5\1\16\1\0"+
    "\1\17\1\0\1\5\1\10\1\27\1\47\1\25\1\37\1\35\1\40"+
    "\1\56\1\36\1\41\1\57\1\5\1\26\1\34\1\46\1\33\1\42"+
    "\1\5\1\43\1\30\1\32\1\31\1\45\1\5\1\60\1\44\1\5"+
    "\1\12\1\0\1\13\1\0\41\6\2\0\4\5\4\0\1\5\2\0"+
    "\1\6\7\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5\1\0"+
    "\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5\21\0"+
    "\160\6\5\5\1\0\2\5\2\0\4\5\10\0\1\5\1\0\3\5"+
    "\1\0\1\5\1\0\24\5\1\0\123\5\1\0\213\5\1\0\5\6"+
    "\2\0\236\5\11\0\46\5\2\0\1\5\7\0\47\5\7\0\1\5"+
    "\1\0\55\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6"+
    "\10\0\33\5\5\0\3\5\15\0\5\6\6\0\1\5\4\0\13\6"+
    "\5\0\53\5\37\6\4\0\2\5\1\6\143\5\1\0\1\5\10\6"+
    "\1\0\6\6\2\5\2\6\1\0\4\6\2\5\12\6\3\5\2\0"+
    "\1\5\17\0\1\6\1\5\1\6\36\5\33\6\2\0\131\5\13\6"+
    "\1\5\16\0\12\6\41\5\11\6\2\5\4\0\1\5\5\0\26\5"+
    "\4\6\1\5\11\6\1\5\3\6\1\5\5\6\22\0\31\5\3\6"+
    "\104\0\1\5\1\0\13\5\67\0\33\6\1\0\4\6\66\5\3\6"+
    "\1\5\22\6\1\5\7\6\12\5\2\6\2\0\12\6\1\0\7\5"+
    "\1\0\7\5\1\0\3\6\1\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5\7\6"+
    "\2\0\2\6\2\0\3\6\1\5\10\0\1\6\4\0\2\5\1\0"+
    "\3\5\2\6\2\0\12\6\4\5\7\0\1\5\5\0\3\6\1\0"+
    "\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\2\5\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0"+
    "\3\6\3\0\1\6\7\0\4\5\1\0\1\5\7\0\14\6\3\5"+
    "\1\6\13\0\3\6\1\0\11\5\1\0\3\5\1\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\10\6\1\0"+
    "\3\6\1\0\3\6\2\0\1\5\17\0\2\5\2\6\2\0\12\6"+
    "\1\0\1\5\17\0\3\6\1\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\7\6"+
    "\2\0\2\6\2\0\3\6\10\0\2\6\4\0\2\5\1\0\3\5"+
    "\2\6\2\0\12\6\1\0\1\5\20\0\1\6\1\5\1\0\6\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5"+
    "\3\0\2\5\3\0\3\5\3\0\14\5\4\0\5\6\3\0\3\6"+
    "\1\0\4\6\2\0\1\5\6\0\1\6\16\0\12\6\11\0\1\5"+
    "\7\0\3\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\3\0\1\5\7\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\1\0\2\5\6\0\2\5\2\6\2\0\12\6\22\0\2\6"+
    "\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5"+
    "\2\0\1\6\1\5\7\6\1\0\3\6\1\0\4\6\7\0\2\6"+
    "\7\0\1\5\1\0\2\5\2\6\2\0\12\6\1\0\2\5\17\0"+
    "\2\6\1\0\10\5\1\0\3\5\1\0\51\5\2\0\1\5\7\6"+
    "\1\0\3\6\1\0\4\6\1\5\10\0\1\6\10\0\2\5\2\6"+
    "\2\0\12\6\12\0\6\5\2\0\2\6\1\0\22\5\3\0\30\5"+
    "\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\6\4\0\6\6"+
    "\1\0\1\6\1\0\10\6\22\0\2\6\15\0\60\5\1\6\2\5"+
    "\7\6\4\0\10\5\10\6\1\0\12\6\47\0\2\5\1\0\1\5"+
    "\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5"+
    "\1\6\2\5\6\6\1\0\2\6\1\5\2\0\5\5\1\0\1\5"+
    "\1\0\6\6\2\0\12\6\2\0\4\5\40\0\1\5\27\0\2\6"+
    "\6\0\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\10\5\1\0\44\5\4\0\24\6\1\0\2\6\5\5\13\6\1\0"+
    "\44\6\11\0\1\6\71\0\53\5\24\6\1\5\12\6\6\0\6\5"+
    "\4\6\4\5\3\6\1\5\3\6\2\5\7\6\3\5\4\6\15\5"+
    "\14\6\1\5\17\6\2\0\46\5\1\0\1\5\5\0\1\5\2\0"+
    "\53\5\1\0\u014d\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0"+
    "\4\5\2\0\51\5\1\0\4\5\2\0\41\5\1\0\4\5\2\0"+
    "\7\5\1\0\1\5\1\0\4\5\2\0\17\5\1\0\71\5\1\0"+
    "\4\5\2\0\103\5\2\0\3\6\40\0\20\5\20\0\125\5\14\0"+
    "\u026c\5\2\0\21\5\1\0\32\5\5\0\113\5\3\0\3\5\17\0"+
    "\15\5\1\0\4\5\3\6\13\0\22\5\3\6\13\0\22\5\2\6"+
    "\14\0\15\5\1\0\3\5\1\0\2\6\14\0\64\5\40\6\3\0"+
    "\1\5\3\0\2\5\1\6\2\0\12\6\41\0\3\6\2\0\12\6"+
    "\6\0\130\5\10\0\51\5\1\6\1\5\5\0\106\5\12\0\35\5"+
    "\3\0\14\6\4\0\14\6\12\0\12\6\36\5\2\0\5\5\13\0"+
    "\54\5\4\0\21\6\7\5\2\6\6\0\12\6\46\0\27\5\5\6"+
    "\4\0\65\5\12\6\1\0\35\6\2\0\13\6\6\0\12\6\15\0"+
    "\1\5\130\0\5\6\57\5\21\6\7\5\4\0\12\6\21\0\11\6"+
    "\14\0\3\6\36\5\15\6\2\5\12\6\54\5\16\6\14\0\44\5"+
    "\24\6\10\0\12\6\3\0\3\5\12\6\44\5\122\0\3\6\1\0"+
    "\25\6\4\5\1\6\4\5\3\6\2\5\11\0\300\5\47\6\25\0"+
    "\4\6\u0116\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5"+
    "\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5"+
    "\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\16\0\5\6"+
    "\32\0\5\6\20\0\2\5\23\0\1\5\13\0\5\6\5\0\6\6"+
    "\1\0\1\5\15\0\1\5\20\0\15\5\3\0\33\5\25\0\15\6"+
    "\4\0\1\6\3\0\14\6\21\0\1\5\4\0\1\5\2\0\12\5"+
    "\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\13\5\2\0\4\5\5\0\5\5\4\0\1\5"+
    "\21\0\51\5\u0a77\0\57\5\1\0\57\5\1\0\205\5\6\0\4\5"+
    "\3\6\2\5\14\0\46\5\1\0\1\5\5\0\1\5\2\0\70\5"+
    "\7\0\1\5\17\0\1\6\27\5\11\0\7\5\1\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\7\5\1\0\40\6\57\0\1\5\u01d5\0\3\5\31\0\11\5\6\6"+
    "\1\0\5\5\2\0\5\5\4\0\126\5\2\0\2\6\2\0\3\5"+
    "\1\0\132\5\1\0\4\5\5\0\51\5\3\0\136\5\21\0\33\5"+
    "\65\0\20\5\u0200\0\u19b6\5\112\0\u51cd\5\63\0\u048d\5\103\0\56\5"+
    "\2\0\u010d\5\3\0\20\5\12\6\2\5\24\0\57\5\1\6\4\0"+
    "\12\6\1\0\31\5\7\0\1\6\120\5\2\6\45\0\11\5\2\0"+
    "\147\5\2\0\4\5\1\0\4\5\14\0\13\5\115\0\12\5\1\6"+
    "\3\5\1\6\4\5\1\6\27\5\5\6\20\0\1\5\7\0\64\5"+
    "\14\0\2\6\62\5\21\6\13\0\12\6\6\0\22\6\6\5\3\0"+
    "\1\5\4\0\12\6\34\5\10\6\2\0\27\5\15\6\14\0\35\5"+
    "\3\0\4\6\57\5\16\6\16\0\1\5\12\6\46\0\51\5\16\6"+
    "\11\0\3\5\1\6\10\5\2\6\2\0\12\6\6\0\27\5\3\0"+
    "\1\5\1\6\4\0\60\5\1\6\1\5\3\6\2\5\2\6\5\5"+
    "\2\6\1\5\1\6\1\5\30\0\3\5\2\0\13\5\5\6\2\0"+
    "\3\5\2\6\12\0\6\5\2\0\6\5\2\0\6\5\11\0\7\5"+
    "\1\0\7\5\221\0\43\5\10\6\1\0\2\6\2\0\12\6\6\0"+
    "\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0\u016e\5\2\0\152\5\46\0"+
    "\7\5\14\0\5\5\5\0\1\5\1\6\12\5\1\0\15\5\1\0"+
    "\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0"+
    "\u016b\5\22\0\100\5\2\0\66\5\50\0\15\5\3\0\20\6\20\0"+
    "\7\6\14\0\2\5\30\0\3\5\31\0\1\5\6\0\5\5\1\0"+
    "\207\5\2\0\1\6\4\0\1\5\13\0\12\6\7\0\32\5\4\0"+
    "\1\5\1\0\32\5\13\0\131\5\3\0\6\5\2\0\6\5\2\0"+
    "\6\5\2\0\3\5\3\0\2\5\3\0\2\5\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\15\4\1\20\1\21\1\0\7\4\3\0"+
    "\24\4\1\0\10\4\1\0\1\22\1\0\27\4\1\21"+
    "\10\4\1\0\1\4\1\23\14\4\1\24\10\4\1\25"+
    "\1\4\1\26\10\4\1\27\1\30\5\4\1\31\6\4"+
    "\1\32\1\33\1\4\1\34\1\35\1\36\4\4\1\37"+
    "\1\4\1\40\3\4\1\41\1\42\1\43\4\4\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\5\4\1\52\4\4"+
    "\1\53\1\4\1\54\1\4\1\55\2\4\1\56\1\4"+
    "\1\57\3\4\1\60\1\4\1\61\2\4\1\62\1\63"+
    "\2\4\1\64\2\4\1\65\1\66\1\67\1\4\1\70"+
    "\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\61\0\304\0\365\0\u0126"+
    "\0\61\0\61\0\61\0\61\0\u0157\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c"+
    "\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4"+
    "\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\61\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\u1045\0\u1076\0\u10a7\0\61\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\304"+
    "\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419"+
    "\0\u144a\0\u147b\0\u14ac\0\u14dd\0\304\0\u150e\0\u153f\0\u1570"+
    "\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\304\0\u1696\0\304"+
    "\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e"+
    "\0\61\0\304\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\304"+
    "\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\304"+
    "\0\u1a9b\0\304\0\304\0\304\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f"+
    "\0\u1b90\0\u1bc1\0\304\0\u1bf2\0\u1c23\0\u1c54\0\304\0\304"+
    "\0\304\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\304\0\304\0\304"+
    "\0\304\0\304\0\304\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d"+
    "\0\304\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\304\0\u1f02\0\304"+
    "\0\u1f33\0\304\0\u1f64\0\u1f95\0\304\0\u1fc6\0\304\0\u1ff7"+
    "\0\u2028\0\u2059\0\304\0\u208a\0\304\0\u20bb\0\u20ec\0\304"+
    "\0\304\0\u211d\0\u214e\0\304\0\u217f\0\u21b0\0\304\0\304"+
    "\0\304\0\u21e1\0\304\0\304\0\304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\2\1\7"+
    "\1\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\6\1\31\1\6\1\32\1\33\1\6"+
    "\1\34\1\35\1\36\2\6\1\37\1\6\1\40\6\2"+
    "\3\6\62\0\1\3\1\0\1\3\57\0\1\41\1\0"+
    "\1\42\61\0\2\6\1\43\1\44\14\0\34\6\5\0"+
    "\1\6\17\0\1\45\1\6\1\46\4\6\1\47\1\50"+
    "\2\6\1\51\1\6\1\52\5\6\6\0\3\6\5\0"+
    "\1\53\1\0\1\54\15\0\23\53\6\0\3\53\33\0"+
    "\1\55\32\0\2\6\1\43\1\44\14\0\1\6\1\56"+
    "\7\6\1\57\22\6\5\0\2\6\1\43\1\44\14\0"+
    "\14\6\1\60\17\6\5\0\2\6\1\43\1\44\14\0"+
    "\3\6\1\61\16\6\1\62\11\6\5\0\2\6\1\43"+
    "\1\44\14\0\5\6\1\63\26\6\5\0\2\6\1\43"+
    "\1\44\14\0\14\6\1\64\17\6\5\0\2\6\1\43"+
    "\1\44\14\0\22\6\1\65\11\6\5\0\2\6\1\43"+
    "\1\44\14\0\33\6\1\66\5\0\2\6\1\43\1\44"+
    "\14\0\14\6\1\67\17\6\5\0\2\6\1\43\1\44"+
    "\14\0\1\6\1\70\12\6\1\71\17\6\5\0\2\6"+
    "\1\43\1\44\14\0\7\6\1\72\11\6\1\73\12\6"+
    "\5\0\2\6\1\43\1\44\14\0\4\6\1\74\11\6"+
    "\1\75\15\6\5\0\2\6\1\43\1\44\14\0\2\6"+
    "\1\76\3\6\1\77\5\6\1\100\17\6\5\0\2\6"+
    "\1\43\1\44\14\0\6\6\1\101\25\6\3\41\1\0"+
    "\55\41\4\42\1\102\54\42\5\0\1\6\17\0\23\6"+
    "\6\0\3\6\5\0\2\44\16\0\34\44\5\0\2\6"+
    "\1\43\1\44\14\0\1\6\1\103\2\6\1\104\27\6"+
    "\5\0\2\6\1\43\1\44\14\0\3\6\1\105\30\6"+
    "\5\0\2\6\1\43\1\44\14\0\10\6\1\106\23\6"+
    "\5\0\2\6\1\43\1\44\14\0\20\6\1\107\13\6"+
    "\5\0\2\6\1\43\1\44\14\0\14\6\1\110\17\6"+
    "\5\0\2\6\1\43\1\44\14\0\2\6\1\111\13\6"+
    "\1\112\15\6\5\0\2\53\1\54\1\113\1\114\13\0"+
    "\34\53\5\0\1\53\17\0\23\53\6\0\3\53\31\0"+
    "\1\115\34\0\2\6\1\43\1\44\14\0\2\6\1\116"+
    "\31\6\5\0\2\6\1\43\1\44\14\0\2\6\1\117"+
    "\31\6\5\0\2\6\1\43\1\44\14\0\5\6\1\120"+
    "\26\6\5\0\2\6\1\43\1\44\14\0\3\6\1\121"+
    "\30\6\5\0\2\6\1\43\1\44\14\0\3\6\1\122"+
    "\30\6\5\0\2\6\1\43\1\44\14\0\2\6\1\123"+
    "\13\6\1\124\15\6\5\0\2\6\1\43\1\44\14\0"+
    "\21\6\1\125\12\6\5\0\2\6\1\43\1\44\14\0"+
    "\32\6\1\126\1\6\5\0\2\6\1\43\1\44\14\0"+
    "\5\6\1\127\26\6\5\0\2\6\1\43\1\44\14\0"+
    "\12\6\1\130\21\6\5\0\2\6\1\43\1\44\14\0"+
    "\6\6\1\131\25\6\5\0\2\6\1\43\1\44\14\0"+
    "\21\6\1\132\12\6\5\0\2\6\1\43\1\44\14\0"+
    "\15\6\1\133\16\6\5\0\2\6\1\43\1\44\14\0"+
    "\5\6\1\134\6\6\1\135\17\6\5\0\2\6\1\43"+
    "\1\44\14\0\22\6\1\136\11\6\5\0\2\6\1\43"+
    "\1\44\14\0\6\6\1\137\5\6\1\140\17\6\5\0"+
    "\2\6\1\43\1\44\14\0\1\6\1\141\32\6\5\0"+
    "\2\6\1\43\1\44\14\0\14\6\1\142\17\6\5\0"+
    "\2\6\1\43\1\44\14\0\16\6\1\143\15\6\5\0"+
    "\2\6\1\43\1\44\14\0\6\6\1\144\25\6\2\42"+
    "\1\145\1\42\1\102\54\42\5\0\2\6\1\43\1\44"+
    "\14\0\2\6\1\146\31\6\5\0\2\6\1\43\1\44"+
    "\14\0\3\6\1\147\30\6\5\0\2\6\1\43\1\44"+
    "\14\0\3\6\1\150\30\6\5\0\2\6\1\43\1\44"+
    "\14\0\5\6\1\151\26\6\5\0\2\6\1\43\1\44"+
    "\14\0\10\6\1\152\23\6\5\0\2\6\1\43\1\44"+
    "\14\0\10\6\1\153\23\6\5\0\2\6\1\43\1\44"+
    "\14\0\16\6\1\154\15\6\5\0\2\6\1\43\1\44"+
    "\14\0\6\6\1\155\25\6\5\0\2\113\2\0\1\114"+
    "\13\0\34\113\32\0\1\156\33\0\2\6\1\43\1\44"+
    "\14\0\3\6\1\157\30\6\5\0\2\6\1\43\1\44"+
    "\14\0\16\6\1\160\15\6\5\0\2\6\1\43\1\44"+
    "\14\0\10\6\1\161\23\6\5\0\2\6\1\43\1\44"+
    "\14\0\10\6\1\162\23\6\5\0\2\6\1\43\1\44"+
    "\14\0\5\6\1\163\26\6\5\0\2\6\1\43\1\44"+
    "\14\0\5\6\1\164\26\6\5\0\2\6\1\43\1\44"+
    "\14\0\14\6\1\165\17\6\5\0\2\6\1\43\1\44"+
    "\14\0\5\6\1\166\26\6\5\0\2\6\1\43\1\44"+
    "\14\0\10\6\1\167\23\6\5\0\2\6\1\43\1\44"+
    "\14\0\10\6\1\170\23\6\5\0\2\6\1\43\1\44"+
    "\14\0\10\6\1\171\23\6\5\0\2\6\1\43\1\44"+
    "\14\0\2\6\1\172\31\6\5\0\2\6\1\43\1\44"+
    "\14\0\2\6\1\173\31\6\5\0\2\6\1\43\1\44"+
    "\14\0\1\6\1\174\32\6\5\0\2\6\1\43\1\44"+
    "\14\0\23\6\1\175\1\176\1\177\1\200\5\6\5\0"+
    "\2\6\1\43\1\44\14\0\5\6\1\201\26\6\5\0"+
    "\2\6\1\43\1\44\14\0\1\6\1\202\32\6\5\0"+
    "\2\6\1\43\1\44\14\0\5\6\1\203\26\6\5\0"+
    "\2\6\1\43\1\44\14\0\20\6\1\204\13\6\5\0"+
    "\2\6\1\43\1\44\14\0\4\6\1\205\27\6\5\0"+
    "\2\6\1\43\1\44\14\0\12\6\1\206\21\6\5\0"+
    "\2\6\1\43\1\44\14\0\5\6\1\207\26\6\5\0"+
    "\2\6\1\43\1\44\14\0\1\6\1\210\32\6\5\0"+
    "\2\6\1\43\1\44\14\0\3\6\1\211\30\6\5\0"+
    "\2\6\1\43\1\44\14\0\5\6\1\212\26\6\5\0"+
    "\2\6\1\43\1\44\14\0\10\6\1\213\23\6\5\0"+
    "\2\6\1\43\1\44\14\0\11\6\1\214\22\6\5\0"+
    "\2\6\1\43\1\44\14\0\21\6\1\215\12\6\5\0"+
    "\2\6\1\43\1\44\14\0\1\6\1\216\32\6\5\0"+
    "\2\6\1\43\1\44\14\0\2\6\1\217\31\6\5\0"+
    "\2\6\1\43\1\44\14\0\15\6\1\220\16\6\17\0"+
    "\1\221\46\0\2\6\1\43\1\44\14\0\3\6\1\222"+
    "\30\6\5\0\2\6\1\43\1\44\14\0\16\6\1\223"+
    "\15\6\5\0\2\6\1\43\1\44\14\0\7\6\1\224"+
    "\24\6\5\0\2\6\1\43\1\44\14\0\16\6\1\225"+
    "\15\6\5\0\2\6\1\43\1\44\14\0\14\6\1\226"+
    "\17\6\5\0\2\6\1\43\1\44\14\0\21\6\1\227"+
    "\12\6\5\0\2\6\1\43\1\44\14\0\23\6\1\230"+
    "\1\231\1\232\1\233\5\6\5\0\2\6\1\43\1\44"+
    "\14\0\1\234\33\6\5\0\2\6\1\43\1\44\14\0"+
    "\21\6\1\235\12\6\5\0\2\6\1\43\1\44\14\0"+
    "\22\6\1\236\11\6\5\0\2\6\1\43\1\44\14\0"+
    "\5\6\1\237\26\6\5\0\2\6\1\43\1\44\14\0"+
    "\1\6\1\240\32\6\5\0\2\6\1\43\1\44\14\0"+
    "\10\6\1\241\23\6\5\0\2\6\1\43\1\44\14\0"+
    "\25\6\1\242\6\6\5\0\2\6\1\43\1\44\14\0"+
    "\30\6\1\243\3\6\5\0\2\6\1\43\1\44\14\0"+
    "\27\6\1\244\4\6\5\0\2\6\1\43\1\44\14\0"+
    "\6\6\1\245\25\6\5\0\2\6\1\43\1\44\14\0"+
    "\14\6\1\246\17\6\5\0\2\6\1\43\1\44\14\0"+
    "\10\6\1\247\23\6\5\0\2\6\1\43\1\44\14\0"+
    "\2\6\1\250\31\6\5\0\2\6\1\43\1\44\14\0"+
    "\10\6\1\251\23\6\5\0\2\6\1\43\1\44\14\0"+
    "\4\6\1\252\27\6\5\0\2\6\1\43\1\44\14\0"+
    "\3\6\1\253\30\6\5\0\2\6\1\43\1\44\14\0"+
    "\6\6\1\254\25\6\5\0\2\6\1\43\1\44\14\0"+
    "\7\6\1\255\24\6\5\0\2\6\1\43\1\44\14\0"+
    "\6\6\1\256\25\6\5\0\2\6\1\43\1\44\14\0"+
    "\5\6\1\257\26\6\5\0\2\6\1\43\1\44\14\0"+
    "\12\6\1\260\21\6\5\0\2\6\1\43\1\44\14\0"+
    "\7\6\1\261\24\6\5\0\2\6\1\43\1\44\14\0"+
    "\10\6\1\262\23\6\5\0\2\6\1\43\1\44\14\0"+
    "\2\6\1\263\31\6\5\0\2\6\1\43\1\44\14\0"+
    "\22\6\1\264\11\6\5\0\2\6\1\43\1\44\14\0"+
    "\2\6\1\265\31\6\5\0\2\6\1\43\1\44\14\0"+
    "\1\266\33\6\5\0\2\6\1\43\1\44\14\0\31\6"+
    "\1\267\2\6\5\0\2\6\1\43\1\44\14\0\25\6"+
    "\1\270\6\6\5\0\2\6\1\43\1\44\14\0\30\6"+
    "\1\271\3\6\5\0\2\6\1\43\1\44\14\0\27\6"+
    "\1\272\4\6\5\0\2\6\1\43\1\44\14\0\5\6"+
    "\1\273\26\6\5\0\2\6\1\43\1\44\14\0\12\6"+
    "\1\274\21\6\5\0\2\6\1\43\1\44\14\0\17\6"+
    "\1\275\14\6\5\0\2\6\1\43\1\44\14\0\25\6"+
    "\1\276\6\6\5\0\2\6\1\43\1\44\14\0\7\6"+
    "\1\277\24\6\5\0\2\6\1\43\1\44\14\0\21\6"+
    "\1\300\12\6\5\0\2\6\1\43\1\44\14\0\1\301"+
    "\33\6\5\0\2\6\1\43\1\44\14\0\1\302\33\6"+
    "\5\0\2\6\1\43\1\44\14\0\5\6\1\303\26\6"+
    "\5\0\2\6\1\43\1\44\14\0\5\6\1\304\26\6"+
    "\5\0\2\6\1\43\1\44\14\0\2\6\1\305\31\6"+
    "\5\0\2\6\1\43\1\44\14\0\7\6\1\306\24\6"+
    "\5\0\2\6\1\43\1\44\14\0\22\6\1\307\11\6"+
    "\5\0\2\6\1\43\1\44\14\0\12\6\1\310\21\6"+
    "\5\0\2\6\1\43\1\44\14\0\16\6\1\311\15\6"+
    "\5\0\2\6\1\43\1\44\14\0\1\6\1\312\32\6"+
    "\5\0\2\6\1\43\1\44\14\0\1\6\1\313\32\6"+
    "\5\0\2\6\1\43\1\44\14\0\1\314\33\6\5\0"+
    "\2\6\1\43\1\44\14\0\3\6\1\315\30\6\5\0"+
    "\2\6\1\43\1\44\14\0\3\6\1\316\30\6\5\0"+
    "\2\6\1\43\1\44\14\0\30\6\1\317\3\6\5\0"+
    "\2\6\1\43\1\44\14\0\10\6\1\320\23\6\5\0"+
    "\2\6\1\43\1\44\14\0\1\6\1\321\32\6\5\0"+
    "\2\6\1\43\1\44\14\0\5\6\1\322\26\6\5\0"+
    "\2\6\1\43\1\44\14\0\10\6\1\323\23\6\5\0"+
    "\2\6\1\43\1\44\14\0\17\6\1\324\14\6\5\0"+
    "\2\6\1\43\1\44\14\0\1\6\1\325\32\6\5\0"+
    "\2\6\1\43\1\44\14\0\1\6\1\326\32\6\5\0"+
    "\2\6\1\43\1\44\14\0\5\6\1\327\26\6\5\0"+
    "\2\6\1\43\1\44\14\0\17\6\1\330\14\6\5\0"+
    "\2\6\1\43\1\44\14\0\5\6\1\331\26\6\5\0"+
    "\2\6\1\43\1\44\14\0\14\6\1\332\17\6\5\0"+
    "\2\6\1\43\1\44\14\0\21\6\1\333\12\6\5\0"+
    "\2\6\1\43\1\44\14\0\17\6\1\334\14\6\5\0"+
    "\2\6\1\43\1\44\14\0\10\6\1\335\23\6\5\0"+
    "\2\6\1\43\1\44\14\0\15\6\1\336\16\6\5\0"+
    "\2\6\1\43\1\44\14\0\17\6\1\337\14\6\5\0"+
    "\2\6\1\43\1\44\14\0\17\6\1\340\14\6\5\0"+
    "\2\6\1\43\1\44\14\0\31\6\1\341\2\6\5\0"+
    "\2\6\1\43\1\44\14\0\5\6\1\342\26\6\5\0"+
    "\2\6\1\43\1\44\14\0\12\6\1\343\21\6\5\0"+
    "\2\6\1\43\1\44\14\0\10\6\1\344\23\6\5\0"+
    "\2\6\1\43\1\44\14\0\3\6\1\345\30\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8722];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\4\11\1\1\6\11"+
    "\17\1\1\0\7\1\3\0\24\1\1\0\10\1\1\0"+
    "\1\11\1\0\27\1\1\11\10\1\1\0\42\1\1\11"+
    "\124\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  public _MsilLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _MsilLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2260) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { return MsilTokens.INT8_KEYWORD;
          }
        case 59: break;
        case 58: 
          { return MsilTokens.IMPLEMENTS_KEYWORD;
          }
        case 60: break;
        case 37: 
          { return MsilTokens.STRING_KEYWORD;
          }
        case 61: break;
        case 36: 
          { return MsilTokens.STATIC_KEYWORD;
          }
        case 62: break;
        case 7: 
          { return MsilTokens.LT;
          }
        case 63: break;
        case 54: 
          { return MsilTokens._PROPERTY_KEYWORD;
          }
        case 64: break;
        case 5: 
          { return MsilTokens.LBRACE;
          }
        case 65: break;
        case 23: 
          { return MsilTokens.BRACKET_OUT_KEYWORD;
          }
        case 66: break;
        case 3: 
          { return MsilTokens.PERC;
          }
        case 67: break;
        case 53: 
          { return MsilTokens._ASSEMBLY_KEYWORD;
          }
        case 68: break;
        case 6: 
          { return MsilTokens.RBRACE;
          }
        case 69: break;
        case 10: 
          { return MsilTokens.RBRACKET;
          }
        case 70: break;
        case 32: 
          { return MsilTokens._CLASS_KEYWORD;
          }
        case 71: break;
        case 38: 
          { return MsilTokens.UINT16_KEYWORD;
          }
        case 72: break;
        case 43: 
          { return MsilTokens._CUSTOM_KEYWORD;
          }
        case 73: break;
        case 12: 
          { return MsilTokens.RPAR;
          }
        case 74: break;
        case 40: 
          { return MsilTokens.UINT32_KEYWORD;
          }
        case 75: break;
        case 34: 
          { return MsilTokens._FIELD_KEYWORD;
          }
        case 76: break;
        case 51: 
          { return MsilTokens.ABSTRACT_KEYWORD;
          }
        case 77: break;
        case 42: 
          { return MsilTokens.PUBLIC_KEYWORD;
          }
        case 78: break;
        case 21: 
          { return MsilTokens.VOID_KEYWORD;
          }
        case 79: break;
        case 15: 
          { return MsilTokens.COMMA;
          }
        case 80: break;
        case 27: 
          { return MsilTokens.FINAL_KEYWORD;
          }
        case 81: break;
        case 18: 
          { return MsilTokens.QIDENTIFIER;
          }
        case 82: break;
        case 25: 
          { return MsilTokens.UINT8_KEYWORD;
          }
        case 83: break;
        case 47: 
          { return MsilTokens.FLOAT64_KEYWORD;
          }
        case 84: break;
        case 29: 
          { return MsilTokens.INT64_KEYWORD;
          }
        case 85: break;
        case 48: 
          { return MsilTokens.PRIVATE_KEYWORD;
          }
        case 86: break;
        case 41: 
          { return MsilTokens.OBJECT_KEYWORD;
          }
        case 87: break;
        case 57: 
          { return MsilTokens.VALUETYPE_KEYWORD;
          }
        case 88: break;
        case 16: 
          { return MsilTokens.LINE_COMMENT;
          }
        case 89: break;
        case 9: 
          { return MsilTokens.LBRACKET;
          }
        case 90: break;
        case 2: 
          { return MsilTokens.WHITE_SPACE;
          }
        case 91: break;
        case 45: 
          { return MsilTokens.LITERAL_KEYWORD;
          }
        case 92: break;
        case 24: 
          { return MsilTokens.CLASS_KEYWORD;
          }
        case 93: break;
        case 22: 
          { return MsilTokens.BOOL_KEYWORD;
          }
        case 94: break;
        case 8: 
          { return MsilTokens.GT;
          }
        case 95: break;
        case 31: 
          { return MsilTokens.VALUE_KEYWORD;
          }
        case 96: break;
        case 19: 
          { return MsilTokens.CHAR_KEYWORD;
          }
        case 97: break;
        case 50: 
          { return MsilTokens.ASSEMBLY_KEYWORD;
          }
        case 98: break;
        case 46: 
          { return MsilTokens.EXTENDS_KEYWORD;
          }
        case 99: break;
        case 26: 
          { return MsilTokens.FLOAT_KEYWORD;
          }
        case 100: break;
        case 55: 
          { return MsilTokens.HIDEBYSIG_KEYWORD;
          }
        case 101: break;
        case 28: 
          { return MsilTokens.INT16_KEYWORD;
          }
        case 102: break;
        case 33: 
          { return MsilTokens._EVENT_KEYWORD;
          }
        case 103: break;
        case 30: 
          { return MsilTokens.INT32_KEYWORD;
          }
        case 104: break;
        case 11: 
          { return MsilTokens.LPAR;
          }
        case 105: break;
        case 13: 
          { return MsilTokens.EQ;
          }
        case 106: break;
        case 14: 
          { return MsilTokens.AND;
          }
        case 107: break;
        case 4: 
          { return MsilTokens.IDENTIFIER;
          }
        case 108: break;
        case 52: 
          { return MsilTokens.INITONLY_KEYWORD;
          }
        case 109: break;
        case 17: 
          { return MsilTokens.BLOCK_COMMENT;
          }
        case 110: break;
        case 49: 
          { return MsilTokens.VIRTUAL_KEYWORD;
          }
        case 111: break;
        case 39: 
          { return MsilTokens.UINT64_KEYWORD;
          }
        case 112: break;
        case 35: 
          { return MsilTokens._PARAM_KEYWORD;
          }
        case 113: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 114: break;
        case 44: 
          { return MsilTokens._METHOD_KEYWORD;
          }
        case 115: break;
        case 56: 
          { return MsilTokens.PROTECTED_KEYWORD;
          }
        case 116: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
