/* The following code was generated by JFlex 1.4.3 on 21.05.14 17:40 */

package org.mustbe.consulo.msil.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.mustbe.consulo.msil.lang.psi.MsilTokens;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21.05.14 17:40 from the specification file
 * <tt>H:/github.com/consulo/consulo-dotnet/msil-psi-impl/src/org/mustbe/consulo/msil/lang/lexer/_MsilLexer.flex</tt>
 */
public class _MsilLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\1\1\3\1\0\1\1\1\3\16\7\4\0\1\1\3\0"+
    "\1\6\1\0\1\25\1\12\1\22\1\23\1\4\1\0\1\26\1\0"+
    "\1\10\1\2\1\5\1\53\1\56\1\55\1\57\1\5\1\54\1\5"+
    "\1\52\1\5\1\17\1\0\1\15\1\24\1\16\2\0\32\6\1\20"+
    "\1\0\1\21\1\0\1\6\1\11\1\31\1\51\1\27\1\41\1\37"+
    "\1\42\1\60\1\40\1\43\1\61\1\6\1\30\1\36\1\50\1\35"+
    "\1\44\1\6\1\45\1\32\1\34\1\33\1\47\1\6\1\62\1\46"+
    "\1\63\1\13\1\0\1\14\1\0\41\7\2\0\4\6\4\0\1\6"+
    "\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6"+
    "\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6"+
    "\21\0\160\7\5\6\1\0\2\6\2\0\4\6\10\0\1\6\1\0"+
    "\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0"+
    "\5\7\2\0\236\6\11\0\46\6\2\0\1\6\7\0\47\6\7\0"+
    "\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0"+
    "\1\7\10\0\33\6\5\0\3\6\15\0\5\7\6\0\1\6\4\0"+
    "\13\7\5\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6"+
    "\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6"+
    "\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6"+
    "\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6\5\0"+
    "\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6"+
    "\3\7\104\0\1\6\1\0\13\6\67\0\33\7\1\0\4\7\66\6"+
    "\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\7\1\0"+
    "\7\6\1\0\7\6\1\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6"+
    "\1\0\3\6\2\7\2\0\12\7\4\6\7\0\1\6\5\0\3\7"+
    "\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7"+
    "\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\14\7"+
    "\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7"+
    "\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0"+
    "\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0"+
    "\3\6\2\7\2\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0"+
    "\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0"+
    "\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0"+
    "\3\7\1\0\4\7\2\0\1\6\6\0\1\7\16\0\12\7\11\0"+
    "\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\1\0\2\6\6\0\2\6\2\7\2\0\12\7\22\0"+
    "\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6"+
    "\17\0\2\7\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6"+
    "\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0"+
    "\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0"+
    "\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7"+
    "\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0"+
    "\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0"+
    "\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0"+
    "\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0"+
    "\1\6\1\0\6\7\2\0\12\7\2\0\4\6\40\0\1\6\27\0"+
    "\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0"+
    "\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7"+
    "\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6\12\7\6\0"+
    "\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7"+
    "\15\6\14\7\1\6\17\7\2\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6"+
    "\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6\20\0\125\6"+
    "\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0\3\6"+
    "\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6"+
    "\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7"+
    "\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0"+
    "\12\7\6\0\130\6\10\0\51\6\1\7\1\6\5\0\106\6\12\0"+
    "\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6"+
    "\13\0\54\6\4\0\21\7\7\6\2\7\6\0\12\7\46\0\27\6"+
    "\5\7\4\0\65\6\12\7\1\0\35\7\2\0\13\7\6\0\12\7"+
    "\15\0\1\6\130\0\5\7\57\6\21\7\7\6\4\0\12\7\21\0"+
    "\11\7\14\0\3\7\36\6\15\7\2\6\12\7\54\6\16\7\14\0"+
    "\44\6\24\7\10\0\12\7\3\0\3\6\12\7\44\6\122\0\3\7"+
    "\1\0\25\7\4\6\1\7\4\6\3\7\2\6\11\0\300\6\47\7"+
    "\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0"+
    "\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0"+
    "\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0"+
    "\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\16\0"+
    "\5\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\5\7\5\0"+
    "\6\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0\33\6\25\0"+
    "\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0"+
    "\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0"+
    "\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0"+
    "\4\6\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0"+
    "\70\6\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6"+
    "\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0"+
    "\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0"+
    "\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0"+
    "\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7"+
    "\4\0\12\7\1\0\31\6\7\0\1\7\120\6\2\7\45\0\11\6"+
    "\2\0\147\6\2\0\4\6\1\0\4\6\14\0\13\6\115\0\12\6"+
    "\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0"+
    "\64\6\14\0\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6"+
    "\3\0\1\6\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0"+
    "\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7\46\0\51\6"+
    "\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6"+
    "\3\0\1\6\1\7\4\0\60\6\1\7\1\6\3\7\2\6\2\7"+
    "\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0\13\6\5\7"+
    "\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0\6\6\11\0"+
    "\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0\12\7"+
    "\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6"+
    "\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6"+
    "\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6"+
    "\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7"+
    "\20\0\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6"+
    "\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6"+
    "\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6"+
    "\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\2\1"+
    "\1\6\1\7\1\10\1\11\1\1\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\15\5\1\21\1\22\1\0"+
    "\7\5\2\0\1\23\1\0\26\5\1\0\10\5\1\0"+
    "\1\24\1\0\32\5\1\22\10\5\1\0\1\5\1\25"+
    "\20\5\1\26\10\5\1\27\1\5\1\30\10\5\1\31"+
    "\1\32\10\5\1\33\6\5\1\34\1\35\2\5\1\36"+
    "\1\37\1\40\4\5\1\41\1\5\1\42\3\5\1\43"+
    "\1\44\1\45\4\5\1\46\1\47\1\50\2\5\1\51"+
    "\1\52\1\53\1\54\6\5\1\55\4\5\1\56\1\5"+
    "\1\57\1\5\1\60\4\5\1\61\1\5\1\62\4\5"+
    "\1\63\1\5\1\64\2\5\1\65\1\66\5\5\1\67"+
    "\2\5\1\70\1\71\2\5\1\72\1\5\1\73\1\74"+
    "\1\75\2\5\1\76\1\5\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\64\0\64\0\320\0\u0104"+
    "\0\u0138\0\64\0\64\0\64\0\64\0\u016c\0\u01a0\0\64"+
    "\0\64\0\64\0\64\0\64\0\64\0\u01d4\0\u0208\0\u023c"+
    "\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc"+
    "\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c"+
    "\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\64\0\u06e8"+
    "\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888"+
    "\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8"+
    "\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68"+
    "\0\64\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4"+
    "\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074"+
    "\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214"+
    "\0\u1248\0\u127c\0\u12b0\0\u12e4\0\64\0\u1318\0\u134c\0\u1380"+
    "\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\320"+
    "\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c"+
    "\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c"+
    "\0\320\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998"+
    "\0\u19cc\0\320\0\u1a00\0\320\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0"+
    "\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\64\0\320\0\u1bd4\0\u1c08"+
    "\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\320\0\u1d74"+
    "\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\320\0\u1ee0"+
    "\0\u1f14\0\320\0\320\0\320\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4"+
    "\0\u2018\0\u204c\0\320\0\u2080\0\u20b4\0\u20e8\0\320\0\320"+
    "\0\320\0\u211c\0\u2150\0\u2184\0\u21b8\0\320\0\320\0\320"+
    "\0\u21ec\0\u2220\0\320\0\320\0\320\0\320\0\u2254\0\u2288"+
    "\0\u22bc\0\u22f0\0\u2324\0\u2358\0\320\0\u238c\0\u23c0\0\u23f4"+
    "\0\u2428\0\320\0\u245c\0\320\0\u2490\0\320\0\u24c4\0\u24f8"+
    "\0\u252c\0\u2560\0\320\0\u2594\0\320\0\u25c8\0\u25fc\0\u2630"+
    "\0\u2664\0\320\0\u2698\0\320\0\u26cc\0\u2700\0\320\0\320"+
    "\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804\0\320\0\u2838\0\u286c"+
    "\0\320\0\320\0\u28a0\0\u28d4\0\320\0\u2908\0\320\0\320"+
    "\0\320\0\u293c\0\u2970\0\320\0\u29a4\0\320\0\320";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\2"+
    "\1\10\1\2\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\7\1\33\1\7\1\34"+
    "\1\35\1\7\1\36\1\37\1\40\2\7\1\41\1\7"+
    "\1\42\6\6\4\7\65\0\1\3\1\0\1\3\62\0"+
    "\1\43\1\0\1\44\64\0\3\7\1\45\1\46\15\0"+
    "\35\7\6\0\1\7\20\0\1\47\1\7\1\50\4\7"+
    "\1\51\1\52\2\7\1\53\1\7\1\54\5\7\6\0"+
    "\4\7\6\0\1\55\1\0\1\56\16\0\23\55\6\0"+
    "\4\55\17\0\1\57\101\0\1\60\33\0\3\7\1\45"+
    "\1\46\15\0\1\7\1\61\7\7\1\62\23\7\5\0"+
    "\3\7\1\45\1\46\15\0\14\7\1\63\20\7\5\0"+
    "\3\7\1\45\1\46\15\0\3\7\1\64\16\7\1\65"+
    "\12\7\5\0\3\7\1\45\1\46\15\0\5\7\1\66"+
    "\2\7\1\67\4\7\1\70\17\7\5\0\3\7\1\45"+
    "\1\46\15\0\14\7\1\71\20\7\5\0\3\7\1\45"+
    "\1\46\15\0\22\7\1\72\12\7\5\0\3\7\1\45"+
    "\1\46\15\0\33\7\1\73\1\7\5\0\3\7\1\45"+
    "\1\46\15\0\14\7\1\74\20\7\5\0\3\7\1\45"+
    "\1\46\15\0\1\7\1\75\12\7\1\76\20\7\5\0"+
    "\3\7\1\45\1\46\15\0\7\7\1\77\11\7\1\100"+
    "\13\7\5\0\3\7\1\45\1\46\15\0\4\7\1\101"+
    "\11\7\1\102\16\7\5\0\3\7\1\45\1\46\15\0"+
    "\2\7\1\103\3\7\1\104\5\7\1\105\20\7\5\0"+
    "\3\7\1\45\1\46\15\0\6\7\1\106\26\7\3\43"+
    "\1\0\60\43\4\44\1\107\57\44\6\0\1\7\20\0"+
    "\23\7\6\0\4\7\5\0\3\46\17\0\35\46\5\0"+
    "\3\7\1\45\1\46\15\0\1\7\1\110\2\7\1\111"+
    "\30\7\5\0\3\7\1\45\1\46\15\0\3\7\1\112"+
    "\31\7\5\0\3\7\1\45\1\46\15\0\10\7\1\113"+
    "\24\7\5\0\3\7\1\45\1\46\15\0\20\7\1\114"+
    "\14\7\5\0\3\7\1\45\1\46\15\0\14\7\1\115"+
    "\20\7\5\0\3\7\1\45\1\46\15\0\2\7\1\116"+
    "\13\7\1\117\16\7\5\0\3\55\1\56\1\120\1\121"+
    "\14\0\35\55\6\0\1\55\20\0\23\55\6\0\4\55"+
    "\33\0\1\122\35\0\3\7\1\45\1\46\15\0\2\7"+
    "\1\123\32\7\5\0\3\7\1\45\1\46\15\0\2\7"+
    "\1\124\32\7\5\0\3\7\1\45\1\46\15\0\5\7"+
    "\1\125\27\7\5\0\3\7\1\45\1\46\15\0\3\7"+
    "\1\126\31\7\5\0\3\7\1\45\1\46\15\0\3\7"+
    "\1\127\31\7\5\0\3\7\1\45\1\46\15\0\2\7"+
    "\1\130\13\7\1\131\16\7\5\0\3\7\1\45\1\46"+
    "\15\0\2\7\1\132\13\7\1\133\16\7\5\0\3\7"+
    "\1\45\1\46\15\0\10\7\1\134\24\7\5\0\3\7"+
    "\1\45\1\46\15\0\21\7\1\135\13\7\5\0\3\7"+
    "\1\45\1\46\15\0\32\7\1\136\2\7\5\0\3\7"+
    "\1\45\1\46\15\0\5\7\1\137\27\7\5\0\3\7"+
    "\1\45\1\46\15\0\12\7\1\140\22\7\5\0\3\7"+
    "\1\45\1\46\15\0\6\7\1\141\26\7\5\0\3\7"+
    "\1\45\1\46\15\0\21\7\1\142\13\7\5\0\3\7"+
    "\1\45\1\46\15\0\15\7\1\143\17\7\5\0\3\7"+
    "\1\45\1\46\15\0\5\7\1\144\6\7\1\145\20\7"+
    "\5\0\3\7\1\45\1\46\15\0\22\7\1\146\12\7"+
    "\5\0\3\7\1\45\1\46\15\0\6\7\1\147\5\7"+
    "\1\150\20\7\5\0\3\7\1\45\1\46\15\0\1\7"+
    "\1\151\33\7\5\0\3\7\1\45\1\46\15\0\14\7"+
    "\1\152\20\7\5\0\3\7\1\45\1\46\15\0\16\7"+
    "\1\153\16\7\5\0\3\7\1\45\1\46\15\0\6\7"+
    "\1\154\26\7\2\44\1\155\1\44\1\107\57\44\5\0"+
    "\3\7\1\45\1\46\15\0\2\7\1\156\32\7\5\0"+
    "\3\7\1\45\1\46\15\0\3\7\1\157\31\7\5\0"+
    "\3\7\1\45\1\46\15\0\3\7\1\160\31\7\5\0"+
    "\3\7\1\45\1\46\15\0\5\7\1\161\27\7\5\0"+
    "\3\7\1\45\1\46\15\0\10\7\1\162\24\7\5\0"+
    "\3\7\1\45\1\46\15\0\10\7\1\163\24\7\5\0"+
    "\3\7\1\45\1\46\15\0\16\7\1\164\16\7\5\0"+
    "\3\7\1\45\1\46\15\0\6\7\1\165\26\7\5\0"+
    "\3\120\2\0\1\121\14\0\35\120\34\0\1\166\34\0"+
    "\3\7\1\45\1\46\15\0\3\7\1\167\31\7\5\0"+
    "\3\7\1\45\1\46\15\0\16\7\1\170\16\7\5\0"+
    "\3\7\1\45\1\46\15\0\10\7\1\171\24\7\5\0"+
    "\3\7\1\45\1\46\15\0\10\7\1\172\24\7\5\0"+
    "\3\7\1\45\1\46\15\0\5\7\1\173\27\7\5\0"+
    "\3\7\1\45\1\46\15\0\5\7\1\174\27\7\5\0"+
    "\3\7\1\45\1\46\15\0\14\7\1\175\20\7\5\0"+
    "\3\7\1\45\1\46\15\0\1\7\1\176\33\7\5\0"+
    "\3\7\1\45\1\46\15\0\14\7\1\177\20\7\5\0"+
    "\3\7\1\45\1\46\15\0\1\200\34\7\5\0\3\7"+
    "\1\45\1\46\15\0\5\7\1\201\27\7\5\0\3\7"+
    "\1\45\1\46\15\0\10\7\1\202\24\7\5\0\3\7"+
    "\1\45\1\46\15\0\10\7\1\203\24\7\5\0\3\7"+
    "\1\45\1\46\15\0\10\7\1\204\24\7\5\0\3\7"+
    "\1\45\1\46\15\0\2\7\1\205\32\7\5\0\3\7"+
    "\1\45\1\46\15\0\2\7\1\206\32\7\5\0\3\7"+
    "\1\45\1\46\15\0\1\7\1\207\33\7\5\0\3\7"+
    "\1\45\1\46\15\0\10\7\1\210\12\7\1\211\1\212"+
    "\1\213\1\214\6\7\5\0\3\7\1\45\1\46\15\0"+
    "\5\7\1\215\27\7\5\0\3\7\1\45\1\46\15\0"+
    "\1\7\1\216\33\7\5\0\3\7\1\45\1\46\15\0"+
    "\5\7\1\217\27\7\5\0\3\7\1\45\1\46\15\0"+
    "\20\7\1\220\14\7\5\0\3\7\1\45\1\46\15\0"+
    "\4\7\1\221\30\7\5\0\3\7\1\45\1\46\15\0"+
    "\12\7\1\222\22\7\5\0\3\7\1\45\1\46\15\0"+
    "\5\7\1\223\27\7\5\0\3\7\1\45\1\46\15\0"+
    "\1\7\1\224\33\7\5\0\3\7\1\45\1\46\15\0"+
    "\3\7\1\225\31\7\5\0\3\7\1\45\1\46\15\0"+
    "\5\7\1\226\27\7\5\0\3\7\1\45\1\46\15\0"+
    "\10\7\1\227\24\7\5\0\3\7\1\45\1\46\15\0"+
    "\11\7\1\230\23\7\5\0\3\7\1\45\1\46\15\0"+
    "\21\7\1\231\13\7\5\0\3\7\1\45\1\46\15\0"+
    "\1\7\1\232\33\7\5\0\3\7\1\45\1\46\15\0"+
    "\2\7\1\233\32\7\5\0\3\7\1\45\1\46\15\0"+
    "\15\7\1\234\17\7\21\0\1\235\47\0\3\7\1\45"+
    "\1\46\15\0\3\7\1\236\31\7\5\0\3\7\1\45"+
    "\1\46\15\0\16\7\1\237\16\7\5\0\3\7\1\45"+
    "\1\46\15\0\7\7\1\240\25\7\5\0\3\7\1\45"+
    "\1\46\15\0\16\7\1\241\16\7\5\0\3\7\1\45"+
    "\1\46\15\0\14\7\1\242\20\7\5\0\3\7\1\45"+
    "\1\46\15\0\21\7\1\243\13\7\5\0\3\7\1\45"+
    "\1\46\15\0\10\7\1\244\24\7\5\0\3\7\1\45"+
    "\1\46\15\0\2\7\1\245\32\7\5\0\3\7\1\45"+
    "\1\46\15\0\14\7\1\246\20\7\5\0\3\7\1\45"+
    "\1\46\15\0\23\7\1\247\1\250\1\251\1\252\6\7"+
    "\5\0\3\7\1\45\1\46\15\0\1\253\34\7\5\0"+
    "\3\7\1\45\1\46\15\0\21\7\1\254\13\7\5\0"+
    "\3\7\1\45\1\46\15\0\22\7\1\255\12\7\5\0"+
    "\3\7\1\45\1\46\15\0\5\7\1\256\27\7\5\0"+
    "\3\7\1\45\1\46\15\0\1\7\1\257\33\7\5\0"+
    "\3\7\1\45\1\46\15\0\10\7\1\260\24\7\5\0"+
    "\3\7\1\45\1\46\15\0\16\7\1\261\16\7\5\0"+
    "\3\7\1\45\1\46\15\0\25\7\1\262\7\7\5\0"+
    "\3\7\1\45\1\46\15\0\30\7\1\263\4\7\5\0"+
    "\3\7\1\45\1\46\15\0\27\7\1\264\5\7\5\0"+
    "\3\7\1\45\1\46\15\0\6\7\1\265\26\7\5\0"+
    "\3\7\1\45\1\46\15\0\14\7\1\266\20\7\5\0"+
    "\3\7\1\45\1\46\15\0\10\7\1\267\24\7\5\0"+
    "\3\7\1\45\1\46\15\0\2\7\1\270\32\7\5\0"+
    "\3\7\1\45\1\46\15\0\10\7\1\271\24\7\5\0"+
    "\3\7\1\45\1\46\15\0\4\7\1\272\30\7\5\0"+
    "\3\7\1\45\1\46\15\0\3\7\1\273\31\7\5\0"+
    "\3\7\1\45\1\46\15\0\6\7\1\274\26\7\5\0"+
    "\3\7\1\45\1\46\15\0\7\7\1\275\25\7\5\0"+
    "\3\7\1\45\1\46\15\0\6\7\1\276\26\7\5\0"+
    "\3\7\1\45\1\46\15\0\5\7\1\277\27\7\5\0"+
    "\3\7\1\45\1\46\15\0\12\7\1\300\22\7\5\0"+
    "\3\7\1\45\1\46\15\0\7\7\1\301\25\7\5\0"+
    "\3\7\1\45\1\46\15\0\10\7\1\302\24\7\5\0"+
    "\3\7\1\45\1\46\15\0\2\7\1\303\32\7\5\0"+
    "\3\7\1\45\1\46\15\0\22\7\1\304\12\7\5\0"+
    "\3\7\1\45\1\46\15\0\2\7\1\305\32\7\5\0"+
    "\3\7\1\45\1\46\15\0\1\306\34\7\5\0\3\7"+
    "\1\45\1\46\15\0\31\7\1\307\3\7\5\0\3\7"+
    "\1\45\1\46\15\0\12\7\1\310\22\7\5\0\3\7"+
    "\1\45\1\46\15\0\1\7\1\311\33\7\5\0\3\7"+
    "\1\45\1\46\15\0\2\7\1\312\32\7\5\0\3\7"+
    "\1\45\1\46\15\0\25\7\1\313\7\7\5\0\3\7"+
    "\1\45\1\46\15\0\30\7\1\314\4\7\5\0\3\7"+
    "\1\45\1\46\15\0\27\7\1\315\5\7\5\0\3\7"+
    "\1\45\1\46\15\0\5\7\1\316\27\7\5\0\3\7"+
    "\1\45\1\46\15\0\12\7\1\317\22\7\5\0\3\7"+
    "\1\45\1\46\15\0\17\7\1\320\15\7\5\0\3\7"+
    "\1\45\1\46\15\0\25\7\1\321\7\7\5\0\3\7"+
    "\1\45\1\46\15\0\7\7\1\322\25\7\5\0\3\7"+
    "\1\45\1\46\15\0\13\7\1\323\21\7\5\0\3\7"+
    "\1\45\1\46\15\0\21\7\1\324\13\7\5\0\3\7"+
    "\1\45\1\46\15\0\1\325\34\7\5\0\3\7\1\45"+
    "\1\46\15\0\1\326\34\7\5\0\3\7\1\45\1\46"+
    "\15\0\5\7\1\327\27\7\5\0\3\7\1\45\1\46"+
    "\15\0\5\7\1\330\27\7\5\0\3\7\1\45\1\46"+
    "\15\0\2\7\1\331\32\7\5\0\3\7\1\45\1\46"+
    "\15\0\7\7\1\332\25\7\5\0\3\7\1\45\1\46"+
    "\15\0\22\7\1\333\12\7\5\0\3\7\1\45\1\46"+
    "\15\0\12\7\1\334\22\7\5\0\3\7\1\45\1\46"+
    "\15\0\16\7\1\335\16\7\5\0\3\7\1\45\1\46"+
    "\15\0\1\7\1\336\33\7\5\0\3\7\1\45\1\46"+
    "\15\0\1\7\1\337\33\7\5\0\3\7\1\45\1\46"+
    "\15\0\1\340\34\7\5\0\3\7\1\45\1\46\15\0"+
    "\14\7\1\341\20\7\5\0\3\7\1\45\1\46\15\0"+
    "\1\7\1\342\33\7\5\0\3\7\1\45\1\46\15\0"+
    "\3\7\1\343\31\7\5\0\3\7\1\45\1\46\15\0"+
    "\3\7\1\344\31\7\5\0\3\7\1\45\1\46\15\0"+
    "\30\7\1\345\4\7\5\0\3\7\1\45\1\46\15\0"+
    "\10\7\1\346\24\7\5\0\3\7\1\45\1\46\15\0"+
    "\2\7\1\347\32\7\5\0\3\7\1\45\1\46\15\0"+
    "\1\7\1\350\33\7\5\0\3\7\1\45\1\46\15\0"+
    "\5\7\1\351\27\7\5\0\3\7\1\45\1\46\15\0"+
    "\10\7\1\352\24\7\5\0\3\7\1\45\1\46\15\0"+
    "\17\7\1\353\15\7\5\0\3\7\1\45\1\46\15\0"+
    "\1\7\1\354\33\7\5\0\3\7\1\45\1\46\15\0"+
    "\1\7\1\355\33\7\5\0\3\7\1\45\1\46\15\0"+
    "\5\7\1\356\27\7\5\0\3\7\1\45\1\46\15\0"+
    "\17\7\1\357\15\7\5\0\3\7\1\45\1\46\15\0"+
    "\5\7\1\360\27\7\5\0\3\7\1\45\1\46\15\0"+
    "\34\7\1\361\5\0\3\7\1\45\1\46\15\0\21\7"+
    "\1\362\13\7\5\0\3\7\1\45\1\46\15\0\14\7"+
    "\1\363\20\7\5\0\3\7\1\45\1\46\15\0\21\7"+
    "\1\364\13\7\5\0\3\7\1\45\1\46\15\0\1\365"+
    "\34\7\5\0\3\7\1\45\1\46\15\0\17\7\1\366"+
    "\15\7\5\0\3\7\1\45\1\46\15\0\10\7\1\367"+
    "\24\7\5\0\3\7\1\45\1\46\15\0\15\7\1\370"+
    "\17\7\5\0\3\7\1\45\1\46\15\0\17\7\1\371"+
    "\15\7\5\0\3\7\1\45\1\46\15\0\17\7\1\372"+
    "\15\7\5\0\3\7\1\45\1\46\15\0\2\7\1\373"+
    "\32\7\5\0\3\7\1\45\1\46\15\0\2\7\1\374"+
    "\32\7\5\0\3\7\1\45\1\46\15\0\31\7\1\375"+
    "\3\7\5\0\3\7\1\45\1\46\15\0\5\7\1\376"+
    "\27\7\5\0\3\7\1\45\1\46\15\0\10\7\1\377"+
    "\24\7\5\0\3\7\1\45\1\46\15\0\12\7\1\u0100"+
    "\22\7\5\0\3\7\1\45\1\46\15\0\10\7\1\u0101"+
    "\24\7\5\0\3\7\1\45\1\46\15\0\22\7\1\u0102"+
    "\12\7\5\0\3\7\1\45\1\46\15\0\7\7\1\u0103"+
    "\25\7\5\0\3\7\1\45\1\46\15\0\3\7\1\u0104"+
    "\31\7\5\0\3\7\1\45\1\46\15\0\1\7\1\u0105"+
    "\33\7\5\0\3\7\1\45\1\46\15\0\10\7\1\u0106"+
    "\24\7\5\0\3\7\1\45\1\46\15\0\10\7\1\u0107"+
    "\24\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10712];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\3\1\4\11\2\1\6\11"+
    "\17\1\1\0\7\1\2\0\1\11\1\0\26\1\1\0"+
    "\10\1\1\0\1\11\1\0\32\1\1\11\10\1\1\0"+
    "\46\1\1\11\152\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  public _MsilLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _MsilLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2262) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { return MsilTokens.INT8_KEYWORD;
          }
        case 65: break;
        case 62: 
          { return MsilTokens.IMPLEMENTS_KEYWORD;
          }
        case 66: break;
        case 39: 
          { return MsilTokens.STRING_KEYWORD;
          }
        case 67: break;
        case 38: 
          { return MsilTokens.STATIC_KEYWORD;
          }
        case 68: break;
        case 8: 
          { return MsilTokens.LT;
          }
        case 69: break;
        case 57: 
          { return MsilTokens._PROPERTY_KEYWORD;
          }
        case 70: break;
        case 59: 
          { return MsilTokens.INTERFACE_KEYWORD;
          }
        case 71: break;
        case 6: 
          { return MsilTokens.LBRACE;
          }
        case 72: break;
        case 25: 
          { return MsilTokens.BRACKET_OUT_KEYWORD;
          }
        case 73: break;
        case 3: 
          { return MsilTokens.PERC;
          }
        case 74: break;
        case 56: 
          { return MsilTokens._ASSEMBLY_KEYWORD;
          }
        case 75: break;
        case 7: 
          { return MsilTokens.RBRACE;
          }
        case 76: break;
        case 11: 
          { return MsilTokens.RBRACKET;
          }
        case 77: break;
        case 34: 
          { return MsilTokens._CLASS_KEYWORD;
          }
        case 78: break;
        case 41: 
          { return MsilTokens.UINT16_KEYWORD;
          }
        case 79: break;
        case 46: 
          { return MsilTokens._CUSTOM_KEYWORD;
          }
        case 80: break;
        case 64: 
          { return MsilTokens.SERIALIZABLE_KEYWORD;
          }
        case 81: break;
        case 13: 
          { return MsilTokens.RPAR;
          }
        case 82: break;
        case 43: 
          { return MsilTokens.UINT32_KEYWORD;
          }
        case 83: break;
        case 36: 
          { return MsilTokens._FIELD_KEYWORD;
          }
        case 84: break;
        case 4: 
          { return MsilTokens.NUMBER;
          }
        case 85: break;
        case 40: 
          { return MsilTokens.SEALED_KEYWORD;
          }
        case 86: break;
        case 54: 
          { return MsilTokens.ABSTRACT_KEYWORD;
          }
        case 87: break;
        case 45: 
          { return MsilTokens.PUBLIC_KEYWORD;
          }
        case 88: break;
        case 23: 
          { return MsilTokens.VOID_KEYWORD;
          }
        case 89: break;
        case 19: 
          { return MsilTokens.COLONCOLON;
          }
        case 90: break;
        case 16: 
          { return MsilTokens.COMMA;
          }
        case 91: break;
        case 29: 
          { return MsilTokens.FINAL_KEYWORD;
          }
        case 92: break;
        case 20: 
          { return MsilTokens.QIDENTIFIER;
          }
        case 93: break;
        case 27: 
          { return MsilTokens.UINT8_KEYWORD;
          }
        case 94: break;
        case 50: 
          { return MsilTokens.FLOAT64_KEYWORD;
          }
        case 95: break;
        case 31: 
          { return MsilTokens.INT64_KEYWORD;
          }
        case 96: break;
        case 51: 
          { return MsilTokens.PRIVATE_KEYWORD;
          }
        case 97: break;
        case 63: 
          { return MsilTokens.SPECIALNAME_KEYWORD;
          }
        case 98: break;
        case 44: 
          { return MsilTokens.OBJECT_KEYWORD;
          }
        case 99: break;
        case 61: 
          { return MsilTokens.VALUETYPE_KEYWORD;
          }
        case 100: break;
        case 17: 
          { return MsilTokens.LINE_COMMENT;
          }
        case 101: break;
        case 10: 
          { return MsilTokens.LBRACKET;
          }
        case 102: break;
        case 2: 
          { return MsilTokens.WHITE_SPACE;
          }
        case 103: break;
        case 48: 
          { return MsilTokens.LITERAL_KEYWORD;
          }
        case 104: break;
        case 26: 
          { return MsilTokens.CLASS_KEYWORD;
          }
        case 105: break;
        case 24: 
          { return MsilTokens.BOOL_KEYWORD;
          }
        case 106: break;
        case 9: 
          { return MsilTokens.GT;
          }
        case 107: break;
        case 33: 
          { return MsilTokens.VALUE_KEYWORD;
          }
        case 108: break;
        case 21: 
          { return MsilTokens.CHAR_KEYWORD;
          }
        case 109: break;
        case 53: 
          { return MsilTokens.ASSEMBLY_KEYWORD;
          }
        case 110: break;
        case 49: 
          { return MsilTokens.EXTENDS_KEYWORD;
          }
        case 111: break;
        case 28: 
          { return MsilTokens.FLOAT_KEYWORD;
          }
        case 112: break;
        case 58: 
          { return MsilTokens.HIDEBYSIG_KEYWORD;
          }
        case 113: break;
        case 30: 
          { return MsilTokens.INT16_KEYWORD;
          }
        case 114: break;
        case 35: 
          { return MsilTokens._EVENT_KEYWORD;
          }
        case 115: break;
        case 32: 
          { return MsilTokens.INT32_KEYWORD;
          }
        case 116: break;
        case 12: 
          { return MsilTokens.LPAR;
          }
        case 117: break;
        case 14: 
          { return MsilTokens.EQ;
          }
        case 118: break;
        case 15: 
          { return MsilTokens.AND;
          }
        case 119: break;
        case 5: 
          { return MsilTokens.IDENTIFIER;
          }
        case 120: break;
        case 55: 
          { return MsilTokens.INITONLY_KEYWORD;
          }
        case 121: break;
        case 18: 
          { return MsilTokens.BLOCK_COMMENT;
          }
        case 122: break;
        case 52: 
          { return MsilTokens.VIRTUAL_KEYWORD;
          }
        case 123: break;
        case 42: 
          { return MsilTokens.UINT64_KEYWORD;
          }
        case 124: break;
        case 37: 
          { return MsilTokens._PARAM_KEYWORD;
          }
        case 125: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 126: break;
        case 47: 
          { return MsilTokens._METHOD_KEYWORD;
          }
        case 127: break;
        case 60: 
          { return MsilTokens.PROTECTED_KEYWORD;
          }
        case 128: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
