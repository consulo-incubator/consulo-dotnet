/* The following code was generated by JFlex 1.4.4 on 18.05.15 16:55 */

package org.mustbe.consulo.msil.lang.lexer;

import org.mustbe.consulo.msil.lang.psi.MsilTokens;
import com.intellij.lexer.LexerBase;
import com.intellij.psi.tree.IElementType;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.4
 * on 18.05.15 16:55 from the specification file
 * <tt>R:/_github.com/consulo/consulo-dotnet/msil-psi-impl/src/org/mustbe/consulo/msil/lang/lexer/_MsilLexer.flex</tt>
 */
public class _MsilLexer extends LexerBase {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\1\1\3\1\0\1\1\1\3\16\10\4\0\1\1\1\20"+
    "\2\0\1\7\1\0\1\27\1\12\1\24\1\25\1\4\1\31\1\30"+
    "\1\32\1\6\1\2\1\5\1\60\1\63\1\62\1\64\1\5\1\61"+
    "\1\5\1\57\1\5\1\21\1\0\1\16\1\26\1\17\2\0\32\7"+
    "\1\22\1\13\1\23\1\0\1\7\1\11\1\35\1\55\1\33\1\46"+
    "\1\44\1\47\1\56\1\45\1\50\1\65\1\7\1\34\1\43\1\54"+
    "\1\40\1\51\1\7\1\41\1\36\1\37\1\42\1\53\1\7\1\66"+
    "\1\52\1\67\1\14\1\0\1\15\1\0\41\10\2\0\4\7\4\0"+
    "\1\7\2\0\1\10\7\0\1\7\4\0\1\7\5\0\27\7\1\0"+
    "\37\7\1\0\u013f\7\31\0\162\7\4\0\14\7\16\0\5\7\11\0"+
    "\1\7\21\0\130\10\5\0\23\10\12\0\1\7\13\0\1\7\1\0"+
    "\3\7\1\0\1\7\1\0\24\7\1\0\54\7\1\0\46\7\1\0"+
    "\5\7\4\0\202\7\1\0\4\10\3\0\105\7\1\0\46\7\2\0"+
    "\2\7\6\0\20\7\41\0\46\7\2\0\1\7\7\0\47\7\11\0"+
    "\21\10\1\0\27\10\1\0\3\10\1\0\1\10\1\0\2\10\1\0"+
    "\1\10\13\0\33\7\5\0\3\7\15\0\4\10\14\0\6\10\13\0"+
    "\32\7\5\0\13\7\16\10\7\0\12\10\4\0\2\7\1\10\143\7"+
    "\1\0\1\7\10\10\1\0\6\10\2\7\2\10\1\0\4\10\2\7"+
    "\12\10\3\7\2\0\1\7\17\0\1\10\1\7\1\10\36\7\33\10"+
    "\2\0\3\7\60\0\46\7\13\10\1\7\u014f\0\3\10\66\7\2\0"+
    "\1\10\1\7\20\10\2\0\1\7\4\10\3\0\12\7\2\10\2\0"+
    "\12\10\21\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\1\7\3\0\4\7\2\0\1\10\1\7\7\10\2\0"+
    "\2\10\2\0\3\10\11\0\1\10\4\0\2\7\1\0\3\7\2\10"+
    "\2\0\12\10\4\7\15\0\3\10\1\0\6\7\4\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0"+
    "\1\10\1\0\5\10\4\0\2\10\2\0\3\10\13\0\4\7\1\0"+
    "\1\7\7\0\14\10\3\7\14\0\3\10\1\0\11\7\1\0\3\7"+
    "\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10"+
    "\1\7\10\10\1\0\3\10\1\0\3\10\2\0\1\7\17\0\2\7"+
    "\2\10\2\0\12\10\1\0\1\7\17\0\3\10\1\0\10\7\2\0"+
    "\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0"+
    "\1\10\1\7\6\10\3\0\2\10\2\0\3\10\10\0\2\10\4\0"+
    "\2\7\1\0\3\7\4\0\12\10\1\0\1\7\20\0\1\10\1\7"+
    "\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\3\0\3\7\3\0\10\7\1\0\3\7"+
    "\4\0\5\10\3\0\3\10\1\0\4\10\11\0\1\10\17\0\11\10"+
    "\11\0\1\7\7\0\3\10\1\0\10\7\1\0\3\7\1\0\27\7"+
    "\1\0\12\7\1\0\5\7\4\0\7\10\1\0\3\10\1\0\4\10"+
    "\7\0\2\10\11\0\2\7\4\0\12\10\22\0\2\10\1\0\10\7"+
    "\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\2\0\1\10"+
    "\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0\1\7"+
    "\1\0\2\7\4\0\12\10\22\0\2\10\1\0\10\7\1\0\3\7"+
    "\1\0\27\7\1\0\20\7\4\0\6\10\2\0\3\10\1\0\4\10"+
    "\11\0\1\10\10\0\2\7\4\0\12\10\22\0\2\10\1\0\22\7"+
    "\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7\3\0\1\10"+
    "\4\0\6\10\1\0\1\10\1\0\10\10\22\0\2\10\15\0\60\7"+
    "\1\10\2\7\7\10\4\0\10\7\10\10\1\0\12\10\47\0\2\7"+
    "\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7"+
    "\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7"+
    "\1\0\4\7\1\10\2\7\6\10\1\0\2\10\1\7\2\0\5\7"+
    "\1\0\1\7\1\0\6\10\2\0\12\10\2\0\2\7\42\0\1\7"+
    "\27\0\2\10\6\0\12\10\13\0\1\10\1\0\1\10\1\0\1\10"+
    "\4\0\2\10\10\7\1\0\42\7\6\0\24\10\1\0\2\10\4\7"+
    "\4\0\10\10\1\0\44\10\11\0\1\10\71\0\42\7\1\0\5\7"+
    "\1\0\2\7\1\0\7\10\3\0\4\10\6\0\12\10\6\0\6\7"+
    "\4\10\106\0\46\7\12\0\51\7\7\0\132\7\5\0\104\7\5\0"+
    "\122\7\6\0\7\7\1\0\77\7\1\0\1\7\1\0\4\7\2\0"+
    "\7\7\1\0\1\7\1\0\4\7\2\0\47\7\1\0\1\7\1\0"+
    "\4\7\2\0\37\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0"+
    "\1\7\1\0\4\7\2\0\7\7\1\0\7\7\1\0\27\7\1\0"+
    "\37\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0\47\7\1\0"+
    "\23\7\16\0\11\10\56\0\125\7\14\0\u026c\7\2\0\10\7\12\0"+
    "\32\7\5\0\113\7\3\0\3\7\17\0\15\7\1\0\4\7\3\10"+
    "\13\0\22\7\3\10\13\0\22\7\2\10\14\0\15\7\1\0\3\7"+
    "\1\0\2\10\14\0\64\7\40\10\3\0\1\7\3\0\2\7\1\10"+
    "\2\0\12\10\41\0\3\10\2\0\12\10\6\0\130\7\10\0\51\7"+
    "\1\10\126\0\35\7\3\0\14\10\4\0\14\10\12\0\12\10\36\7"+
    "\2\0\5\7\u038b\0\154\7\224\0\234\7\4\0\132\7\6\0\26\7"+
    "\2\0\6\7\2\0\46\7\2\0\6\7\2\0\10\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\37\7\2\0\65\7\1\0\7\7"+
    "\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7"+
    "\4\0\15\7\5\0\3\7\1\0\7\7\17\0\4\10\32\0\5\10"+
    "\20\0\2\7\23\0\1\7\13\0\4\10\6\0\6\10\1\0\1\7"+
    "\15\0\1\7\40\0\22\7\36\0\15\10\4\0\1\10\3\0\6\10"+
    "\27\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7"+
    "\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\3\7"+
    "\1\0\7\7\3\0\3\7\5\0\5\7\26\0\44\7\u0e81\0\3\7"+
    "\31\0\11\7\6\10\1\0\5\7\2\0\5\7\4\0\126\7\2\0"+
    "\2\10\2\0\3\7\1\0\137\7\5\0\50\7\4\0\136\7\21\0"+
    "\30\7\70\0\20\7\u0200\0\u19b6\7\112\0\u51a6\7\132\0\u048d\7\u0773\0"+
    "\u2ba4\7\u215c\0\u012e\7\2\0\73\7\225\0\7\7\14\0\5\7\5\0"+
    "\1\7\1\10\12\7\1\0\15\7\1\0\5\7\1\0\1\7\1\0"+
    "\2\7\1\0\2\7\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0"+
    "\66\7\50\0\15\7\3\0\20\10\20\0\4\10\17\0\2\7\30\0"+
    "\3\7\31\0\1\7\6\0\5\7\1\0\207\7\2\0\1\10\4\0"+
    "\1\7\13\0\12\10\7\0\32\7\4\0\1\7\1\0\32\7\12\0"+
    "\132\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0"+
    "\2\7\3\0\2\7\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\1\2\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\17\5"+
    "\1\24\1\25\13\0\3\5\1\26\2\0\31\5\1\0"+
    "\1\27\21\0\23\5\1\30\12\5\1\25\6\0\1\31"+
    "\6\0\1\32\2\0\1\33\1\5\1\34\12\5\1\35"+
    "\7\5\1\36\11\5\1\37\2\5\1\40\2\0\1\41"+
    "\11\0\1\42\1\43\1\44\12\5\1\45\5\5\1\46"+
    "\1\5\1\47\2\5\1\50\1\51\1\52\4\5\1\53"+
    "\3\5\1\54\1\55\2\0\1\56\2\0\1\57\1\60"+
    "\1\61\1\0\3\5\1\62\1\63\1\64\2\5\1\65"+
    "\1\5\1\66\1\67\1\70\11\5\1\71\1\5\1\72"+
    "\1\5\1\73\1\74\2\0\1\75\1\0\1\76\5\5"+
    "\1\77\1\5\1\100\5\5\1\101\1\5\1\102\3\0"+
    "\1\103\1\104\7\5\1\105\2\5\1\106\1\107\1\110"+
    "\3\5\1\111\2\5\1\112\1\113\1\114\3\5\1\115"+
    "\1\116\1\5\1\117\1\5\1\120\1\5\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\70\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\70\0\70\0\70\0\70\0\70\0\u01c0\0\u01f8"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8"+
    "\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578"+
    "\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738"+
    "\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\70"+
    "\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80"+
    "\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40"+
    "\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00"+
    "\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\70\0\u0f18\0\u0f50\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148"+
    "\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308"+
    "\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8"+
    "\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688"+
    "\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848"+
    "\0\u1880\0\u18b8\0\u18f0\0\u1928\0\70\0\u1960\0\u1998\0\u19d0"+
    "\0\u1a08\0\u1a40\0\u1a78\0\70\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58"+
    "\0\u1b90\0\u1bc8\0\70\0\u1c00\0\u1c38\0\70\0\u1c70\0\u0150"+
    "\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30"+
    "\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0"+
    "\0\u2028\0\u2060\0\u0150\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178"+
    "\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u0150\0\u2290\0\u22c8\0\u0150"+
    "\0\u2300\0\u2338\0\70\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450"+
    "\0\u2488\0\u24c0\0\u24f8\0\u2530\0\70\0\70\0\u0150\0\u2568"+
    "\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728"+
    "\0\u2760\0\u0150\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0"+
    "\0\u28e8\0\u0150\0\u2920\0\u2958\0\u0150\0\u0150\0\u0150\0\u2990"+
    "\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\70"+
    "\0\70\0\u2b50\0\u2b88\0\70\0\u2bc0\0\u2bf8\0\70\0\70"+
    "\0\70\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u0150\0\u0150\0\u0150"+
    "\0\u2d10\0\u2d48\0\u0150\0\u2d80\0\u0150\0\u0150\0\u0150\0\u2db8"+
    "\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78"+
    "\0\u0150\0\u2fb0\0\u0150\0\u2fe8\0\u0150\0\70\0\u3020\0\u3058"+
    "\0\70\0\u3090\0\u0150\0\u30c8\0\u3100\0\u3138\0\u3170\0\u31a8"+
    "\0\u0150\0\u31e0\0\u0150\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8"+
    "\0\u0150\0\u3330\0\u0150\0\u3368\0\u33a0\0\u33d8\0\u0150\0\u0150"+
    "\0\u3410\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u0150"+
    "\0\u3598\0\u35d0\0\70\0\70\0\70\0\u3608\0\u3640\0\u3678"+
    "\0\u0150\0\u36b0\0\u36e8\0\u0150\0\u0150\0\u0150\0\u3720\0\u3758"+
    "\0\u3790\0\u0150\0\u0150\0\u37c8\0\u0150\0\u3800\0\u0150\0\u3838"+
    "\0\u0150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\2\2\1\11\1\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\10\1\35"+
    "\1\36\1\37\1\10\1\40\1\41\1\10\1\42\1\43"+
    "\1\44\1\10\1\45\1\46\1\47\1\10\6\6\3\10"+
    "\71\0\1\3\1\0\1\3\66\0\1\50\1\0\1\51"+
    "\70\0\1\6\51\0\6\6\11\0\1\52\24\0\1\53"+
    "\1\0\1\54\1\55\2\0\1\56\1\0\1\57\1\60"+
    "\2\0\1\61\1\0\1\62\4\0\1\63\13\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\35\10\2\11"+
    "\1\66\1\0\2\11\1\66\3\11\2\67\54\11\21\0"+
    "\1\70\106\0\1\71\7\0\1\72\21\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\1\10\1\73\10\10"+
    "\1\74\22\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\15\10\1\75\17\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\3\10\1\76\16\10"+
    "\1\77\12\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\4\10\1\100\4\10\1\101\4\10\1\102"+
    "\16\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\22\10\1\103\12\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\4\10\1\104\30\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\15\10"+
    "\1\105\17\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\33\10\1\106\1\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\15\10\1\107\17\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\1\10\1\110\1\111\12\10\1\112\17\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\10\10\1\113"+
    "\10\10\1\114\13\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\6\10\1\115\1\116\25\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\2\10"+
    "\1\117\2\10\1\120\7\10\1\121\17\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\11\10\1\122"+
    "\23\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\5\10\1\123\27\10\3\50\1\0\64\50\4\51"+
    "\1\124\63\51\6\0\1\125\114\0\1\126\1\127\2\0"+
    "\1\130\2\0\1\131\63\0\1\132\7\0\1\133\65\0"+
    "\1\134\67\0\1\135\67\0\1\136\76\0\1\137\64\0"+
    "\1\140\54\0\1\141\3\0\1\142\72\0\1\143\32\0"+
    "\1\10\2\0\1\11\20\0\24\10\6\0\3\10\2\0"+
    "\1\64\2\0\1\65\1\64\2\65\22\0\35\65\2\11"+
    "\1\66\1\0\2\11\1\66\4\11\1\67\54\11\2\0"+
    "\1\64\3\0\1\64\123\0\1\144\6\0\1\145\72\0"+
    "\1\146\15\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\2\10\1\147\32\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\2\10\1\150\32\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\4\10"+
    "\1\151\30\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\3\10\1\152\31\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\3\10\1\153\31\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\2\10\1\154\3\10\1\155\26\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\2\10\1\156\3\10"+
    "\1\157\26\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\11\10\1\160\23\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\32\10\1\161\2\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\3\10\1\162\31\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\21\10\1\163\13\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\4\10\1\164"+
    "\30\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\13\10\1\165\21\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\5\10\1\166\27\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\10\10"+
    "\1\167\24\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\21\10\1\170\13\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\16\10\1\171\16\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\4\10\1\172\10\10\1\173\17\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\5\10\1\174\7\10"+
    "\1\175\17\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\22\10\1\176\12\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\1\10\1\177\4\10"+
    "\1\200\26\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\15\10\1\201\17\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\6\10\1\202\26\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\3\10\1\203\31\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\5\10\1\204\27\10\2\51\1\205"+
    "\1\51\1\124\63\51\37\0\1\206\65\0\1\207\72\0"+
    "\1\210\65\0\1\211\67\0\1\212\77\0\1\213\60\0"+
    "\1\214\73\0\1\215\63\0\1\216\74\0\1\217\67\0"+
    "\1\220\64\0\1\221\66\0\1\222\66\0\1\223\67\0"+
    "\1\224\67\0\1\225\53\0\1\226\46\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\3\10\1\227\31\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\6\10\1\230\26\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\11\10\1\231\23\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\11\10\1\232"+
    "\23\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\4\10\1\233\30\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\4\10\1\234\30\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\15\10"+
    "\1\235\17\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\1\10\1\236\33\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\15\10\1\237\17\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\1\240\34\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\11\10\1\241\23\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\16\10\1\242\16\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\4\10\1\243\30\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\11\10\1\244\23\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\11\10\1\245"+
    "\23\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\2\10\1\246\32\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\5\10\1\247\27\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\2\10"+
    "\1\250\32\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\1\10\1\251\33\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\11\10\1\252\12\10"+
    "\1\253\1\254\1\255\1\256\5\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\4\10\1\257\30\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\4\10\1\260\30\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\20\10\1\261\14\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\1\10\1\262"+
    "\33\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\7\10\1\263\25\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\2\10\1\264\32\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\13\10"+
    "\1\265\21\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\4\10\1\266\30\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\4\10\1\267\30\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\1\10\1\270\33\10\40\0\1\271\65\0\1\272\72\0"+
    "\1\273\65\0\1\274\74\0\1\275\63\0\1\276\67\0"+
    "\1\277\74\0\1\300\76\0\1\301\47\0\1\302\70\0"+
    "\1\303\103\0\1\304\41\0\1\305\67\0\1\306\46\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\3\10"+
    "\1\307\31\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\6\10\1\310\26\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\10\10\1\311\24\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\6\10\1\312\26\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\15\10\1\313\17\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\21\10\1\314"+
    "\13\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\11\10\1\315\23\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\2\10\1\316\32\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\15\10"+
    "\1\317\17\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\1\320\34\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\11\10\1\321\23\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\24\10"+
    "\1\322\1\323\1\324\1\325\5\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\21\10\1\326\13\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\22\10\1\327\12\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\4\10\1\330\30\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\6\10\1\331"+
    "\26\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\1\10\1\332\33\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\11\10\1\333\23\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\6\10"+
    "\1\334\26\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\26\10\1\335\6\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\31\10\1\336\3\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\30\10\1\337\4\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\5\10\1\340\27\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\11\10\1\341"+
    "\23\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\2\10\1\342\32\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\15\10\1\343\17\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\11\10"+
    "\1\344\23\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\6\10\1\345\26\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\7\10\1\346\25\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\11\10\1\347\23\10\41\0\1\350\64\0\1\351\71\0"+
    "\1\352\72\0\1\353\100\0\1\354\66\0\1\355\54\0"+
    "\1\356\66\0\1\357\76\0\1\360\64\0\1\361\70\0"+
    "\1\362\25\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\2\10\1\363\32\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\22\10\1\364\12\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\2\10"+
    "\1\365\32\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\1\366\34\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\23\10\1\367\11\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\13\10"+
    "\1\370\21\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\1\10\1\371\33\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\2\10\1\372\32\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\4\10\1\373\30\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\1\374\34\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\26\10\1\375\6\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\31\10\1\376\3\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\30\10\1\377\4\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\13\10\1\u0100"+
    "\21\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\17\10\1\u0101\15\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\26\10\1\u0102\6\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\2\10"+
    "\1\u0103\32\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\10\10\1\u0104\24\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\14\10\1\u0105\20\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\21\10\1\u0106\13\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\1\u0107\34\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\4\10\1\u0108\30\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\1\u0109\34\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\4\10\1\u010a\30\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\23\10\1\u010b\11\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\2\10\1\u010c\32\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\13\10\1\u010d\21\10\43\0\1\u010e"+
    "\101\0\1\u010f\56\0\1\u0110\71\0\1\u0111\62\0\1\u0112"+
    "\30\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\1\10\1\u0113\33\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\1\10\1\u0114\33\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\1\u0115\34\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\15\10\1\u0116\17\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\1\10\1\u0117\33\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\15\10\1\u0118"+
    "\17\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\3\10\1\u0119\31\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\3\10\1\u011a\31\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\31\10"+
    "\1\u011b\3\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\3\10\1\u011c\31\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\11\10\1\u011d\23\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\2\10\1\u011e\32\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\1\10\1\u011f\33\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\4\10\1\u0120"+
    "\30\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\11\10\1\u0121\23\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\17\10\1\u0122\15\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\1\10"+
    "\1\u0123\33\10\34\0\1\u0124\73\0\1\u0125\66\0\1\u0126"+
    "\32\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\17\10\1\u0127\15\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\4\10\1\u0128\30\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\34\10\1\u0129"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\21\10\1\u012a\13\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\2\10\1\u012b\32\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\15\10\1\u012c"+
    "\17\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\3\10\1\u012d\31\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\21\10\1\u012e\13\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\1\u012f"+
    "\34\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\17\10\1\u0130\15\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\11\10\1\u0131\23\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\16\10"+
    "\1\u0132\16\10\52\0\1\u0133\71\0\1\u0134\65\0\1\u0135"+
    "\17\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\2\10\1\u0136\32\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\2\10\1\u0137\32\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\1\10\1\u0138"+
    "\33\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\23\10\1\u0139\11\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\11\10\1\u013a\23\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\4\10"+
    "\1\u013b\30\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\11\10\1\u013c\23\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\13\10\1\u013d\21\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\11\10\1\u013e\23\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\22\10\1\u013f\12\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\10\10\1\u0140"+
    "\24\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\21\10\1\u0141\13\10\2\0\1\64\2\0\1\10"+
    "\1\64\2\10\1\65\21\0\10\10\1\u0142\24\10\2\0"+
    "\1\64\2\0\1\10\1\64\2\10\1\65\21\0\3\10"+
    "\1\u0143\31\10\2\0\1\64\2\0\1\10\1\64\2\10"+
    "\1\65\21\0\1\10\1\u0144\33\10\2\0\1\64\2\0"+
    "\1\10\1\64\2\10\1\65\21\0\11\10\1\u0145\23\10"+
    "\2\0\1\64\2\0\1\10\1\64\2\10\1\65\21\0"+
    "\2\10\1\u0146\32\10\2\0\1\64\2\0\1\10\1\64"+
    "\2\10\1\65\21\0\11\10\1\u0147\23\10\2\0\1\64"+
    "\2\0\1\10\1\64\2\10\1\65\21\0\10\10\1\u0148"+
    "\24\10\2\0\1\64\2\0\1\10\1\64\2\10\1\65"+
    "\21\0\11\10\1\u0149\23\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14448];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\4\1\5\11\2\1\10\11"+
    "\21\1\13\0\3\1\1\11\2\0\31\1\1\0\1\11"+
    "\21\0\36\1\1\11\6\0\1\11\6\0\1\11\2\0"+
    "\1\11\42\1\2\0\1\11\11\0\2\11\41\1\2\11"+
    "\2\0\1\11\2\0\3\11\1\0\33\1\1\11\2\0"+
    "\1\11\1\0\21\1\3\0\14\1\3\11\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  private IElementType myTokenType;
  private int myState;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;



  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  @Override
  public IElementType getTokenType() {
    if (myTokenType == null) locateToken();
    return myTokenType;
  }

  @Override
  public final int getTokenStart(){
    if (myTokenType == null) locateToken();
    return zzStartRead;
  }

  @Override
  public final int getTokenEnd(){
    if (myTokenType == null) locateToken();
    return getTokenStart() + yylength();
  }

  @Override
  public void advance() {
    if (myTokenType == null) locateToken();
    myTokenType = null;
  }

  @Override
  public int getState() {
    if (myTokenType == null) locateToken();
    return myState;
  }

  @Override
  public void start(final CharSequence buffer, int startOffset, int endOffset, final int initialState) {
    reset(buffer, startOffset, endOffset, initialState);
    myTokenType = null;
  }

   @Override
   public CharSequence getBufferSequence() {
     return zzBuffer;
   }

   @Override
   public int getBufferEnd() {
     return zzEndRead;
   }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
    myTokenType = null;
  }

   private void locateToken() {
     if (myTokenType != null) return;
     try {
       myState = yystate();
       myTokenType = advanceImpl();
     }
     catch (java.io.IOException e) { /*Can't happen*/ }
     catch (Error e) {
       // add lexer class name to the error
       final Error error = new Error(getClass().getName() + ": " + e.getMessage());
       error.setStackTrace(e.getStackTrace());
       throw error;
     }
   }

   /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advanceImpl() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { return MsilTokens.CHAR_KEYWORD;
          }
        case 82: break;
        case 57: 
          { return MsilTokens.PUBLIC_KEYWORD;
          }
        case 83: break;
        case 8: 
          { return MsilTokens.LT;
          }
        case 84: break;
        case 5: 
          { return MsilTokens.IDENTIFIER;
          }
        case 85: break;
        case 23: 
          { return MsilTokens.ELLIPSIS;
          }
        case 86: break;
        case 27: 
          { return MsilTokens.BRACKET_IN_KEYWORD;
          }
        case 87: break;
        case 13: 
          { return MsilTokens.LPAR;
          }
        case 88: break;
        case 66: 
          { return MsilTokens.VIRTUAL_KEYWORD;
          }
        case 89: break;
        case 47: 
          { return MsilTokens._EVENT_KEYWORD;
          }
        case 90: break;
        case 61: 
          { return MsilTokens._METHOD_KEYWORD;
          }
        case 91: break;
        case 22: 
          { return MsilTokens.COLONCOLON;
          }
        case 92: break;
        case 65: 
          { return MsilTokens.PRIVATE_KEYWORD;
          }
        case 93: break;
        case 67: 
          { return MsilTokens.ASSEMBLY_KEYWORD;
          }
        case 94: break;
        case 55: 
          { return MsilTokens.UINT64_KEYWORD;
          }
        case 95: break;
        case 9: 
          { return MsilTokens.GT;
          }
        case 96: break;
        case 36: 
          { return MsilTokens.CLASS_KEYWORD;
          }
        case 97: break;
        case 76: 
          { return MsilTokens.VALUETYPE_KEYWORD;
          }
        case 98: break;
        case 7: 
          { return MsilTokens.RBRACE;
          }
        case 99: break;
        case 53: 
          { return MsilTokens.OBJECT_KEYWORD;
          }
        case 100: break;
        case 50: 
          { return MsilTokens.STATIC_KEYWORD;
          }
        case 101: break;
        case 31: 
          { return MsilTokens.VOID_KEYWORD;
          }
        case 102: break;
        case 54: 
          { return MsilTokens.UINT16_KEYWORD;
          }
        case 103: break;
        case 48: 
          { return MsilTokens._FIELD_KEYWORD;
          }
        case 104: break;
        case 77: 
          { return MsilTokens.FAMORASSEMBLY_KEYWORD;
          }
        case 105: break;
        case 58: 
          { return MsilTokens.VARARG_KEYWORD;
          }
        case 106: break;
        case 17: 
          { return MsilTokens.COMMA;
          }
        case 107: break;
        case 2: 
          { return MsilTokens.WHITE_SPACE;
          }
        case 108: break;
        case 63: 
          { return MsilTokens.EXTENDS_KEYWORD;
          }
        case 109: break;
        case 43: 
          { return MsilTokens.VALUE_KEYWORD;
          }
        case 110: break;
        case 6: 
          { return MsilTokens.LBRACE;
          }
        case 111: break;
        case 46: 
          { return MsilTokens._ADDON_KEYWORD;
          }
        case 112: break;
        case 35: 
          { return MsilTokens.BRACKET_OPT_KEYWORD;
          }
        case 113: break;
        case 24: 
          { return MsilTokens.INT_KEYWORD;
          }
        case 114: break;
        case 12: 
          { return MsilTokens.RBRACKET;
          }
        case 115: break;
        case 42: 
          { return MsilTokens.INT32_KEYWORD;
          }
        case 116: break;
        case 38: 
          { return MsilTokens.FLOAT_KEYWORD;
          }
        case 117: break;
        case 60: 
          { return MsilTokens._CUSTOM_KEYWORD;
          }
        case 118: break;
        case 18: 
          { return MsilTokens.PLUS;
          }
        case 119: break;
        case 34: 
          { return MsilTokens.BRACKET_OUT_KEYWORD;
          }
        case 120: break;
        case 73: 
          { return MsilTokens.HIDEBYSIG_KEYWORD;
          }
        case 121: break;
        case 16: 
          { return MsilTokens.AND;
          }
        case 122: break;
        case 10: 
          { return MsilTokens.EXCL;
          }
        case 123: break;
        case 32: 
          { return MsilTokens.BOOL_KEYWORD;
          }
        case 124: break;
        case 72: 
          { return MsilTokens._PROPERTY_KEYWORD;
          }
        case 125: break;
        case 75: 
          { return MsilTokens.PROTECTED_KEYWORD;
          }
        case 126: break;
        case 44: 
          { return MsilTokens._CCTOR_KEYWORD;
          }
        case 127: break;
        case 62: 
          { return MsilTokens.LITERAL_KEYWORD;
          }
        case 128: break;
        case 71: 
          { return MsilTokens._REMOVEON_KEYWORD;
          }
        case 129: break;
        case 41: 
          { return MsilTokens.INT64_KEYWORD;
          }
        case 130: break;
        case 11: 
          { return MsilTokens.LBRACKET;
          }
        case 131: break;
        case 79: 
          { return MsilTokens.SPECIALNAME_KEYWORD;
          }
        case 132: break;
        case 80: 
          { return MsilTokens.SERIALIZABLE_KEYWORD;
          }
        case 133: break;
        case 30: 
          { return MsilTokens.INT8_KEYWORD;
          }
        case 134: break;
        case 40: 
          { return MsilTokens.INT16_KEYWORD;
          }
        case 135: break;
        case 69: 
          { return MsilTokens.INITONLY_KEYWORD;
          }
        case 136: break;
        case 49: 
          { return MsilTokens._PARAM_KEYWORD;
          }
        case 137: break;
        case 4: 
          { return MsilTokens.NUMBER;
          }
        case 138: break;
        case 15: 
          { return MsilTokens.EQ;
          }
        case 139: break;
        case 39: 
          { return MsilTokens.FINAL_KEYWORD;
          }
        case 140: break;
        case 74: 
          { return MsilTokens.INTERFACE_KEYWORD;
          }
        case 141: break;
        case 51: 
          { return MsilTokens.STRING_KEYWORD;
          }
        case 142: break;
        case 45: 
          { return MsilTokens._CLASS_KEYWORD;
          }
        case 143: break;
        case 64: 
          { return MsilTokens.FLOAT64_KEYWORD;
          }
        case 144: break;
        case 59: 
          { return MsilTokens.NESTED_KEYWORD;
          }
        case 145: break;
        case 29: 
          { return MsilTokens.UINT_KEYWORD;
          }
        case 146: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 147: break;
        case 19: 
          { return MsilTokens.MINUS;
          }
        case 148: break;
        case 25: 
          { return MsilTokens._SET_KEYWORD;
          }
        case 149: break;
        case 21: 
          { return MsilTokens.BLOCK_COMMENT;
          }
        case 150: break;
        case 56: 
          { return MsilTokens.UINT32_KEYWORD;
          }
        case 151: break;
        case 78: 
          { return MsilTokens.IMPLEMENTS_KEYWORD;
          }
        case 152: break;
        case 26: 
          { return MsilTokens._GET_KEYWORD;
          }
        case 153: break;
        case 81: 
          { return MsilTokens.RTSPECIALNAME_KEYWORD;
          }
        case 154: break;
        case 37: 
          { return MsilTokens.UINT8_KEYWORD;
          }
        case 155: break;
        case 20: 
          { return MsilTokens.LINE_COMMENT;
          }
        case 156: break;
        case 68: 
          { return MsilTokens.ABSTRACT_KEYWORD;
          }
        case 157: break;
        case 52: 
          { return MsilTokens.SEALED_KEYWORD;
          }
        case 158: break;
        case 3: 
          { return MsilTokens.PERC;
          }
        case 159: break;
        case 70: 
          { return MsilTokens._ASSEMBLY_KEYWORD;
          }
        case 160: break;
        case 33: 
          { return MsilTokens._CTOR_KEYWORD;
          }
        case 161: break;
        case 14: 
          { return MsilTokens.RPAR;
          }
        case 162: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
